unit UCalTables;
interface

uses
  sysutils, het.Utils;

////////////////////////////////////////////////////////////////////////////////
///  AMD_IL tables (source: AMD_IL_Instructions.xls)                         ///
////////////////////////////////////////////////////////////////////////////////

type
  TILRegisterFlag=(ReadOnly,WriteOnly);//and more to come
  TILRegisterFlags=set of TILRegisterFlag;
  TILRegisterRec=record
    name,
    descr:AnsiString;
    flags:TILRegisterFlags;
    comps:integer;//components
  end;

  TILModifierFlag=(
    req,//required
    dstmod//dst modifier, applies to all icfloat, icdouble instructions
  );
  TILModifierFlags=set of TILModifierFlag;
  TILModifierRec=record
    name:ansistring;
    optionFmt:ansistring;
    optionCnt:integer;
    flags:TILModifierFlags;
    multiMod:ansistring; //if set: ignore modname, and allow one of this list
  end;

  TILModifierEnum=(_absolute,_access,_addroffimmi,_aniso,_bias,_cached,_center,_centered,
    _centroid,_cmpval,_compselect,_coordmode,_coordtype,_d2,_d4,_d8,_dynamic,_elem,
    _elemOffset,_exportStream,_fmtw,_fmtx,_fmty,_fmtz,_gds,_id,_ieee,_in,_interp,_invert,
    _isoline,_lds,_length,_lodbias,_lOffset,_mag,_matrix,_memory,_min,_mip,_neighborExch,_normalize,
    _nrm3,_nrm4,_out,_outline,_param,_prim_type,_quad,_qualitybias,_relop,_resource,
    _resourcetype,_sample,_sampler,_sat,_shadowmode,_sharingMode,_size,_sr,_stage,_stride,
    _threads,_tri,_type,_uav,_uint,_usage,_usageIndex,_volmag,_volmin,_w,_wavefrontAbs,
    _wavefrontRel,_x,_x2,_x4,_x8,_xoffset,_y,_yoffset,_z,_zeroop,_zoffset);

  TILModifierSet=set of TILModifierEnum;

  TILInstrCategory=(icUnknown,icDcl,icFlow,icFloat,icDouble,icInt,icI64,icConv,icMM,icIo,icMem,icGDS,icLDS,icUAV);
  TILInstrFlag=(undoc,op1int,op2int{operands can be integer values},opIdx{instr has index eg. mcall(n)});
  TILInstrFlags=set of TILInstrFlag;
  TILInstrRec=record
    name:ansistring;
    ops:integer;
    mods:TILModifierSet;
    cat:TILInstrCategory;
    flags:TILInstrFlags;
    restrict:ansistring;
  end;
  PILInstrRec=^TILInstrRec;

function ILModifierByName(const name:ansistring):TILModifierEnum;
function ILInstrByName(const name:ansistring):PILInstrRec;
function ILInstrExists(const NameHash:integer):boolean;

const ILRegisterList:array[0..66]of TILRegisterRec=(  //sorted by freq of use
(name:'r#';descr:'temp';flags:[];comps:4),
(name:'l#';descr:'literal';flags:[ReadOnly];comps:4),
(name:'mem';descr:'mem swizzle';flags:[];comps:4),
(name:'cb#[]';descr:'const buffer';flags:[ReadOnly];comps:4),
(name:'c#';descr:'const float';flags:[ReadOnly];comps:4),
(name:'i#';descr:'const int';flags:[ReadOnly];comps:3),
(name:'g[]';descr:'global buffer';flags:[];comps:4),
(name:'vAbsTid';descr:'';flags:[ReadOnly];comps:3),
(name:'vAbsTidFlat';descr:'';flags:[ReadOnly];comps:1),
(name:'a0';descr:'address';flags:[WriteOnly];comps:1),
(name:'vBaryCoord';descr:'';flags:[ReadOnly];comps:4),
(name:'oClip#';descr:'';flags:[WriteOnly];comps:1),
(name:'b#';descr:'const bool';flags:[ReadOnly];comps:1),
(name:'oDepth';descr:'';flags:[WriteOnly];comps:1),
(name:'oDepthGE';descr:'';flags:[WriteOnly];comps:1),
(name:'oDepthLE';descr:'';flags:[WriteOnly];comps:1),
(name:'vDomain';descr:'';flags:[ReadOnly];comps:4),
(name:'oEdgeFlag';descr:'';flags:[WriteOnly];comps:1),
(name:'vFace';descr:'';flags:[ReadOnly];comps:1),
(name:'oFog';descr:'';flags:[];comps:1),
(name:'icb[]';descr:'immed const buf';flags:[ReadOnly];comps:4),
(name:'vIndex#';descr:'index';flags:[ReadOnly];comps:4),
(name:'v#[]';descr:'input';flags:[ReadOnly];comps:4),
(name:'vLineStipple';descr:'';flags:[ReadOnly];comps:2),
(name:'in#';descr:'input arg';flags:[];comps:4),
(name:'vCoverageMask';descr:'';flags:[WriteOnly];comps:1),
(name:'vcip[][]';descr:'';flags:[ReadOnly];comps:4),
(name:'oInterp#';descr:'';flags:[WriteOnly];comps:4),
(name:'vInterp#';descr:'';flags:[ReadOnly];comps:4),
(name:'x#[]';descr:'indexed temp';flags:[];comps:4),
(name:'vObjIndex';descr:'';flags:[ReadOnly];comps:1),
(name:'voutputcontrolpointid';descr:'ocp id';flags:[WriteOnly];comps:4),
(name:'oMask';descr:'';flags:[WriteOnly];comps:1),
(name:'o#[]';descr:'output';flags:[WriteOnly];comps:4),
(name:'out#';descr:'output arg';flags:[];comps:4),
(name:'vocp';descr:'';flags:[WriteOnly];comps:1),
(name:'vcp[]';descr:'path const';flags:[ReadOnly];comps:4),
(name:'oC#';descr:'pcolor';flags:[WriteOnly];comps:4),
(name:'p[]';descr:'persist';flags:[];comps:4),
(name:'vPixIn#';descr:'pinput';flags:[];comps:4),
(name:'oPos';descr:'';flags:[WriteOnly];comps:4),
(name:'oPriColor#';descr:'';flags:[WriteOnly];comps:4),
(name:'vPriColor#';descr:'';flags:[ReadOnly];comps:4),
(name:'vPrimCoord';descr:'';flags:[ReadOnly];comps:2),
(name:'vPrimIndex';descr:'';flags:[ReadOnly];comps:4),
(name:'vPrimType';descr:'';flags:[ReadOnly];comps:2),
(name:'oPsFog#';descr:'';flags:[WriteOnly];comps:1),
(name:'vQuadIndex';descr:'';flags:[ReadOnly];comps:4),
(name:'vSecColor#';descr:'';flags:[ReadOnly];comps:4),
(name:'oSecColor#';descr:'';flags:[WriteOnly];comps:4),
(name:'vIntstanceID';descr:'shader instance id';flags:[ReadOnly];comps:1),
(name:'sr#';descr:'shared temp';flags:[];comps:4),
(name:'oSprite';descr:'';flags:[WriteOnly];comps:1),
(name:'vSpriteCoord';descr:'';flags:[ReadOnly];comps:2),
(name:'oStencil';descr:'';flags:[WriteOnly];comps:1),
(name:'oT#';descr:'texcoord';flags:[WriteOnly];comps:4),
(name:'vT#';descr:'texcoord';flags:[ReadOnly];comps:4),
(name:'this';descr:'';flags:[ReadOnly];comps:4),
(name:'vThreadGrpID';descr:'';flags:[ReadOnly];comps:3),
(name:'vThreadGrpIDFlat';descr:'';flags:[ReadOnly];comps:1),
(name:'vTidInGrp';descr:'';flags:[ReadOnly];comps:3),
(name:'vTidInGrpFlat';descr:'';flags:[ReadOnly];comps:1),
(name:'Tmr';descr:'timer';flags:[ReadOnly];comps:2),
(name:'v#';descr:'vertex';flags:[ReadOnly];comps:4),
(name:'oVtxOut';descr:'';flags:[WriteOnly];comps:4),
(name:'vPrim';descr:'';flags:[];comps:4),
(name:'vWinCoord';descr:'';flags:[ReadOnly];comps:4));

const ILModifierList:array[TILModifierEnum]of TILModifierRec=( //sorted
(name:'absolute';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'access';optionFmt:'read,write,read_write,private';optionCnt:1;flags:[];multiMod:''),
(name:'addroffimmi';optionFmt:'#';optionCnt:3;flags:[];multiMod:''),
(name:'aniso';optionFmt:'disabled,1,2,4,8,16,unknown';optionCnt:1;flags:[];multiMod:''),
(name:'bias';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'cached';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'center';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'centered';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'centroid';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'cmpval';optionFmt:'0.0,0.5,1.0,-0.5,-1.0';optionCnt:1;flags:[req];multiMod:''),
(name:'compselect';optionFmt:'x,y,z,w,r,g,b,a';optionCnt:1;flags:[];multiMod:''),
(name:'coordmode';optionFmt:'normalized,unknown,unnormalized';optionCnt:1;flags:[req];multiMod:''),
(name:'coordtype';optionFmt:'normalized,unknown,unnormalized';optionCnt:1;flags:[];multiMod:''),
(name:'d2';optionFmt:'';optionCnt:0;flags:[dstmod];multiMod:''),
(name:'d4';optionFmt:'';optionCnt:0;flags:[dstmod];multiMod:''),
(name:'d8';optionFmt:'';optionCnt:0;flags:[dstmod];multiMod:''),
(name:'dynamic';optionFmt:'#';optionCnt:1;flags:[req];multiMod:''),
(name:'elem';optionFmt:'#';optionCnt:1;flags:[req];multiMod:''),
(name:'elemOffset';optionFmt:'#';optionCnt:1;flags:[req];multiMod:''),
(name:'exportStream';optionFmt:'#';optionCnt:1;flags:[req];multiMod:''),
(name:'fmtw';optionFmt:'uint,sint,float,unorm,snorm,srgh,mixed';optionCnt:1;flags:[];multiMod:''),
(name:'fmtx';optionFmt:'uint,sint,float,unorm,snorm,srgh,mixed';optionCnt:1;flags:[req];multiMod:''),
(name:'fmty';optionFmt:'uint,sint,float,unorm,snorm,srgh,mixed';optionCnt:1;flags:[];multiMod:''),
(name:'fmtz';optionFmt:'uint,sint,float,unorm,snorm,srgh,mixed';optionCnt:1;flags:[];multiMod:''),
(name:'gds';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'id';optionFmt:'#';optionCnt:1;flags:[req];multiMod:''),
(name:'ieee';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'in';optionFmt:'#';optionCnt:1;flags:[req];multiMod:''),
(name:'interp';optionFmt:'constant,linear,centroid,linear_noperspective,noperspective,noper_centroid,noper_sample,sample,notused';optionCnt:1;flags:[];multiMod:''),
(name:'invert';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'isoline';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'lds';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'length';optionFmt:'#';optionCnt:1;flags:[];multiMod:''),
(name:'lodbias';optionFmt:'#.#';optionCnt:1;flags:[req];multiMod:''),
(name:'lOffset';optionFmt:'#';optionCnt:1;flags:[];multiMod:''),
(name:'mag';optionFmt:'aniso,linear,point,unknown';optionCnt:1;flags:[req];multiMod:''),
(name:'matrix';optionFmt:'3x2,3x3,3x4,4x3,4x4';optionCnt:1;flags:[req];multiMod:''),
(name:'memory';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'min';optionFmt:'aniso,linear,point,unknown';optionCnt:1;flags:[req];multiMod:''),
(name:'mip';optionFmt:'base,linear,point,unknown';optionCnt:1;flags:[req];multiMod:''),
(name:'neighborExch';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'normalize';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'nrm3';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'nrm4';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'out';optionFmt:'#';optionCnt:1;flags:[req];multiMod:''),
(name:'outline';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'param';optionFmt:'#';optionCnt:1;flags:[req];multiMod:''),
(name:'prim_type';optionFmt:'';optionCnt:0;flags:[req];multiMod:'line,line_adj,point,triangle,triangle_adj,patch1,patch2,patch3,patch4,patch5,patch6,patch7'),
(name:'quad';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'qualitybias';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'relop';optionFmt:'eq,ge,gt,le,lt,ne';optionCnt:1;flags:[req];multiMod:''),
(name:'resource';optionFmt:'#';optionCnt:1;flags:[req];multiMod:''),
(name:'resourcetype';optionFmt:'1d,1darray,2d,2darray,2darraymsaa,2dms_array,2dmsaa,3d,4c,buffer,cubemap,cubemaparray,unknown';optionCnt:1;flags:[];multiMod:''),
(name:'sample';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'sampler';optionFmt:'#';optionCnt:1;flags:[req];multiMod:''),
(name:'sat';optionFmt:'';optionCnt:0;flags:[dstmod];multiMod:''),
(name:'shadowmode';optionFmt:'never,unknown,z';optionCnt:1;flags:[];multiMod:''),
(name:'sharingMode';optionFmt:'rel,abs';optionCnt:1;flags:[];multiMod:''),
(name:'size';optionFmt:'dword,short,byte';optionCnt:1;flags:[req];multiMod:''),
(name:'sr';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'stage';optionFmt:'#';optionCnt:1;flags:[];multiMod:''),
(name:'stride';optionFmt:'#';optionCnt:1;flags:[];multiMod:''),
(name:'threads';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'tri';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'type';optionFmt:'perlin1D,perlin2D,perlin3D,perlin4D,  1d,1darray,2d,2darray,2darraymsaa,2dms_array,2dmsaa,3d,4c,buffer,cubemap,cubemaparray,unknown, unnorm';optionCnt:1;flags:[req];multiMod:''),
(name:'uav';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'uint';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'usage';optionFmt:'';optionCnt:0;flags:[req];multiMod:'backcolor,color,density_tessfactor,detail_tessfactor,edge_tessfactor,fog,generic,inside_tessfactor,pointsize'+',position,wincoord,streamid,sampleindex,undefined,viewport_array_index,rendertarget_array_index,normal,node_coloring,coloring,lod,isfrontface,instanceid,vertexid,primitiveid,culldistance,clipdistance,sample_coverage'),
(name:'usageIndex';optionFmt:'#';optionCnt:1;flags:[req];multiMod:''),
(name:'volmag';optionFmt:'aniso,linear,point,unknown';optionCnt:1;flags:[];multiMod:''),
(name:'volmin';optionFmt:'aniso,linear,point,unknown';optionCnt:1;flags:[];multiMod:''),
(name:'w';optionFmt:'0,1,-,*';optionCnt:1;flags:[];multiMod:''),
(name:'wavefrontAbs';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'wavefrontRel';optionFmt:'';optionCnt:0;flags:[];multiMod:''),
(name:'x';optionFmt:'0,1,-,*';optionCnt:1;flags:[];multiMod:''),
(name:'x2';optionFmt:'';optionCnt:0;flags:[dstmod];multiMod:''),
(name:'x4';optionFmt:'';optionCnt:0;flags:[dstmod];multiMod:''),
(name:'x8';optionFmt:'';optionCnt:0;flags:[dstmod];multiMod:''),
(name:'xoffset';optionFmt:'#.#';optionCnt:1;flags:[];multiMod:''),
(name:'y';optionFmt:'0,1,-,*';optionCnt:1;flags:[];multiMod:''),
(name:'yoffset';optionFmt:'#.#';optionCnt:1;flags:[];multiMod:''),
(name:'z';optionFmt:'0,1,-,*';optionCnt:1;flags:[];multiMod:''),
(name:'zeroop';optionFmt:'zero,fltmax,inf_else_max,infinity';optionCnt:1;flags:[];multiMod:''),
(name:'zoffset';optionFmt:'#.#';optionCnt:1;flags:[];multiMod:''));

var ILInstrList:array[0..613]of TILInstrRec=(
(name:'abs';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'acos';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'add';ops:3;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'alias';ops:0;mods:[];cat:icdcl;flags:[];restrict:''),
(name:'and';ops:3;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'append_buf_alloc';ops:1;mods:[_id];cat:icmem;flags:[];restrict:''),
(name:'append_buf_consume';ops:1;mods:[_id];cat:icmem;flags:[];restrict:''),
(name:'asin';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'atan';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'bfi';ops:4;mods:[];cat:icint;flags:[undoc];restrict:''),
(name:'bfm';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'bitalign';ops:4;mods:[];cat:icint;flags:[];restrict:''),
(name:'break';ops:0;mods:[];cat:icflow;flags:[];restrict:''),
(name:'break_logicalnz';ops:1;mods:[];cat:icflow;flags:[];restrict:''),
(name:'break_logicalz';ops:1;mods:[];cat:icflow;flags:[];restrict:''),
(name:'breakc';ops:2;mods:[_relop];cat:icflow;flags:[];restrict:''),
(name:'bufinfo';ops:1;mods:[_resource,_uav];cat:icio;flags:[];restrict:''),
(name:'bufinfo_ext';ops:3;mods:[_resource,_uav];cat:icio;flags:[];restrict:''),
(name:'bytealign';ops:4;mods:[];cat:icint;flags:[];restrict:''),
(name:'call';ops:1;mods:[];cat:icflow;flags:[op1int];restrict:''),
(name:'call_logicalnz';ops:2;mods:[];cat:icflow;flags:[op2int];restrict:''),
(name:'call_logicalz';ops:2;mods:[];cat:icflow;flags:[op2int];restrict:''),
(name:'callnz';ops:2;mods:[];cat:icflow;flags:[op2int];restrict:''),
(name:'case';ops:1;mods:[];cat:icflow;flags:[];restrict:''),
(name:'clamp';ops:4;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'class';ops:-1;mods:[];cat:icfloat;flags:[undoc];restrict:''),
(name:'clg';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'cmov';ops:3;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'cmov_logical';ops:4;mods:[];cat:icint;flags:[];restrict:''),
(name:'cmp';ops:4;mods:[_relop,_cmpval];cat:icfloat;flags:[];restrict:''),
(name:'colorclamp';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'continue';ops:0;mods:[];cat:icflow;flags:[];restrict:''),
(name:'continue_logicalnz';ops:1;mods:[];cat:icflow;flags:[];restrict:''),
(name:'continue_logicalz';ops:1;mods:[];cat:icflow;flags:[];restrict:''),
(name:'continuec';ops:2;mods:[_relop];cat:icflow;flags:[];restrict:''),
(name:'cos';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'cos_vec';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'crs';ops:3;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'cu_id';ops:-1;mods:[];cat:icio;flags:[undoc];restrict:''),
(name:'cut';ops:0;mods:[];cat:icio;flags:[];restrict:''),
(name:'cut_stream';ops:0;mods:[];cat:icio;flags:[];restrict:''),
(name:'d2f';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'dabs';ops:2;mods:[];cat:icdouble;flags:[];restrict:''),
(name:'dadd';ops:3;mods:[];cat:icdouble;flags:[];restrict:''),
(name:'dcl_arena_uav';ops:0;mods:[_id];cat:icdcl;flags:[];restrict:''),
(name:'dcl_cb';ops:1;mods:[];cat:icdcl;flags:[];restrict:''),
(name:'dcl_function_body';ops:1;mods:[];cat:icdcl;flags:[];restrict:''),
(name:'dcl_function_table';ops:-1;mods:[_id];cat:icdcl ;flags:[];restrict:''),
(name:'dcl_gds';ops:1;mods:[_id];cat:icdcl;flags:[];restrict:''),
(name:'dcl_global_flags';ops:1;mods:[];cat:icdcl;flags:[];restrict:''),
(name:'dcl_gws_thread_count';ops:-1;mods:[];cat:icdcl;flags:[undoc];restrict:''),
(name:'dcl_indexed_temp_array';ops:1;mods:[];cat:icdcl;flags:[];restrict:''),
(name:'dcl_input';ops:1;mods:[_usage,_interp];cat:icdcl;flags:[];restrict:''),
(name:'dcl_input_primitive';ops:0;mods:[_prim_type];cat:icdcl;flags:[];restrict:'GS only'),
(name:'dcl_interface_ptr';ops:-1;mods:[_id,_dynamic];cat:icdcl;flags:[];restrict:''),
(name:'dcl_lds';ops:1;mods:[_id];cat:icdcl;flags:[];restrict:''),
(name:'dcl_lds_sharing_mode';ops:0;mods:[_wavefrontRel,_wavefrontAbs];cat:icdcl;flags:[];restrict:'R7XX only'),
(name:'dcl_lds_size_per_thread';ops:1;mods:[];cat:icdcl;flags:[];restrict:''),
(name:'dcl_literal';ops:5;mods:[];cat:icdcl;flags:[];restrict:''),
(name:'dcl_max_output_vertex_count';ops:1;mods:[];cat:icdcl;flags:[];restrict:''),
(name:'dcl_max_tessfactor';ops:1;mods:[];cat:icdcl;flags:[];restrict:'HS only'),
(name:'dcl_max_thread_per_group';ops:1;mods:[];cat:icdcl;flags:[];restrict:''),
(name:'dcl_num_icp';ops:1;mods:[];cat:icdcl;flags:[];restrict:'HS only'),
(name:'dcl_num_instances';ops:1;mods:[];cat:icdcl;flags:[];restrict:'GS only'),
(name:'dcl_num_ocp';ops:1;mods:[];cat:icdcl;flags:[];restrict:'HS only'),
(name:'dcl_num_thread_per_group';ops:3;mods:[];cat:icdcl;flags:[];restrict:''),
(name:'dcl_odepth';ops:0;mods:[];cat:icdcl;flags:[];restrict:''),
(name:'dcl_output';ops:1;mods:[_usage];cat:icdcl;flags:[];restrict:''),
(name:'dcl_output_topology';ops:1;mods:[];cat:icdcl;flags:[];restrict:''),
(name:'dcl_persistent_array';ops:-1;mods:[];cat:icdcl;flags:[undoc];restrict:''),
(name:'dcl_raw_srv';ops:0;mods:[_id];cat:icdcl;flags:[];restrict:''),
(name:'dcl_raw_uav';ops:0;mods:[_id];cat:icdcl;flags:[];restrict:''),
(name:'dcl_resource';ops:0;mods:[_type,_fmtx,_fmty,_fmtz,_fmtw];cat:icdcl;flags:[];restrict:''),
(name:'dcl_semaphore';ops:-1;mods:[];cat:icdcl;flags:[undoc];restrict:''),
(name:'dcl_shared_temp';ops:1;mods:[];cat:icdcl;flags:[];restrict:''),
(name:'dcl_stream';ops:1;mods:[];cat:icdcl;flags:[];restrict:'Evergreen+'),
(name:'dcl_struct_lds';ops:2;mods:[_id];cat:icdcl;flags:[];restrict:''),
(name:'dcl_struct_srv';ops:1;mods:[_id];cat:icdcl;flags:[];restrict:''),
(name:'dcl_struct_uav';ops:1;mods:[_id];cat:icdcl;flags:[];restrict:''),
(name:'dcl_total_num_thread_group';ops:3;mods:[];cat:icdcl;flags:[];restrict:''),
(name:'dcl_ts_domain';ops:0;mods:[_isoline,_tri,_quad];cat:icdcl;flags:[];restrict:'HS only'),
(name:'dcl_ts_output_primitive';ops:1;mods:[];cat:icdcl;flags:[];restrict:'HS only'),
(name:'dcl_ts_partition';ops:1;mods:[];cat:icdcl;flags:[];restrict:'HS only'),
(name:'dcl_typed_uav';ops:-1;mods:[];cat:icdcl;flags:[undoc];restrict:''),
(name:'dcl_typeless_uav';ops:-1;mods:[_id,_stride,_length,_access];cat:icdcl;flags:[undoc];restrict:''),
(name:'dcl_uav';ops:0;mods:[_id,_type,_fmtx];cat:icdcl;flags:[];restrict:''),
(name:'dcl_vprim';ops:0;mods:[];cat:icdcl;flags:[];restrict:'GS only'),
(name:'dclarray';ops:2;mods:[];cat:icdcl;flags:[];restrict:''),
(name:'dclass';ops:-1;mods:[];cat:icdouble;flags:[undoc];restrict:''),
(name:'dcldef';ops:1;mods:[_x,_y,_z,_w];cat:icdcl;flags:[];restrict:''),
(name:'dclpi';ops:1;mods:[_x,_y,_z,_w,_center,_bias,_invert,_centered];cat:icdcl;flags:[];restrict:''),
(name:'dclpin';ops:1;mods:[_usage,_usageIndex,_x,_y,_z,_w,_centroid];cat:icdcl;flags:[];restrict:''),
(name:'dclpp';ops:1;mods:[_param];cat:icdcl;flags:[];restrict:''),
(name:'dclpt';ops:0;mods:[_stage,_type,_coordmode];cat:icdcl;flags:[];restrict:''),
(name:'dclv';ops:1;mods:[_elem,_x,_y,_z,_w];cat:icdcl;flags:[];restrict:''),
(name:'dclvout';ops:1;mods:[_usage,_usageIndex,_x,_y,_z,_w];cat:icdcl;flags:[];restrict:''),
(name:'ddiv';ops:3;mods:[];cat:icdouble;flags:[];restrict:''),
(name:'ddiv_fixup';ops:3;mods:[];cat:icdouble;flags:[undoc];restrict:''),
(name:'ddiv_fmas';ops:3;mods:[];cat:icdouble;flags:[undoc];restrict:''),
(name:'ddiv_scale';ops:3;mods:[];cat:icdouble;flags:[undoc];restrict:''),
(name:'def';ops:5;mods:[];cat:icdcl;flags:[];restrict:''),
(name:'default';ops:0;mods:[];cat:icflow;flags:[];restrict:''),
(name:'defb';ops:2;mods:[];cat:icdcl;flags:[];restrict:''),
(name:'deq';ops:3;mods:[];cat:icdouble;flags:[];restrict:''),
(name:'det';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'dfrac';ops:2;mods:[];cat:icdouble;flags:[];restrict:''),
(name:'dfrexp';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'dfrexp_exp';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'dfrexp_mant';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'dge';ops:3;mods:[];cat:icdouble;flags:[];restrict:''),
(name:'discard_logicalnz';ops:1;mods:[];cat:icio;flags:[];restrict:'PS only'),
(name:'discard_logicalz';ops:1;mods:[];cat:icio;flags:[];restrict:'PS only'),
(name:'dist';ops:3;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'div';ops:3;mods:[_zeroop];cat:icfloat;flags:[];restrict:''),
(name:'div_precise';ops:3;mods:[_zeroop];cat:icfloat;flags:[];restrict:''),
(name:'dldexp';ops:3;mods:[];cat:icconv;flags:[];restrict:''),
(name:'dlt';ops:3;mods:[];cat:icdouble;flags:[];restrict:''),
(name:'dmad';ops:4;mods:[];cat:icdouble;flags:[];restrict:''),
(name:'dmax';ops:3;mods:[];cat:icdouble;flags:[];restrict:''),
(name:'dmin';ops:3;mods:[];cat:icdouble;flags:[];restrict:''),
(name:'dmov';ops:2;mods:[];cat:icdouble;flags:[];restrict:''),
(name:'dmovc';ops:4;mods:[_relop];cat:icdouble;flags:[];restrict:''),
(name:'dmul';ops:3;mods:[];cat:icdouble;flags:[];restrict:''),
(name:'dne';ops:3;mods:[];cat:icdouble;flags:[];restrict:''),
(name:'dp2';ops:3;mods:[_ieee];cat:icfloat;flags:[];restrict:''),
(name:'dp2add';ops:4;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'dp3';ops:3;mods:[_ieee];cat:icfloat;flags:[];restrict:''),
(name:'dp4';ops:3;mods:[_ieee];cat:icfloat;flags:[];restrict:''),
(name:'drcp';ops:2;mods:[_zeroop];cat:icdouble;flags:[];restrict:''),
(name:'drsq';ops:2;mods:[_zeroop];cat:icdouble;flags:[];restrict:''),
(name:'dsqrt';ops:2;mods:[];cat:icdouble;flags:[];restrict:''),
(name:'dst';ops:3;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'dsub';ops:-1;mods:[];cat:icunknown;flags:[undoc];restrict:''),
(name:'dsx';ops:2;mods:[_centroid];cat:icfloat;flags:[];restrict:''),
(name:'dsy';ops:2;mods:[_centroid];cat:icfloat;flags:[];restrict:''),
(name:'dtoi';ops:-1;mods:[];cat:icunknown;flags:[undoc];restrict:''),
(name:'dtou';ops:-1;mods:[];cat:icconv;flags:[undoc];restrict:''),
(name:'dtrig_preop';ops:-1;mods:[];cat:icunknown;flags:[undoc];restrict:''),
(name:'dxsincos';ops:4;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'else';ops:0;mods:[];cat:icflow;flags:[];restrict:''),
(name:'emit';ops:0;mods:[];cat:icio;flags:[];restrict:'GS only'),
(name:'emit_cut_sream';ops:0;mods:[];cat:icio;flags:[];restrict:'GS only'),
(name:'emit_stream';ops:0;mods:[];cat:icio;flags:[];restrict:'GS only'),
(name:'emitcut';ops:0;mods:[];cat:icio;flags:[];restrict:'GS only'),
(name:'end';ops:0;mods:[];cat:icflow;flags:[];restrict:''),
(name:'endfunc';ops:0;mods:[];cat:icflow;flags:[];restrict:''),
(name:'endif';ops:0;mods:[];cat:icflow;flags:[];restrict:''),
(name:'endloop';ops:0;mods:[];cat:icflow;flags:[];restrict:''),
(name:'endmain';ops:0;mods:[];cat:icflow;flags:[];restrict:''),
(name:'endphase';ops:0;mods:[];cat:icflow;flags:[];restrict:'HS only'),
(name:'endswitch';ops:0;mods:[];cat:icflow;flags:[];restrict:''),
(name:'eval_centroid';ops:2;mods:[];cat:icio;flags:[];restrict:''),
(name:'eval_sample_index';ops:3;mods:[];cat:icio;flags:[];restrict:''),
(name:'eval_snapped';ops:3;mods:[];cat:icio;flags:[];restrict:''),
(name:'exn';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'exp';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'exp_vec';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'expp';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'f_2_u4';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'f162f';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'f2d';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'f2f16';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'f2f16_near';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'f2f16_neg_inf';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'f2f16_plus_inf';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'f2u4';ops:-1;mods:[];cat:icconv;flags:[undoc];restrict:''),
(name:'faceforward';ops:4;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'fcall';ops:2;mods:[_id];cat:icdcl;flags:[];restrict:''),
(name:'fdiv_fixup';ops:-1;mods:[];cat:icfloat;flags:[undoc];restrict:''),
(name:'fdiv_fmas';ops:-1;mods:[];cat:icfloat;flags:[undoc];restrict:''),
(name:'fdiv_scale';ops:-1;mods:[];cat:icfloat;flags:[undoc];restrict:''),
(name:'fence';ops:0;mods:[_threads,_lds,_gds,_memory,_sr];cat:icdcl;flags:[];restrict:''),
(name:'fetch4';ops:2;mods:[_resource,_sampler,_coordtype,_compselect,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'fetch4_ext';ops:4;mods:[_resource,_sampler,_resourcetype,_coordtype,_compselect,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'fetch4c';ops:3;mods:[_resource,_sampler,_coordtype,_compselect,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'fetch4c_ext';ops:5;mods:[_resource,_sampler,_resourcetype,_coordtype,_compselect,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'fetch4po';ops:3;mods:[_resource,_sampler,_compselect,_coordtype];cat:icio;flags:[];restrict:''),
(name:'fetch4po_ext';ops:5;mods:[_resource,_sampler,_resourcetype,_compselect];cat:icio;flags:[];restrict:''),
(name:'fetch4poc';ops:4;mods:[_resource,_sampler,_compselect];cat:icio;flags:[];restrict:''),
(name:'fetch4poc_ext';ops:5;mods:[_resource,_sampler,_coordtype,_resourcetype,_compselect];cat:icio;flags:[];restrict:''),
(name:'ffb';ops:2;mods:[];cat:icint;flags:[];restrict:''),
(name:'fldexp';ops:-1;mods:[];cat:icunknown;flags:[undoc];restrict:''),
(name:'flr';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'fma';ops:4;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'frc';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'frexp';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'frexp_exp';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'frexp_mant';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'ftoi';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'ftoi_flr';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'ftoi_rpi';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'ftou';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'func';ops:1;mods:[];cat:icflow;flags:[op1int];restrict:''),
(name:'fwidth';ops:2;mods:[];cat:icfloat;flags:[];restrict:'non VS'),
(name:'gds_add';ops:2;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_add64';ops:2;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_and';ops:2;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_and64';ops:2;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_cmp_store';ops:3;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_cmp_store64';ops:3;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_dec';ops:2;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_dec64';ops:2;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_inc';ops:2;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_inc64';ops:2;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_load';ops:2;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_load64';ops:2;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_max';ops:2;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_max64';ops:2;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_min';ops:2;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_min64';ops:2;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_mskor';ops:3;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_mskor64';ops:3;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_or';ops:2;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_or64';ops:2;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_read_add';ops:3;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_read_add64';ops:3;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_read_and';ops:3;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_read_and64';ops:3;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_read_cmp_xchg';ops:4;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_read_cmp_xchg64';ops:4;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_read_dec';ops:3;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_read_dec64';ops:3;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_read_inc';ops:3;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_read_inc64';ops:3;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_read_max';ops:3;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_read_max64';ops:3;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_read_min';ops:3;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_read_min64';ops:3;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_read_mskor';ops:4;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_read_mskor64';ops:4;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_read_or';ops:3;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_read_or64';ops:3;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_read_rsub';ops:3;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_read_rsub64';ops:3;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_read_sub';ops:3;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_read_sub64';ops:3;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_read_umax';ops:3;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_read_umax64';ops:3;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_read_umin';ops:3;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_read_umin64';ops:3;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_read_xchg';ops:3;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_read_xchg64';ops:3;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_read_xor';ops:3;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_read_xor64';ops:3;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_rsub';ops:2;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_rsub64';ops:2;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_store';ops:2;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_store64';ops:2;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_sub';ops:2;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_sub64';ops:2;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_umax';ops:2;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_umax64';ops:2;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_umin';ops:2;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_umin64';ops:2;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'gds_xor';ops:2;mods:[_id];cat:icgds;flags:[];restrict:''),
(name:'gds_xor64';ops:2;mods:[_id];cat:icgds;flags:[undoc];restrict:''),
(name:'getlod';ops:-1;mods:[];cat:icio;flags:[undoc];restrict:''),
(name:'hs_cp_phase';ops:-1;mods:[];cat:icflow;flags:[];restrict:'HS only'),
(name:'hs_fork_phase';ops:1;mods:[];cat:icflow;flags:[];restrict:'HS only'),
(name:'hs_join_phase';ops:1;mods:[];cat:icflow;flags:[];restrict:'HS only'),
(name:'i64add';ops:3;mods:[];cat:ici64;flags:[];restrict:''),
(name:'i64div';ops:3;mods:[];cat:ici64;flags:[undoc];restrict:''),
(name:'i64eq';ops:3;mods:[];cat:ici64;flags:[];restrict:''),
(name:'i64ge';ops:3;mods:[];cat:ici64;flags:[];restrict:''),
(name:'i64lt';ops:3;mods:[];cat:ici64;flags:[];restrict:''),
(name:'i64max';ops:3;mods:[];cat:ici64;flags:[];restrict:''),
(name:'i64min';ops:3;mods:[];cat:ici64;flags:[];restrict:''),
(name:'i64mod';ops:3;mods:[];cat:ici64;flags:[undoc];restrict:''),
(name:'i64mul';ops:3;mods:[];cat:ici64;flags:[undoc];restrict:''),
(name:'i64ne';ops:3;mods:[];cat:ici64;flags:[];restrict:''),
(name:'i64negate';ops:2;mods:[];cat:ici64;flags:[];restrict:''),
(name:'i64shl';ops:3;mods:[];cat:ici64;flags:[];restrict:''),
(name:'i64shr';ops:3;mods:[];cat:ici64;flags:[];restrict:''),
(name:'i64sub';ops:3;mods:[];cat:ici64;flags:[];restrict:''),
(name:'iadd';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'iand';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'ibit_extract';ops:4;mods:[];cat:icint;flags:[];restrict:''),
(name:'iborrow';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'icarry';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'icbits';ops:2;mods:[];cat:icint;flags:[];restrict:''),
(name:'ieq';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'if_logicalnz';ops:1;mods:[];cat:icflow;flags:[];restrict:''),
(name:'if_logicalz';ops:1;mods:[];cat:icflow;flags:[];restrict:''),
(name:'ifc';ops:2;mods:[_relop];cat:icflow;flags:[];restrict:''),
(name:'ifnz';ops:1;mods:[];cat:icflow;flags:[];restrict:''),
(name:'ige';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'il_cs_2_0';ops:-1;mods:[];cat:icdcl;flags:[];restrict:''),
(name:'il_ps_2_0';ops:-1;mods:[];cat:icdcl;flags:[];restrict:''),
(name:'ilt';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'imad';ops:4;mods:[];cat:icint;flags:[];restrict:''),
(name:'imad24';ops:4;mods:[];cat:icint;flags:[];restrict:'Northern only'),
(name:'imax';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'imax3';ops:4;mods:[];cat:icint;flags:[undoc];restrict:''),
(name:'imed3';ops:4;mods:[];cat:icint;flags:[undoc];restrict:''),
(name:'imin';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'imin3';ops:4;mods:[];cat:icint;flags:[undoc];restrict:''),
(name:'imul';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'imul_high';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'imul24';ops:3;mods:[];cat:icint;flags:[];restrict:'Northern only'),
(name:'imul24_high';ops:3;mods:[];cat:icint;flags:[];restrict:'Northern only'),
(name:'ine';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'inegate';ops:2;mods:[];cat:icint;flags:[];restrict:''),
(name:'init_semaphore';ops:-1;mods:[];cat:icunknown;flags:[undoc];restrict:''),
(name:'init_shared_registers';ops:-1;mods:[];cat:icdcl;flags:[];restrict:'HD4xxx only'),
(name:'inot';ops:2;mods:[];cat:icint;flags:[];restrict:''),
(name:'invariant_mov';ops:-1;mods:[];cat:icfloat;flags:[undoc];restrict:''),
(name:'invariant_move';ops:-1;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'ior';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'ishl';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'ishr';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'isub';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'itod';ops:2;mods:[];cat:icconv;flags:[undoc];restrict:''),
(name:'itof';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'ixor';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'kill';ops:1;mods:[_stage,_sample];cat:icflow;flags:[];restrict:''),
(name:'ldexp';ops:-1;mods:[];cat:icunknown;flags:[undoc];restrict:''),
(name:'lds_add';ops:2;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_add64';ops:2;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_and';ops:2;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_and64';ops:2;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_cmp';ops:3;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_cmp64';ops:3;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_dec';ops:2;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_dec64';ops:2;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_inc';ops:2;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_inc64';ops:2;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_load';ops:2;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_load_byte';ops:2;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_load_short';ops:2;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_load_ubyte';ops:2;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_load_ushort';ops:2;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_load_vec';ops:3;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_load64';ops:2;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_max';ops:2;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_max64';ops:2;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_min';ops:2;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_min64';ops:2;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_mskor';ops:3;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_mskor64';ops:3;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_or';ops:2;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_or64';ops:2;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_read_add';ops:3;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_read_add64';ops:3;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_read_and';ops:3;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_read_and64';ops:3;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_read_cmp_xchg';ops:4;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_read_cmp_xchg64';ops:4;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_read_dec';ops:3;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_read_dec64';ops:3;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_read_inc';ops:3;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_read_inc64';ops:3;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_read_max';ops:3;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_read_max64';ops:3;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_read_min';ops:3;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_read_min64';ops:3;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_read_mskor';ops:4;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_read_mskor64';ops:4;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_read_or';ops:3;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_read_or64';ops:3;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_read_rsub';ops:3;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_read_rsub64';ops:3;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_read_sub';ops:3;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_read_sub64';ops:3;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_read_umax';ops:3;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_read_umax64';ops:3;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_read_umin';ops:3;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_read_umin64';ops:3;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_read_vec';ops:2;mods:[_neighborExch,_sharingMode];cat:icdcl;flags:[];restrict:'R7xx only'),
(name:'lds_read_xchg';ops:3;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_read_xchg64';ops:3;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_read_xor';ops:3;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_read_xor64';ops:3;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_rsub';ops:2;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_rsub64';ops:2;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_store';ops:2;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_store_byte';ops:2;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_store_short';ops:2;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_store_vec';ops:4;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_store64';ops:2;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_sub';ops:2;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_sub64';ops:2;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_umax';ops:2;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_umax64';ops:2;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_umin';ops:2;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_umin64';ops:2;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'lds_write_vec';ops:2;mods:[_lOffset];cat:icdcl;flags:[];restrict:'R7xx only'),
(name:'lds_xor';ops:2;mods:[_id];cat:iclds;flags:[];restrict:''),
(name:'lds_xor64';ops:2;mods:[_id];cat:iclds;flags:[undoc];restrict:''),
(name:'len';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'lit';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'ln';ops:2;mods:[_zeroop];cat:icfloat;flags:[];restrict:''),
(name:'load';ops:2;mods:[_resource,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'load_ext';ops:2;mods:[_resource,_resourcetype,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'load_fptr';ops:2;mods:[_resource,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'load_fptr_ext';ops:2;mods:[_resource,_resourcetype,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'lod';ops:2;mods:[_stage];cat:icio;flags:[];restrict:''),
(name:'log';ops:2;mods:[_zeroop];cat:icfloat;flags:[];restrict:''),
(name:'log_vec';ops:2;mods:[_zeroop];cat:icfloat;flags:[];restrict:''),
(name:'logp';ops:2;mods:[_zeroop];cat:icfloat;flags:[];restrict:''),
(name:'loop';ops:1;mods:[];cat:icflow;flags:[];restrict:''),
(name:'loop_rep';ops:1;mods:[];cat:icflow;flags:[];restrict:''),
(name:'lrp';ops:4;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'mad';ops:4;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'max';ops:3;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'max3';ops:4;mods:[];cat:icfloat;flags:[undoc];restrict:''),
(name:'mcall';ops:-1;mods:[];cat:icflow;flags:[opIdx];restrict:''),
(name:'mdef';ops:0;mods:[_out,_in,_outline];cat:icflow;flags:[opIdx];restrict:''),
(name:'med3';ops:4;mods:[];cat:icfloat;flags:[undoc];restrict:''),
(name:'memexport';ops:2;mods:[_exportStream,_elemOffset];cat:icio;flags:[];restrict:''),
(name:'memimport';ops:2;mods:[_elem];cat:icio;flags:[];restrict:''),
(name:'mend';ops:-1;mods:[];cat:icflow;flags:[];restrict:''),
(name:'min';ops:3;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'min3';ops:4;mods:[];cat:icfloat;flags:[undoc];restrict:''),
(name:'mmul';ops:3;mods:[_matrix];cat:icfloat;flags:[];restrict:''),
(name:'mod';ops:3;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'mov';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'mova';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'mova_round';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'mqsad';ops:-1;mods:[];cat:icmm;flags:[undoc];restrict:''),
(name:'msad';ops:-1;mods:[];cat:icmm;flags:[undoc];restrict:''),
(name:'mul';ops:3;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'noise';ops:2;mods:[_type];cat:icfloat;flags:[];restrict:''),
(name:'nop';ops:0;mods:[];cat:icflow;flags:[];restrict:''),
(name:'nrm';ops:2;mods:[_nrm3,_nrm4,_zeroop];cat:icfloat;flags:[];restrict:''),
(name:'op_semaphore_wait';ops:-1;mods:[];cat:icunknown;flags:[undoc];restrict:''),
(name:'pireduce';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'pow';ops:3;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'qsad';ops:-1;mods:[];cat:icmm;flags:[undoc];restrict:''),
(name:'rcp';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'rcp_vec';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'reflect';ops:3;mods:[_normalize];cat:icfloat;flags:[];restrict:''),
(name:'resinfo';ops:2;mods:[_resource,_uint];cat:icio;flags:[];restrict:''),
(name:'resinfo_ext';ops:2;mods:[_resource,_resourcetype,_uav,_uint];cat:icio;flags:[];restrict:''),
(name:'ret';ops:0;mods:[];cat:icflow;flags:[];restrict:''),
(name:'ret_dyn';ops:0;mods:[];cat:icflow;flags:[];restrict:''),
(name:'ret_logicalnz';ops:1;mods:[];cat:icflow;flags:[];restrict:''),
(name:'ret_logicalz';ops:1;mods:[];cat:icflow;flags:[];restrict:''),
(name:'rnd';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'round_nearest';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'round_neginf';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'round_plusinf';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'round_z';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'rsq';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'rsq_vec';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'sad';ops:4;mods:[];cat:icmm;flags:[];restrict:''),
(name:'sad_u16';ops:-1;mods:[];cat:icmm;flags:[undoc];restrict:''),
(name:'sad_u32';ops:-1;mods:[];cat:icmm;flags:[undoc];restrict:''),
(name:'sad4';ops:4;mods:[];cat:icmm;flags:[];restrict:''),
(name:'sadhi';ops:4;mods:[];cat:icmm;flags:[];restrict:''),
(name:'sample';ops:2;mods:[_resource,_sampler,_coordtype,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'sample_b';ops:3;mods:[_resource,_sampler,_coordtype,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'sample_b_ext';ops:5;mods:[_resource,_sampler,_resourcetype,_coordtype,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'sample_c';ops:3;mods:[_resource,_sampler,_coordtype,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'sample_c_b';ops:4;mods:[_resource,_sampler,_coordtype,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'sample_c_b_ext';ops:6;mods:[_resource,_sampler,_resourcetype,_coordtype,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'sample_c_ext';ops:5;mods:[_resource,_sampler,_resourcetype,_coordtype,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'sample_c_g';ops:5;mods:[_resource,_sampler,_coordtype,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'sample_c_g_ext';ops:7;mods:[_resource,_sampler,_resourcetype,_coordtype,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'sample_c_l';ops:4;mods:[_resource,_sampler,_coordtype,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'sample_c_l_ext';ops:6;mods:[_resource,_sampler,_resourcetype,_coordtype,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'sample_c_lz';ops:3;mods:[_resource,_sampler,_coordtype,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'sample_c_lz_ext';ops:5;mods:[_resource,_sampler,_resourcetype,_coordtype,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'sample_ext';ops:4;mods:[_resource,_sampler,_resourcetype,_coordtype,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'sample_g';ops:4;mods:[_resource,_sampler,_coordtype,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'sample_g_ext';ops:6;mods:[_resource,_sampler,_resourcetype,_coordtype,_addroffimmi];cat:icio;flags:[];restrict:''),
(name:'sample_l';ops:3;mods:[_resource,_sampler,_coordtype];cat:icio;flags:[];restrict:''),
(name:'sample_l_ext';ops:5;mods:[_resource,_sampler,_resourcetype,_coordtype];cat:icio;flags:[];restrict:''),
(name:'sample_return_code';ops:-1;mods:[];cat:icio;flags:[undoc];restrict:''),
(name:'sampleinfo';ops:2;mods:[_resource,_uint];cat:icio;flags:[];restrict:''),
(name:'sampleinfo_ext';ops:3;mods:[_resource,_resourcetype,_uint];cat:icio;flags:[];restrict:''),
(name:'samplepos';ops:2;mods:[_resource,_uint];cat:icio;flags:[];restrict:''),
(name:'samplepos_ext';ops:4;mods:[_resource,_resourcetype,_uint];cat:icio;flags:[];restrict:''),
(name:'semaphore_signal';ops:-1;mods:[];cat:icunknown;flags:[undoc];restrict:''),
(name:'set';ops:3;mods:[_relop];cat:icfloat;flags:[];restrict:''),
(name:'sgn';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'sin';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'sin_vec';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'sincos';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'sqrt';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'sqrt_vec';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'srv_raw_load';ops:2;mods:[_id];cat:icmem;flags:[];restrict:''),
(name:'srv_raw_load_ext';ops:3;mods:[_id];cat:icmem;flags:[];restrict:''),
(name:'srv_raw_load_ext';ops:2;mods:[_id];cat:icmem;flags:[];restrict:''),
(name:'srv_struct_load';ops:2;mods:[_id];cat:icmem;flags:[];restrict:''),
(name:'srv_struct_load_ext';ops:3;mods:[_id];cat:icmem;flags:[];restrict:''),
(name:'srv_struct_load_ext';ops:2;mods:[_id];cat:icmem;flags:[];restrict:''),
(name:'stream_id';ops:1;mods:[];cat:icio;flags:[undoc];restrict:''),
(name:'sub';ops:3;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'switch';ops:1;mods:[];cat:icflow;flags:[];restrict:''),
(name:'tan';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'texld';ops:2;mods:[_stage,_mag,_min,_aniso,_sample,_xoffset,_yoffset];cat:icio;flags:[];restrict:''),
(name:'texldb';ops:3;mods:[_stage,_centroid,_absolute,_shadowmode,_mag,_min,_volmag,_volmin,_mip,_aniso,_lodbias,_qualitybias,_xoffset,_yoffset,_zoffset];cat:icio;flags:[];restrict:''),
(name:'texldd';ops:4;mods:[_stage,_centroid,_shadowmode,_mag,_min,_volmag,_volmin,_mip,_aniso,_lodbias,_xoffset,_yoffset,_zoffset];cat:icio;flags:[];restrict:''),
(name:'texldms';ops:2;mods:[_stage,_mag,_min,_aniso,_sample,_xoffset,_yoffset];cat:icio;flags:[];restrict:''),
(name:'texweight';ops:2;mods:[_stage];cat:icio;flags:[];restrict:''),
(name:'transpose';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'trc';ops:2;mods:[];cat:icfloat;flags:[];restrict:''),
(name:'u4lerp';ops:4;mods:[];cat:icmm;flags:[];restrict:''),
(name:'u64div';ops:3;mods:[];cat:ici64;flags:[undoc];restrict:''),
(name:'u64ge';ops:3;mods:[];cat:ici64;flags:[];restrict:''),
(name:'u64lt';ops:3;mods:[];cat:ici64;flags:[];restrict:''),
(name:'u64max';ops:3;mods:[];cat:ici64;flags:[];restrict:''),
(name:'u64min';ops:3;mods:[];cat:ici64;flags:[];restrict:''),
(name:'u64mod';ops:3;mods:[];cat:ici64;flags:[undoc];restrict:''),
(name:'u64mul';ops:3;mods:[];cat:ici64;flags:[undoc];restrict:''),
(name:'u64shr';ops:3;mods:[];cat:ici64;flags:[];restrict:''),
(name:'uav_add';ops:2;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_add_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_and';ops:2;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_and_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_arena_load';ops:2;mods:[_id,_cached,_size];cat:icuav;flags:[];restrict:''),
(name:'uav_arena_store';ops:2;mods:[_id,_size];cat:icuav;flags:[];restrict:''),
(name:'uav_byte_load';ops:-1;mods:[_id,_cached];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_byte_load_ext';ops:-1;mods:[_id,_cached];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_byte_store';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_byte_store_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_cmp';ops:3;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_cmp_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_load';ops:2;mods:[_id,_cached];cat:icuav;flags:[];restrict:''),
(name:'uav_load_ext';ops:-1;mods:[_id,_cached];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_max';ops:2;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_max_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_min';ops:2;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_min_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_or';ops:2;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_or_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_raw_load';ops:2;mods:[_id,_cached];cat:icuav;flags:[];restrict:''),
(name:'uav_raw_load_ext';ops:-1;mods:[_id,_cached];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_raw_store';ops:3;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_raw_store_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_read_add';ops:3;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_read_add_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_read_and';ops:3;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_read_and_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_read_cmp_xchg';ops:4;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_read_cmp_xchg_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_read_max';ops:3;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_read_max_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_read_min';ops:3;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_read_min_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_read_or';ops:3;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_read_or_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_read_rsub';ops:3;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_read_rsub_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_read_sub';ops:3;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_read_sub_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_read_udec';ops:3;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_read_udec_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_read_uinc';ops:3;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_read_uinc_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_read_umax';ops:3;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_read_umax_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_read_umin';ops:3;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_read_umin_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_read_xchg';ops:3;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_read_xchg_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_read_xor';ops:3;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_read_xor_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_rsub';ops:2;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_rsub_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_short_load';ops:2;mods:[_id,_cached];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_short_load_ext';ops:-1;mods:[_id,_cached];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_short_store';ops:2;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_short_store_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_store';ops:2;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_store_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_struct_load';ops:2;mods:[_id,_cached];cat:icuav;flags:[];restrict:''),
(name:'uav_struct_load_ext';ops:-1;mods:[_id,_cached];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_struct_store';ops:3;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_struct_store_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_sub';ops:2;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_sub_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_ubyte_load';ops:-1;mods:[_id,_cached];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_ubyte_load_ext';ops:-1;mods:[_id,_cached];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_udec';ops:2;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_udec_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_uinc';ops:2;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_uinc_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_umax';ops:2;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_umax_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_umin';ops:2;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_umin_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_ushort_load';ops:-1;mods:[_id,_cached];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_ushort_load_ext';ops:-1;mods:[_id,_cached];cat:icuav;flags:[undoc];restrict:''),
(name:'uav_xor';ops:2;mods:[_id];cat:icuav;flags:[];restrict:''),
(name:'uav_xor_ext';ops:-1;mods:[_id];cat:icuav;flags:[undoc];restrict:''),
(name:'ubit_extract';ops:4;mods:[];cat:icint;flags:[];restrict:''),
(name:'ubit_insert';ops:5;mods:[];cat:icint;flags:[];restrict:''),
(name:'ubit_reverse';ops:2;mods:[];cat:icint;flags:[];restrict:''),
(name:'ubit_reverser';ops:-1;mods:[];cat:icint;flags:[undoc];restrict:''),
(name:'udiv';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'uge';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'ult';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'umad';ops:4;mods:[];cat:icint;flags:[];restrict:''),
(name:'umad24';ops:4;mods:[];cat:icint;flags:[];restrict:''),
(name:'umax';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'umax3';ops:4;mods:[];cat:icint;flags:[undoc];restrict:''),
(name:'umed3';ops:4;mods:[];cat:icint;flags:[undoc];restrict:''),
(name:'umin';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'umin3';ops:4;mods:[];cat:icint;flags:[undoc];restrict:''),
(name:'umod';ops:3;mods:[];cat:icint;flags:[undoc];restrict:''),
(name:'umul';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'umul_high';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'umul24';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'umul24_high';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'unpack0';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'unpack1';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'unpack2';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'unpack3';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'ushr';ops:3;mods:[];cat:icint;flags:[];restrict:''),
(name:'utod';ops:2;mods:[];cat:icconv;flags:[undoc];restrict:''),
(name:'utof';ops:2;mods:[];cat:icconv;flags:[];restrict:''),
(name:'wave_id';ops:-1;mods:[];cat:icio;flags:[undoc];restrict:''),
(name:'whileloop';ops:0;mods:[];cat:icflow;flags:[];restrict:''));


var
  ILModifierNameList,
  ILOptionNameList,
  ILKeywordList:TArray<ansistring>;
  ILInstrHashList:TArray<integer>;

////////////////////////////////////////////////////////////////////////////////
///  ISA_VLIW tables                                                         ///
////////////////////////////////////////////////////////////////////////////////

function ISAVLIW_INSTR_OP2_name(const ACode:integer):ansistring;
function ISAVLIW_INSTR_OP3_name(const ACode:integer):ansistring;

const ISAVLIW_INSTR_OP2_list:array[0..177]of record code:integer;name:ansistring end=(
(code:0 ;name:'ADD'),
(code:1 ;name:'MUL'),
(code:2 ;name:'MUL_IEEE'),
(code:3 ;name:'MAX'),
(code:4 ;name:'MIN'),
(code:5 ;name:'MAX_DX10'),
(code:6 ;name:'MIN_DX10'),
(code:7 ;name:'Reserved(7)'),
(code:8 ;name:'SETE'),
(code:9 ;name:'SETGT'),
(code:10 ;name:'SETGE'),
(code:11 ;name:'SETNE'),
(code:12 ;name:'SETE_DX10'),
(code:13 ;name:'SETGT_DX10'),
(code:14 ;name:'SETGE_DX10'),
(code:15 ;name:'SETNE_DX10'),
(code:16 ;name:'FRACT'),
(code:17 ;name:'TRUNC'),
(code:18 ;name:'CEIL'),
(code:19 ;name:'RNDNE'),
(code:20 ;name:'FLOOR'),
(code:21 ;name:'ASHR_INT'),
(code:22 ;name:'LSHR_INT'),
(code:23 ;name:'LSHL_INT'),
(code:24 ;name:'Reserved(24)'),
(code:25 ;name:'MOV'),
(code:26 ;name:'NOP'),
(code:27 ;name:'MUL_64'),
(code:28 ;name:'FLT64_TO_FLT32'),
(code:29 ;name:'FLT32_TO_FLT64'),
(code:30 ;name:'PRED_SETGT_UINT'),
(code:31 ;name:'PRED_SETGE_UINT'),
(code:32 ;name:'PRED_SETE'),
(code:33 ;name:'PRED_SETGT'),
(code:34 ;name:'PRED_SETGE'),
(code:35 ;name:'PRED_SETNE'),
(code:36 ;name:'PRED_SET_INV'),
(code:37 ;name:'PRED_SET_POP'),
(code:38 ;name:'PRED_SET_CLR'),
(code:39 ;name:'PRED_SET_RESTORE'),
(code:40 ;name:'PRED_SETE_PUSH'),
(code:41 ;name:'PRED_SETGT_PUSH'),
(code:42 ;name:'PRED_SETGE_PUSH'),
(code:43 ;name:'PRED_SETNE_PUSH'),
(code:44 ;name:'KILLE'),
(code:45 ;name:'KILLGT'),
(code:46 ;name:'KILLGE'),
(code:47 ;name:'KILLNE'),
(code:48 ;name:'AND_INT'),
(code:49 ;name:'OR_INT'),
(code:50 ;name:'XOR_INT'),
(code:51 ;name:'NOT_INT'),
(code:52 ;name:'ADD_INT'),
(code:53 ;name:'SUB_INT'),
(code:54 ;name:'MAX_INT'),
(code:55 ;name:'MIN_INT'),
(code:56 ;name:'MAX_UINT'),
(code:57 ;name:'MIN_UINT'),
(code:58 ;name:'SETE_INT'),
(code:59 ;name:'SETGT_INT'),
(code:60 ;name:'SETGE_INT'),
(code:61 ;name:'SETNE_INT'),
(code:62 ;name:'SETGT_UINT'),
(code:63 ;name:'SETGE_UINT'),
(code:64 ;name:'KILLGT_UINT'),
(code:65 ;name:'KILLGE_UINT'),
(code:66 ;name:'PREDE_INT'),
(code:67 ;name:'PRED_SETGT_INT'),
(code:68 ;name:'PRED_SETGE_INT'),
(code:69 ;name:'PRED_SETNE_INT'),
(code:70 ;name:'KILLE_INT'),
(code:71 ;name:'KILLGT_INT'),
(code:72 ;name:'KILLGE_INT'),
(code:73 ;name:'KILLNE_INT'),
(code:74 ;name:'PRED_SETE_PUSH_INT'),
(code:75 ;name:'PRED_SETGT_PUSH_INT'),
(code:76 ;name:'PRED_SETGE_PUSH_INT'),
(code:77 ;name:'PRED_SETNE_PUSH_INT'),
(code:78 ;name:'PRED_SETLT_PUSH_INT'),
(code:79 ;name:'PRED_SETLE_PUSH_INT'),
(code:80 ;name:'FLT_TO_INT'),
(code:81 ;name:'BFREV_INT'),
(code:82 ;name:'ADDC_UINT'),
(code:83 ;name:'SUBB_UINT'),
(code:84 ;name:'GROUP_BARRIER'),
(code:85 ;name:'GROUP_SEQ_BEGIN'),
(code:86 ;name:'GROUP_SEQ_END'),
(code:87 ;name:'SET_MODE'),
(code:88 ;name:'SET_CF_IDX0'),
(code:89 ;name:'SET_CF_IDX1'),
(code:90 ;name:'SET_LDS_SIZE'),
(code:129 ;name:'EXP_IEEE'),
(code:130 ;name:'LOG_CLAMPED'),
(code:131 ;name:'LOG_IEEE'),
(code:132 ;name:'RECIP_CLAMPED'),
(code:133 ;name:'RECIP_FF'),
(code:134 ;name:'RECIP_IEEE'),
(code:135 ;name:'RECIPSQRT_CLAMPED'),
(code:136 ;name:'RECIPSQRT_FF'),
(code:137 ;name:'RECIPSQRT_IEEE'),
(code:138 ;name:'SQRT_IEEE'),
(code:141 ;name:'SIN'),
(code:142 ;name:'COS'),
(code:143 ;name:'MULLO_INT'),
(code:144 ;name:'MULHI_INT'),
(code:145 ;name:'MULLO_UINT'),
(code:146 ;name:'MULHI_UINT'),
(code:147 ;name:'RECIP_INT'),
(code:148 ;name:'RECIP_UINT'),
(code:149 ;name:'RECIP_64'),
(code:150 ;name:'RECIP_CLAMPED_64'),
(code:151 ;name:'RECIPSQRT_64'),
(code:152 ;name:'RECIPSQRT_CLAMPED_64'),
(code:153 ;name:'SQRT_64'),
(code:154 ;name:'FLT_TO_UINT'),
(code:155 ;name:'INT_TO_FLT'),
(code:156 ;name:'UINT_TO_FLT'),
(code:160 ;name:'BFM_INT'),
(code:162 ;name:'FLT32_TO_FLT16'),
(code:163 ;name:'FLT16_TO_FLT32'),
(code:164 ;name:'UBYTE0_FLT'),
(code:165 ;name:'UBYTE1_FLT'),
(code:166 ;name:'UBYTE2_FLT'),
(code:167 ;name:'UBYTE3_FLT'),
(code:170 ;name:'BCNT_INT'),
(code:171 ;name:'FFBH_UINT'),
(code:172 ;name:'FFBL_INT'),
(code:173 ;name:'FFBH_INT'),
(code:174 ;name:'FLT_TO_UINT4'),
(code:175 ;name:'DOT_IEEE'),
(code:176 ;name:'FLT_TO_INT_RPI'),
(code:177 ;name:'FLT_TO_INT_FLOOR'),
(code:178 ;name:'MULHI_UINT24'),
(code:179 ;name:'MBCNT_32HI_INT'),
(code:180 ;name:'OFFSET_TO_FLT'),
(code:181 ;name:'MUL_UINT24'),
(code:182 ;name:'BCNT_ACCUM_PREV_INT'),
(code:183 ;name:'MBCNT_32LO_ACCUM_PREV_INT'),
(code:184 ;name:'SETE_64'),
(code:185 ;name:'SETNE_64'),
(code:186 ;name:'SETGT_64'),
(code:187 ;name:'SETGE_64'),
(code:188 ;name:'MIN_64'),
(code:189 ;name:'MAX_64'),
(code:190 ;name:'DOT4'),
(code:191 ;name:'DOT4_IEEE'),
(code:192 ;name:'CUBE'),
(code:193 ;name:'MAX4'),
(code:196 ;name:'FREXP_64'),
(code:197 ;name:'LDEXP_64'),
(code:198 ;name:'FRACT_64'),
(code:199 ;name:'PRED_SETGT_64'),
(code:200 ;name:'PRED_SETE_64'),
(code:201 ;name:'PRED_SETGE_64'),
(code:202 ;name:'MUL_64'),
(code:203 ;name:'ADD_64'),
(code:204 ;name:'MOVA_INT'),
(code:205 ;name:'FLT64_TO_FLT32'),
(code:206 ;name:'FLT32_TO_FLT64'),
(code:207 ;name:'SAD_ACCUM_PREV_UINT'),
(code:208 ;name:'DOT'),
(code:209 ;name:'MUL_PREV'),
(code:210 ;name:'MUL_IEEE_PREV'),
(code:211 ;name:'ADD_PREV'),
(code:212 ;name:'MULADD_PREV'),
(code:213 ;name:'MULADD_IEEE_PREV'),
(code:214 ;name:'INTERP_XY'),
(code:215 ;name:'INTERP_ZW'),
(code:216 ;name:'INTERP_X'),
(code:217 ;name:'INTERP_Z'),
(code:218 ;name:'STORE_FLAGS'),
(code:219 ;name:'LOAD_STORE_FLAGS'),
(code:220 ;name:'LDS_1A: DO NOT USE.'),
(code:221 ;name:'LDS_1A1D: DO NOT USE.'),
(code:223 ;name:'LDS_2A: DO NOT USE.'),
(code:224 ;name:'INTERP_LOAD_P0'),
(code:225 ;name:'INTERP_LOAD_P10'),
(code:226 ;name:'INTERP_LOAD_P20'));

const ISAVLIW_INSTR_OP3_list:array[0..24]of record code:integer;name:ansistring end=(
(code:4 ;name:'BFE_UINT'),
(code:5 ;name:'BFE_INT'),
(code:6 ;name:'BFI_INT'),
(code:7 ;name:'FMA'),
(code:9 ;name:'CNDNE_64'),
(code:10 ;name:'FMA_64'),
(code:11 ;name:'LERP_UINT'),
(code:12 ;name:'BIT_ALIGN_INT'),
(code:13 ;name:'BYTE_ALIGN_INT'),
(code:14 ;name:'SAD_ACCUM_UINT'),
(code:15 ;name:'SAD_ACCUM_HI_UINT'),
(code:16 ;name:'MULADD_UINT24'),
(code:17 ;name:'LDS_IDX_OP: This opcodes implies ALU_WORD*_LDS_IDX_OP encoding.'),
(code:20 ;name:'MULADD'),
(code:21 ;name:'MULADD_M2'),
(code:22 ;name:'MULADD_M4'),
(code:23 ;name:'MULADD_D2'),
(code:24 ;name:'MULADD_IEEE'),
(code:25 ;name:'CNDE'),
(code:26 ;name:'CNDGT'),
(code:27 ;name:'CNDGE'),
(code:28 ;name:'CNDE_INT'),
(code:29 ;name:'CMNDGT_INT'),
(code:30 ;name:'CMNDGE_INT'),
(code:31 ;name:'MUL_LIT'));


////////////////////////////////////////////////////////////////////////////////
///  ISA(GCN) tables                                                          ///
////////////////////////////////////////////////////////////////////////////////

type
  TIsaInstrEncoding=({0} XOP,
                     {1} SOP1,SOP2,SOPK,SOPC,SOPP,SMRD,
                     {7} VOP1,VOP2,VOP3,VOPC,VINTRP,
                     DS,EXP,MUBUF,MTBUF,MIMG);

  TISAInstrRec=record
    code,code3:cardinal;
    enc:TIsaInstrEncoding;
    name,pfmt,descr:ansistring
  end;
  PISAInstrRec=^TISAInstrRec;

function ISAInstrByName(const AName:ansistring):TArray<PISAInstrRec>;
function ISAInstrExists(const NameHash:integer):boolean;

var ISAInstrList:array[0..2304]of TIsaInstrRec=(
(code:       $1;code3:       $1;enc:XOP;name:'isa79xx';pfmt:'';descr:'marks beginning of kernel'),
(code:       $1;code3:       $1;enc:XOP;name:'numsgprs';pfmt:'n';descr:'declare SReg usage'),
(code:       $1;code3:       $1;enc:XOP;name:'numvgprs';pfmt:'n';descr:'declare VReg usage'),
(code:       $1;code3:       $1;enc:XOP;name:'cb0size';pfmt:'n';descr:'declare cb0 size (in dqwords) CAL only'),
(code:       $1;code3:       $1;enc:XOP;name:'ldssize';pfmt:'n';descr:'declare LDS size (in bytes)'),
(code:       $1;code3:       $1;enc:XOP;name:'oclbuffers';pfmt:'n, n';descr:'declare buffers for opencl: UAVCount, CBCount. Default= 1,1'),
(code:       $1;code3:       $1;enc:XOP;name:'dd';pfmt:'n, ...';descr:'inline one or more dwords'),
(code:       $1;code3:       $1;enc:XOP;name:'alias';pfmt:'n=x, ...';descr:'declare alias ex.: alias name=s[0:1], name2=vcc, x0..7=v[8..9]'),
(code:       $1;code3:       $1;enc:XOP;name:'numthreadpergroup';pfmt:'n';descr:'declares threads/group. Default= (x=64, y=1, z=1)'),
(code:       $1;code3:       $1;enc:XOP;name:'v_temp_range';pfmt:'n, n..n, n..n, ...';descr:'sets up temp VReg area'),
(code:       $1;code3:       $1;enc:XOP;name:'s_temp_range';pfmt:'n, n..n, n..n, ...';descr:'sets up temp SReg area'),
(code:       $1;code3:       $1;enc:XOP;name:'v_temp';pfmt:'a, b, c align:2';descr:'allocates temp VRegs'),
(code:       $1;code3:       $1;enc:XOP;name:'s_temp';pfmt:'a, b, c align:2';descr:'allocates temp SRegs'),
(code:       $1;code3:       $1;enc:XOP;name:'enter';pfmt:'';descr:'enters local temp register scope'),
(code:       $1;code3:       $1;enc:XOP;name:'leave';pfmt:'';descr:'leaves local temp register scope'),
(code:       $1;code3:       $1;enc:XOP;name:'eof';pfmt:'';descr:'marks end of kernel'),
(code:       $1;code3:       $1;enc:XOP;name:'aligncode';pfmt:'n';descr:'align following code n bytes'),
(code:       $1;code3:       $1;enc:XOP;name:'databegin';pfmt:'';descr:'tells the disassembler: data will follow'),
(code:       $1;code3:       $1;enc:XOP;name:'dataend';pfmt:'';descr:'tells the disassembler: data block ends here'),
(code:$80000000;code3:       $0;enc:SOP2;name:'s_add_u32';pfmt:'s0, s0, s0';descr:'D.u = S0.u + S1.u. SCC = carry-out'),
(code:$80800000;code3:       $0;enc:SOP2;name:'s_sub_u32';pfmt:'s0, s0, s0';descr:'D.u = S0.u - S1.u. SCC = carry-out'),
(code:$81000000;code3:       $0;enc:SOP2;name:'s_add_i32';pfmt:'s0, s0, s0';descr:'D.u = S0.i + S1.i. SCC = overflow.'),
(code:$81800000;code3:       $0;enc:SOP2;name:'s_sub_i32';pfmt:'s0, s0, s0';descr:'D.u = S0.i - S1.i. SCC = overflow.'),
(code:$82000000;code3:       $0;enc:SOP2;name:'s_addc_u32';pfmt:'s0, s0, s0';descr:'D.u = S0.u + S1.u + SCC. SCC = carry-out'),
(code:$82800000;code3:       $0;enc:SOP2;name:'s_subb_u32';pfmt:'s0, s0, s0';descr:'D.u = S0.u - S1.u - SCC. SCC = carry-out'),
(code:$83000000;code3:       $0;enc:SOP2;name:'s_min_i32';pfmt:'s0, s0, s0';descr:'D.i = (S0.i < S1.i) ? S0.i : S1.i.  SCC = 1 if S0 is min.'),
(code:$83800000;code3:       $0;enc:SOP2;name:'s_min_u32';pfmt:'s0, s0, s0';descr:'D.u = (S0.u < S1.u) ? S0.u : S1.u.  SCC = 1 if S0 is min.'),
(code:$84000000;code3:       $0;enc:SOP2;name:'s_max_i32';pfmt:'s0, s0, s0';descr:'D.i = (S0.i > S1.i) ? S0.i : S1.i.  SCC = 1 if S0 is max.'),
(code:$84800000;code3:       $0;enc:SOP2;name:'s_max_u32';pfmt:'s0, s0, s0';descr:'D.u = (S0.u > S1.u) ? S0.u : S1.u.  SCC = 1 if S0 is max.'),
(code:$85000000;code3:       $0;enc:SOP2;name:'s_cselect_b32';pfmt:'s0, s0, s0';descr:'D.u = SCC ? S0.u : S1.u'),
(code:$85800000;code3:       $0;enc:SOP2;name:'s_cselect_b64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$86000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_12';pfmt:'s0, s0, s0';descr:''),
(code:$86800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_13';pfmt:'s0, s0, s0';descr:''),
(code:$87000000;code3:       $0;enc:SOP2;name:'s_and_b32';pfmt:'s0, s0, s0';descr:'D.u = S0.u & S1.u. SCC = 1 if result is non-zero'),
(code:$87800000;code3:       $0;enc:SOP2;name:'s_and_b64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$88000000;code3:       $0;enc:SOP2;name:'s_or_b32';pfmt:'s0, s0, s0';descr:'D.u = S0.u | S1.u. SCC = 1 if result is non-zero'),
(code:$88800000;code3:       $0;enc:SOP2;name:'s_or_b64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$89000000;code3:       $0;enc:SOP2;name:'s_xor_b32';pfmt:'s0, s0, s0';descr:'D.u = S0.u ^ S1.u. SCC = 1 if result is non-zero'),
(code:$89800000;code3:       $0;enc:SOP2;name:'s_xor_b64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$8A000000;code3:       $0;enc:SOP2;name:'s_andn2_b32';pfmt:'s0, s0, s0';descr:'D.u = S0.u & ~S1.u. SCC = 1 if result is non-zero'),
(code:$8A800000;code3:       $0;enc:SOP2;name:'s_andn2_b64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$8B000000;code3:       $0;enc:SOP2;name:'s_orn2_b32';pfmt:'s0, s0, s0';descr:'D.u = S0.u | ~S1.u. SCC = 1 if result is non-zero'),
(code:$8B800000;code3:       $0;enc:SOP2;name:'s_orn2_b64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$8C000000;code3:       $0;enc:SOP2;name:'s_nand_b32';pfmt:'s0, s0, s0';descr:'D.u = ~(S0.u & S1.u). SCC = 1 if result is non-zero'),
(code:$8C800000;code3:       $0;enc:SOP2;name:'s_nand_b64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$8D000000;code3:       $0;enc:SOP2;name:'s_nor_b32';pfmt:'s0, s0, s0';descr:'D.u = ~(S0.u | S1.u). SCC = 1 if result is non-zero'),
(code:$8D800000;code3:       $0;enc:SOP2;name:'s_nor_b64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$8E000000;code3:       $0;enc:SOP2;name:'s_xnor_b32';pfmt:'s0, s0, s0';descr:'D.u = ~(S0.u ^ S1.u). SCC = 1 if result is non-zero'),
(code:$8E800000;code3:       $0;enc:SOP2;name:'s_xnor_b64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$8F000000;code3:       $0;enc:SOP2;name:'s_lshl_b32';pfmt:'s0, s0, s0';descr:'D.u = S0.u << S1.u[4:0]. SCC = 1 if result is non-zero'),
(code:$8F800000;code3:       $0;enc:SOP2;name:'s_lshl_b64';pfmt:'s[0:1], s[0:1], s0';descr:'D.u = S0.u << S1.u[5:0]. SCC = 1 if result is non-zero'),
(code:$90000000;code3:       $0;enc:SOP2;name:'s_lshr_b32';pfmt:'s0, s0, s0';descr:'D.u = S0.u >> S1.u[4:0]. SCC = 1 if result is non-zero'),
(code:$90800000;code3:       $0;enc:SOP2;name:'s_lshr_b64';pfmt:'s[0:1], s[0:1], s0';descr:'D.u = S0.u >> S1.u[5:0]. SCC = 1 if result is non-zero'),
(code:$91000000;code3:       $0;enc:SOP2;name:'s_ashr_i32';pfmt:'s0, s0, s0';descr:'D.i = signext(S0.i) >> S1.u[4:0]. SCC = 1 if result is non-zero'),
(code:$91800000;code3:       $0;enc:SOP2;name:'s_ashr_i64';pfmt:'s[0:1], s[0:1], s0';descr:'D.i = signext(S0.i) >> S1.u[5:0]. SCC = 1 if result is non-zero'),
(code:$92000000;code3:       $0;enc:SOP2;name:'s_bfm_b32';pfmt:'s0, s0, s0';descr:'D.u = ((1<<S0.u[4:0])-1) << S1.u[4:0]; bitfield mask'),
(code:$92800000;code3:       $0;enc:SOP2;name:'s_bfm_b64';pfmt:'s[0:1], s0, s0';descr:'D.u = ((1<<S0.u[5:0])-1) << S1.u[5:0]; bitfield mask'),
(code:$93000000;code3:       $0;enc:SOP2;name:'s_mul_i32';pfmt:'s0, s0, s0';descr:''),
(code:$93800000;code3:       $0;enc:SOP2;name:'s_bfe_u32';pfmt:'s0, s0, s0';descr:'Bit field extract. S0 is Data, S1[4:0] is field offset, S1[22:16] is field width. D.u = (S0.u>>S1.u[4:0]) & ((1<<S1.u[22:16])-1). SCC = 1 if result is non-zero'),
(code:$94000000;code3:       $0;enc:SOP2;name:'s_bfe_i32';pfmt:'s0, s0, s0';descr:''),
(code:$94800000;code3:       $0;enc:SOP2;name:'s_bfe_u64';pfmt:'s[0:1], s[0:1], s0';descr:'Bit field extract. S0 is Data, S1[5:0] is field offset, S1[22:16] is field width. D.u = (S0.u>>S1.u[5:0]) & ((1<<S1.u[22:16])-1). SCC = 1 if result is non-zero'),
(code:$95000000;code3:       $0;enc:SOP2;name:'s_bfe_i64';pfmt:'s[0:1], s[0:1], s0';descr:''),
(code:$95800000;code3:       $0;enc:SOP2;name:'s_cbranch_g_fork';pfmt:'s[0:1], s[0:1]';descr:'Conditional branch using branch-stack. Arg0=compare mask(vcc or any sgpr), Arg1 = 64-bit byte address of target instruction.'),
(code:$96000000;code3:       $0;enc:SOP2;name:'s_absdiff_i32';pfmt:'s0, s0, s0';descr:'D.i = abs(S0.i - S1.i).  SCC = 1 if result is non-zero.'),
(code:$96800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_45';pfmt:'s0, s0, s0';descr:''),
(code:$97000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_46';pfmt:'s0, s0, s0';descr:''),
(code:$97800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_47';pfmt:'s0, s0, s0';descr:''),
(code:$98000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_48';pfmt:'s0, s0, s0';descr:''),
(code:$98800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_49';pfmt:'s0, s0, s0';descr:''),
(code:$99000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_50';pfmt:'s0, s0, s0';descr:''),
(code:$99800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_51';pfmt:'s0, s0, s0';descr:''),
(code:$9A000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_52';pfmt:'s0, s0, s0';descr:''),
(code:$9A800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_53';pfmt:'s0, s0, s0';descr:''),
(code:$9B000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_54';pfmt:'s0, s0, s0';descr:''),
(code:$9B800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_55';pfmt:'s0, s0, s0';descr:''),
(code:$9C000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_56';pfmt:'s0, s0, s0';descr:''),
(code:$9C800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_57';pfmt:'s0, s0, s0';descr:''),
(code:$9D000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_58';pfmt:'s0, s0, s0';descr:''),
(code:$9D800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_59';pfmt:'s0, s0, s0';descr:''),
(code:$9E000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_60';pfmt:'s0, s0, s0';descr:''),
(code:$9E800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_61';pfmt:'s0, s0, s0';descr:''),
(code:$9F000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_62';pfmt:'s0, s0, s0';descr:''),
(code:$9F800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_63';pfmt:'s0, s0, s0';descr:''),
(code:$A0000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_64';pfmt:'s0, s0, s0';descr:''),
(code:$A0800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_65';pfmt:'s0, s0, s0';descr:''),
(code:$A1000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_66';pfmt:'s0, s0, s0';descr:''),
(code:$A1800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_67';pfmt:'s0, s0, s0';descr:''),
(code:$A2000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_68';pfmt:'s0, s0, s0';descr:''),
(code:$A2800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_69';pfmt:'s0, s0, s0';descr:''),
(code:$A3000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_70';pfmt:'s0, s0, s0';descr:''),
(code:$A3800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_71';pfmt:'s0, s0, s0';descr:''),
(code:$A4000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_72';pfmt:'s0, s0, s0';descr:''),
(code:$A4800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_73';pfmt:'s0, s0, s0';descr:''),
(code:$A5000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_74';pfmt:'s0, s0, s0';descr:''),
(code:$A5800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_75';pfmt:'s0, s0, s0';descr:''),
(code:$A6000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_76';pfmt:'s0, s0, s0';descr:''),
(code:$A6800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_77';pfmt:'s0, s0, s0';descr:''),
(code:$A7000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_78';pfmt:'s0, s0, s0';descr:''),
(code:$A7800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_79';pfmt:'s0, s0, s0';descr:''),
(code:$A8000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_80';pfmt:'s0, s0, s0';descr:''),
(code:$A8800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_81';pfmt:'s0, s0, s0';descr:''),
(code:$A9000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_82';pfmt:'s0, s0, s0';descr:''),
(code:$A9800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_83';pfmt:'s0, s0, s0';descr:''),
(code:$AA000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_84';pfmt:'s0, s0, s0';descr:''),
(code:$AA800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_85';pfmt:'s0, s0, s0';descr:''),
(code:$AB000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_86';pfmt:'s0, s0, s0';descr:''),
(code:$AB800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_87';pfmt:'s0, s0, s0';descr:''),
(code:$AC000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_88';pfmt:'s0, s0, s0';descr:''),
(code:$AC800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_89';pfmt:'s0, s0, s0';descr:''),
(code:$AD000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_90';pfmt:'s0, s0, s0';descr:''),
(code:$AD800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_91';pfmt:'s0, s0, s0';descr:''),
(code:$AE000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_92';pfmt:'s0, s0, s0';descr:''),
(code:$AE800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_93';pfmt:'s0, s0, s0';descr:''),
(code:$AF000000;code3:       $0;enc:SOP2;name:'SOP2_invalid_94';pfmt:'s0, s0, s0';descr:''),
(code:$AF800000;code3:       $0;enc:SOP2;name:'SOP2_invalid_95';pfmt:'s0, s0, s0';descr:''),
(code:$B0000000;code3:       $0;enc:SOPK;name:'s_movk_i32';pfmt:'s0, 0x0000';descr:'D.i = signext(SIMM16)'),
(code:$B0800000;code3:       $0;enc:SOPK;name:'SOPK_invalid_1';pfmt:'s0, 0x0000';descr:''),
(code:$B1000000;code3:       $0;enc:SOPK;name:'s_cmovk_i32';pfmt:'s0, 0x0000';descr:'if(SCC) D.i = signext(SIMM16); else NOP'),
(code:$B1800000;code3:       $0;enc:SOPK;name:'s_cmpk_eq_i32';pfmt:'s0, 0x0000';descr:'SCC = (D.i == signext(SIMM16))'),
(code:$B2000000;code3:       $0;enc:SOPK;name:'s_cmpk_lg_i32';pfmt:'s0, 0x0000';descr:'SCC = (D.i != signext(SIMM16))'),
(code:$B2800000;code3:       $0;enc:SOPK;name:'s_cmpk_gt_i32';pfmt:'s0, 0x0000';descr:'SCC = (D.i > signext(SIMM16))'),
(code:$B3000000;code3:       $0;enc:SOPK;name:'s_cmpk_ge_i32';pfmt:'s0, 0x0000';descr:'SCC = (D.i >= signext(SIMM16))'),
(code:$B3800000;code3:       $0;enc:SOPK;name:'s_cmpk_lt_i32';pfmt:'s0, 0x0000';descr:'SCC = (D.i < signext(SIMM16))'),
(code:$B4000000;code3:       $0;enc:SOPK;name:'s_cmpk_le_i32';pfmt:'s0, 0x0000';descr:'SCC = (D.i <= signext(SIMM16))'),
(code:$B4800000;code3:       $0;enc:SOPK;name:'s_cmpk_eq_u32';pfmt:'s0, 0x0000';descr:'SCC = (D.u == SIMM16)'),
(code:$B5000000;code3:       $0;enc:SOPK;name:'s_cmpk_lg_u32';pfmt:'s0, 0x0000';descr:'SCC = (D.u != SIMM16)'),
(code:$B5800000;code3:       $0;enc:SOPK;name:'s_cmpk_gt_u32';pfmt:'s0, 0x0000';descr:'SCC = (D.u > SIMM16)'),
(code:$B6000000;code3:       $0;enc:SOPK;name:'s_cmpk_ge_u32';pfmt:'s0, 0x0000';descr:'SCC = (D.u >= SIMM16)'),
(code:$B6800000;code3:       $0;enc:SOPK;name:'s_cmpk_lt_u32';pfmt:'s0, 0x0000';descr:'SCC = (D.u < SIMM16)'),
(code:$B7000000;code3:       $0;enc:SOPK;name:'s_cmpk_le_u32';pfmt:'s0, 0x0000';descr:'SCC = (D.u <= SIMM16)'),
(code:$B7800000;code3:       $0;enc:SOPK;name:'s_addk_i32';pfmt:'s0, 0x0000';descr:'D.i = D.i + signext(SIMM16). SCC = overflow.'),
(code:$B8000000;code3:       $0;enc:SOPK;name:'s_mulk_i32';pfmt:'s0, 0x0000';descr:'D.i = D.i * signext(SIMM16). SCC = overflow.'),
(code:$B8800000;code3:       $0;enc:SOPK;name:'s_cbranch_i_fork';pfmt:'s[0:1], label_0027';descr:'Conditional branch using branch-stack. Arg0(sdst)=compare mask(vcc or any sgpr), SIMM16 = signed DWORD branch offset relative to next instruction.'),
(code:$B9000000;code3:       $0;enc:SOPK;name:'s_getreg_b32';pfmt:'s0, hwreg(0, 0, 1)';descr:'D.u = hardware-reg. Read some or all of a hw reg into the LSBs of D. SIMM16 = {size[4:0], offset[4:0], hwRegId[5:0]}; offset is 0..31, size is 1..32.'),
(code:$B9800000;code3:       $0;enc:SOPK;name:'s_setreg_b32';pfmt:'hwreg(0, 0, 1), s0';descr:'hardware-reg = D.u. Write some or all of the LSBs of D into a hw reg (note that D is a source SGPR). SIMM16 = {size[4:0], offset[4:0], hwRegId[5:0]}; offset is 0..31, size is 1..32.'),
(code:$BA000000;code3:       $0;enc:SOPK;name:'s_getreg_regrd_b32';pfmt:'s0, 0x0000';descr:'H/W internal use only.  REGRD_TMP = hardware-reg. Read some or all of a hw reg into the LSBs of D. SIMM16 = {size[4:0], offset[4:0], hwRegId[5:0]}; offset is 0..31, size is 1..32.'),
(code:$BA800000;code3:       $0;enc:SOPK;name:'s_setreg_imm32_b32';pfmt:'0x0000, s0';descr:'This instruction uses a 32-bit literal constant. Write some or all of the LSBs of IMM32 into a hw reg. SIMM16 = {size[4:0], offset[4:0], hwRegId[5:0]}; offset is 0..31, size is 1..32.'),
(code:$BB000000;code3:       $0;enc:SOPK;name:'SOPK_invalid_22';pfmt:'s0, 0x0000';descr:''),
(code:$BB800000;code3:       $0;enc:SOPK;name:'SOPK_invalid_23';pfmt:'s0, 0x0000';descr:''),
(code:$BC000000;code3:       $0;enc:SOPK;name:'SOPK_invalid_24';pfmt:'s0, 0x0000';descr:''),
(code:$BC800000;code3:       $0;enc:SOPK;name:'SOPK_invalid_25';pfmt:'s0, 0x0000';descr:''),
(code:$BD000000;code3:       $0;enc:SOPK;name:'SOPK_invalid_26';pfmt:'s0, 0x0000';descr:''),
(code:$BD800000;code3:       $0;enc:SOPK;name:'SOPK_invalid_27';pfmt:'s0, 0x0000';descr:''),
(code:$BE000000;code3:       $0;enc:SOPK;name:'SOPK_invalid_28';pfmt:'s0, 0x0000';descr:''),
(code:$BE800000;code3:       $0;enc:SOPK;name:'SOP1_invalid_0';pfmt:'s0, s0';descr:''),
(code:$BF000000;code3:       $0;enc:SOPK;name:'SOPK_invalid_s_cmp_eq_i32';pfmt:'s0, s0';descr:'see s_cmp_eq_i32 at SOPC'),
(code:$BE800000;code3:       $0;enc:SOP1;name:'SOP1_invalid_0';pfmt:'s0, s0';descr:''),
(code:$BE800100;code3:       $0;enc:SOP1;name:'SOP1_invalid_1';pfmt:'s0, s0';descr:''),
(code:$BE800200;code3:       $0;enc:SOP1;name:'SOP1_invalid_2';pfmt:'s0, s0';descr:''),
(code:$BE800300;code3:       $0;enc:SOP1;name:'s_mov_b32';pfmt:'s0, s0';descr:'D.u = S0.u'),
(code:$BE800400;code3:       $0;enc:SOP1;name:'s_mov_b64';pfmt:'s[0:1], s[0:1]';descr:''),
(code:$BE800500;code3:       $0;enc:SOP1;name:'s_cmov_b32';pfmt:'s0, s0';descr:'if(SCC) D.u = S0.u; else NOP'),
(code:$BE800600;code3:       $0;enc:SOP1;name:'s_cmov_b64';pfmt:'s[0:1], s[0:1]';descr:''),
(code:$BE800700;code3:       $0;enc:SOP1;name:'s_not_b32';pfmt:'s0, s0';descr:'D.u = ~S0.u. SCC = 1 if result is non-zero'),
(code:$BE800800;code3:       $0;enc:SOP1;name:'s_not_b64';pfmt:'s[0:1], s[0:1]';descr:''),
(code:$BE800900;code3:       $0;enc:SOP1;name:'s_wqm_b32';pfmt:'s0, s0';descr:'D.u = WholeQuadMode(S0.u). SCC = 1 if result is non-zero'),
(code:$BE800A00;code3:       $0;enc:SOP1;name:'s_wqm_b64';pfmt:'s[0:1], s[0:1]';descr:''),
(code:$BE800B00;code3:       $0;enc:SOP1;name:'s_brev_b32';pfmt:'s0, s0';descr:'D.u = S0.u[0:31] (reverse bits)'),
(code:$BE800C00;code3:       $0;enc:SOP1;name:'s_brev_b64';pfmt:'s[0:1], s[0:1]';descr:'D.u = S0.u[0:63] (reverse bits)'),
(code:$BE800D00;code3:       $0;enc:SOP1;name:'s_bcnt0_i32_b32';pfmt:'s0, s0';descr:'D.i = CountZeroBits(S0.u). SCC = 1 if result is non-zero'),
(code:$BE800E00;code3:       $0;enc:SOP1;name:'s_bcnt0_i32_b64';pfmt:'s0, s[0:1]';descr:''),
(code:$BE800F00;code3:       $0;enc:SOP1;name:'s_bcnt1_i32_b32';pfmt:'s0, s0';descr:'D.i = CountOneBits(S0.u). SCC = 1 if result is non-zero'),
(code:$BE801000;code3:       $0;enc:SOP1;name:'s_bcnt1_i32_b64';pfmt:'s0, s[0:1]';descr:''),
(code:$BE801100;code3:       $0;enc:SOP1;name:'s_ff0_i32_b32';pfmt:'s0, s0';descr:'D.i = FindFirstZero(S0.u) from LSB; if no zeros, return -1'),
(code:$BE801200;code3:       $0;enc:SOP1;name:'s_ff0_i32_b64';pfmt:'s0, s[0:1]';descr:''),
(code:$BE801300;code3:       $0;enc:SOP1;name:'s_ff1_i32_b32';pfmt:'s0, s0';descr:'D.i = FindFirstOne(S0.u) from LSB; if no ones, return -1'),
(code:$BE801400;code3:       $0;enc:SOP1;name:'s_ff1_i32_b64';pfmt:'s0, s[0:1]';descr:''),
(code:$BE801500;code3:       $0;enc:SOP1;name:'s_flbit_i32_b32';pfmt:'s0, s0';descr:'D.i = FindFirstOne(S0.u) from MSB; if no ones, return -1'),
(code:$BE801600;code3:       $0;enc:SOP1;name:'s_flbit_i32_b64';pfmt:'s0, s[0:1]';descr:''),
(code:$BE801700;code3:       $0;enc:SOP1;name:'s_flbit_i32';pfmt:'s0, s0';descr:'D.i = Find first bit opposite of sign bit from MSB. If S0 == -1, return -1.'),
(code:$BE801800;code3:       $0;enc:SOP1;name:'s_flbit_i32_i64';pfmt:'s0, s[0:1]';descr:''),
(code:$BE801900;code3:       $0;enc:SOP1;name:'s_sext_i32_i8';pfmt:'s0, s0';descr:'D.i = signext(S0.i[7:0])'),
(code:$BE801A00;code3:       $0;enc:SOP1;name:'s_sext_i32_i16';pfmt:'s0, s0';descr:'D.i = signext(S0.i[15:0])'),
(code:$BE801B00;code3:       $0;enc:SOP1;name:'s_bitset0_b32';pfmt:'s0, s0';descr:'D.u[S0.u[4:0]] = 0'),
(code:$BE801C00;code3:       $0;enc:SOP1;name:'s_bitset0_b64';pfmt:'s[0:1], s0';descr:'D.u[S0.u[5:0]] = 0'),
(code:$BE801D00;code3:       $0;enc:SOP1;name:'s_bitset1_b32';pfmt:'s0, s0';descr:'D.u[S0.u[4:0]] = 1'),
(code:$BE801E00;code3:       $0;enc:SOP1;name:'s_bitset1_b64';pfmt:'s[0:1], s0';descr:'D.u[S0.u[5:0]] = 1'),
(code:$BE801F00;code3:       $0;enc:SOP1;name:'s_getpc_b64';pfmt:'s[0:1]';descr:'D.u = PC + 4; destination receives the byte address of the next instruction.'),
(code:$BE802000;code3:       $0;enc:SOP1;name:'s_setpc_b64';pfmt:'s[0:1]';descr:'PC = S0.u; S0.u is a byte address of the instruction to jump to.'),
(code:$BE802100;code3:       $0;enc:SOP1;name:'s_swappc_b64';pfmt:'s[0:1], s[0:1]';descr:'D.u = PC + 4; PC = S0.u.'),
(code:$BE802200;code3:       $0;enc:SOP1;name:'s_rfe_b64';pfmt:'s[0:1]';descr:'Return from Exception; PC = TTMP1,0'),
(code:$BE802300;code3:       $0;enc:SOP1;name:'SOP1_invalid_35';pfmt:'s0, s0';descr:''),
(code:$BE802400;code3:       $0;enc:SOP1;name:'s_and_saveexec_b64';pfmt:'s[0:1], s[0:1]';descr:'D.u = EXEC, EXEC = S0.u & EXEC. SCC = 1 if the new value of EXEC is non-zero'),
(code:$BE802500;code3:       $0;enc:SOP1;name:'s_or_saveexec_b64';pfmt:'s[0:1], s[0:1]';descr:'D.u = EXEC, EXEC = S0.u | EXEC. SCC = 1 if the new value of EXEC is non-zero'),
(code:$BE802600;code3:       $0;enc:SOP1;name:'s_xor_saveexec_b64';pfmt:'s[0:1], s[0:1]';descr:'D.u = EXEC, EXEC = S0.u ^ EXEC. SCC = 1 if the new value of EXEC is non-zero'),
(code:$BE802700;code3:       $0;enc:SOP1;name:'s_andn2_saveexec_b64';pfmt:'s[0:1], s[0:1]';descr:'D.u = EXEC, EXEC = S0.u & ~EXEC. SCC = 1 if the new value of EXEC is non-zero'),
(code:$BE802800;code3:       $0;enc:SOP1;name:'s_orn2_saveexec_b64';pfmt:'s[0:1], s[0:1]';descr:'D.u = EXEC, EXEC = S0.u | ~EXEC. SCC = 1 if the new value of EXEC is non-zero'),
(code:$BE802900;code3:       $0;enc:SOP1;name:'s_nand_saveexec_b64';pfmt:'s[0:1], s[0:1]';descr:'D.u = EXEC, EXEC = ~(S0.u & EXEC). SCC = 1 if the new value of EXEC is non-zero'),
(code:$BE802A00;code3:       $0;enc:SOP1;name:'s_nor_saveexec_b64';pfmt:'s[0:1], s[0:1]';descr:'D.u = EXEC, EXEC = ~(S0.u | EXEC). SCC = 1 if the new value of EXEC is non-zero'),
(code:$BE802B00;code3:       $0;enc:SOP1;name:'s_xnor_saveexec_b64';pfmt:'s[0:1], s[0:1]';descr:'D.u = EXEC, EXEC = ~(S0.u ^ EXEC). SCC = 1 if the new value of EXEC is non-zero'),
(code:$BE802C00;code3:       $0;enc:SOP1;name:'s_quadmask_b32';pfmt:'s0, s0';descr:'D.u = QuadMask(S0.u). D[0] = OR(S0[3:0]), D[1] = OR(S0[7:4]) .... SCC = 1 if result is non-zero'),
(code:$BE802D00;code3:       $0;enc:SOP1;name:'s_quadmask_b64';pfmt:'s[0:1], s[0:1]';descr:''),
(code:$BE802E00;code3:       $0;enc:SOP1;name:'s_movrels_b32';pfmt:'s0, s0';descr:'SGPR[D.u] = SGPR[S0.u + M0.u]'),
(code:$BE802F00;code3:       $0;enc:SOP1;name:'s_movrels_b64';pfmt:'s[0:1], s[0:1]';descr:''),
(code:$BE803000;code3:       $0;enc:SOP1;name:'s_movreld_b32';pfmt:'s0, s0';descr:'SGPR[D.u + M0.u] = SGPR[S0.u]'),
(code:$BE803100;code3:       $0;enc:SOP1;name:'s_movreld_b64';pfmt:'s[0:1], s[0:1]';descr:''),
(code:$BE803200;code3:       $0;enc:SOP1;name:'s_cbranch_join';pfmt:'s0';descr:'Conditional branch join point. Arg0 = saved CSP value. no dest.'),
(code:$BE803300;code3:       $0;enc:SOP1;name:'s_mov_regrd_b32';pfmt:'s0, s0';descr:'H/W internal use only.  REGRD_TMP = S0.u'),
(code:$BE803400;code3:       $0;enc:SOP1;name:'s_abs_i32';pfmt:'s0, s0';descr:'D.i = abs(S0.i). SCC=1 if result is non-zero'),
(code:$BE803500;code3:       $0;enc:SOP1;name:'s_mov_fed_b32';pfmt:'s0, s0';descr:'D.u = S0.u, introduce edc double error upon write to dest sgpr'),
(code:$BE803600;code3:       $0;enc:SOP1;name:'SOP1_invalid_54';pfmt:'s0, s0';descr:''),
(code:$BE803700;code3:       $0;enc:SOP1;name:'SOP1_invalid_55';pfmt:'s0, s0';descr:''),
(code:$BE803800;code3:       $0;enc:SOP1;name:'SOP1_invalid_56';pfmt:'s0, s0';descr:''),
(code:$BE803900;code3:       $0;enc:SOP1;name:'SOP1_invalid_57';pfmt:'s0, s0';descr:''),
(code:$BE803A00;code3:       $0;enc:SOP1;name:'SOP1_invalid_58';pfmt:'s0, s0';descr:''),
(code:$BE803B00;code3:       $0;enc:SOP1;name:'SOP1_invalid_59';pfmt:'s0, s0';descr:''),
(code:$BE803C00;code3:       $0;enc:SOP1;name:'SOP1_invalid_60';pfmt:'s0, s0';descr:''),
(code:$BE803D00;code3:       $0;enc:SOP1;name:'SOP1_invalid_61';pfmt:'s0, s0';descr:''),
(code:$BE803E00;code3:       $0;enc:SOP1;name:'SOP1_invalid_62';pfmt:'s0, s0';descr:''),
(code:$BE803F00;code3:       $0;enc:SOP1;name:'SOP1_invalid_63';pfmt:'s0, s0';descr:''),
(code:$BE804000;code3:       $0;enc:SOP1;name:'SOP1_invalid_64';pfmt:'s0, s0';descr:''),
(code:$BE804100;code3:       $0;enc:SOP1;name:'SOP1_invalid_65';pfmt:'s0, s0';descr:''),
(code:$BE804200;code3:       $0;enc:SOP1;name:'SOP1_invalid_66';pfmt:'s0, s0';descr:''),
(code:$BE804300;code3:       $0;enc:SOP1;name:'SOP1_invalid_67';pfmt:'s0, s0';descr:''),
(code:$BE804400;code3:       $0;enc:SOP1;name:'SOP1_invalid_68';pfmt:'s0, s0';descr:''),
(code:$BE804500;code3:       $0;enc:SOP1;name:'SOP1_invalid_69';pfmt:'s0, s0';descr:''),
(code:$BE804600;code3:       $0;enc:SOP1;name:'SOP1_invalid_70';pfmt:'s0, s0';descr:''),
(code:$BE804700;code3:       $0;enc:SOP1;name:'SOP1_invalid_71';pfmt:'s0, s0';descr:''),
(code:$BE804800;code3:       $0;enc:SOP1;name:'SOP1_invalid_72';pfmt:'s0, s0';descr:''),
(code:$BE804900;code3:       $0;enc:SOP1;name:'SOP1_invalid_73';pfmt:'s0, s0';descr:''),
(code:$BE804A00;code3:       $0;enc:SOP1;name:'SOP1_invalid_74';pfmt:'s0, s0';descr:''),
(code:$BE804B00;code3:       $0;enc:SOP1;name:'SOP1_invalid_75';pfmt:'s0, s0';descr:''),
(code:$BE804C00;code3:       $0;enc:SOP1;name:'SOP1_invalid_76';pfmt:'s0, s0';descr:''),
(code:$BE804D00;code3:       $0;enc:SOP1;name:'SOP1_invalid_77';pfmt:'s0, s0';descr:''),
(code:$BE804E00;code3:       $0;enc:SOP1;name:'SOP1_invalid_78';pfmt:'s0, s0';descr:''),
(code:$BE804F00;code3:       $0;enc:SOP1;name:'SOP1_invalid_79';pfmt:'s0, s0';descr:''),
(code:$BE805000;code3:       $0;enc:SOP1;name:'SOP1_invalid_80';pfmt:'s0, s0';descr:''),
(code:$BE805100;code3:       $0;enc:SOP1;name:'SOP1_invalid_81';pfmt:'s0, s0';descr:''),
(code:$BE805200;code3:       $0;enc:SOP1;name:'SOP1_invalid_82';pfmt:'s0, s0';descr:''),
(code:$BE805300;code3:       $0;enc:SOP1;name:'SOP1_invalid_83';pfmt:'s0, s0';descr:''),
(code:$BE805400;code3:       $0;enc:SOP1;name:'SOP1_invalid_84';pfmt:'s0, s0';descr:''),
(code:$BE805500;code3:       $0;enc:SOP1;name:'SOP1_invalid_85';pfmt:'s0, s0';descr:''),
(code:$BE805600;code3:       $0;enc:SOP1;name:'SOP1_invalid_86';pfmt:'s0, s0';descr:''),
(code:$BE805700;code3:       $0;enc:SOP1;name:'SOP1_invalid_87';pfmt:'s0, s0';descr:''),
(code:$BE805800;code3:       $0;enc:SOP1;name:'SOP1_invalid_88';pfmt:'s0, s0';descr:''),
(code:$BE805900;code3:       $0;enc:SOP1;name:'SOP1_invalid_89';pfmt:'s0, s0';descr:''),
(code:$BE805A00;code3:       $0;enc:SOP1;name:'SOP1_invalid_90';pfmt:'s0, s0';descr:''),
(code:$BE805B00;code3:       $0;enc:SOP1;name:'SOP1_invalid_91';pfmt:'s0, s0';descr:''),
(code:$BE805C00;code3:       $0;enc:SOP1;name:'SOP1_invalid_92';pfmt:'s0, s0';descr:''),
(code:$BE805D00;code3:       $0;enc:SOP1;name:'SOP1_invalid_93';pfmt:'s0, s0';descr:''),
(code:$BE805E00;code3:       $0;enc:SOP1;name:'SOP1_invalid_94';pfmt:'s0, s0';descr:''),
(code:$BE805F00;code3:       $0;enc:SOP1;name:'SOP1_invalid_95';pfmt:'s0, s0';descr:''),
(code:$BE806000;code3:       $0;enc:SOP1;name:'SOP1_invalid_96';pfmt:'s0, s0';descr:''),
(code:$BE806100;code3:       $0;enc:SOP1;name:'SOP1_invalid_97';pfmt:'s0, s0';descr:''),
(code:$BE806200;code3:       $0;enc:SOP1;name:'SOP1_invalid_98';pfmt:'s0, s0';descr:''),
(code:$BE806300;code3:       $0;enc:SOP1;name:'SOP1_invalid_99';pfmt:'s0, s0';descr:''),
(code:$BE806400;code3:       $0;enc:SOP1;name:'SOP1_invalid_100';pfmt:'s0, s0';descr:''),
(code:$BE806500;code3:       $0;enc:SOP1;name:'SOP1_invalid_101';pfmt:'s0, s0';descr:''),
(code:$BE806600;code3:       $0;enc:SOP1;name:'SOP1_invalid_102';pfmt:'s0, s0';descr:''),
(code:$BE806700;code3:       $0;enc:SOP1;name:'SOP1_invalid_103';pfmt:'s0, s0';descr:''),
(code:$BE806800;code3:       $0;enc:SOP1;name:'SOP1_invalid_104';pfmt:'s0, s0';descr:''),
(code:$BE806900;code3:       $0;enc:SOP1;name:'SOP1_invalid_105';pfmt:'s0, s0';descr:''),
(code:$BE806A00;code3:       $0;enc:SOP1;name:'SOP1_invalid_106';pfmt:'s0, s0';descr:''),
(code:$BE806B00;code3:       $0;enc:SOP1;name:'SOP1_invalid_107';pfmt:'s0, s0';descr:''),
(code:$BE806C00;code3:       $0;enc:SOP1;name:'SOP1_invalid_108';pfmt:'s0, s0';descr:''),
(code:$BE806D00;code3:       $0;enc:SOP1;name:'SOP1_invalid_109';pfmt:'s0, s0';descr:''),
(code:$BE806E00;code3:       $0;enc:SOP1;name:'SOP1_invalid_110';pfmt:'s0, s0';descr:''),
(code:$BE806F00;code3:       $0;enc:SOP1;name:'SOP1_invalid_111';pfmt:'s0, s0';descr:''),
(code:$BE807000;code3:       $0;enc:SOP1;name:'SOP1_invalid_112';pfmt:'s0, s0';descr:''),
(code:$BE807100;code3:       $0;enc:SOP1;name:'SOP1_invalid_113';pfmt:'s0, s0';descr:''),
(code:$BE807200;code3:       $0;enc:SOP1;name:'SOP1_invalid_114';pfmt:'s0, s0';descr:''),
(code:$BE807300;code3:       $0;enc:SOP1;name:'SOP1_invalid_115';pfmt:'s0, s0';descr:''),
(code:$BE807400;code3:       $0;enc:SOP1;name:'SOP1_invalid_116';pfmt:'s0, s0';descr:''),
(code:$BE807500;code3:       $0;enc:SOP1;name:'SOP1_invalid_117';pfmt:'s0, s0';descr:''),
(code:$BE807600;code3:       $0;enc:SOP1;name:'SOP1_invalid_118';pfmt:'s0, s0';descr:''),
(code:$BE807700;code3:       $0;enc:SOP1;name:'SOP1_invalid_119';pfmt:'s0, s0';descr:''),
(code:$BE807800;code3:       $0;enc:SOP1;name:'SOP1_invalid_120';pfmt:'s0, s0';descr:''),
(code:$BE807900;code3:       $0;enc:SOP1;name:'SOP1_invalid_121';pfmt:'s0, s0';descr:''),
(code:$BE807A00;code3:       $0;enc:SOP1;name:'SOP1_invalid_122';pfmt:'s0, s0';descr:''),
(code:$BE807B00;code3:       $0;enc:SOP1;name:'SOP1_invalid_123';pfmt:'s0, s0';descr:''),
(code:$BE807C00;code3:       $0;enc:SOP1;name:'SOP1_invalid_124';pfmt:'s0, s0';descr:''),
(code:$BE807D00;code3:       $0;enc:SOP1;name:'SOP1_invalid_125';pfmt:'s0, s0';descr:''),
(code:$BE807E00;code3:       $0;enc:SOP1;name:'SOP1_invalid_126';pfmt:'s0, s0';descr:''),
(code:$BE807F00;code3:       $0;enc:SOP1;name:'SOP1_invalid_127';pfmt:'s0, s0';descr:''),
(code:$BE808000;code3:       $0;enc:SOP1;name:'SOP1_invalid_128';pfmt:'s0, s0';descr:''),
(code:$BE808100;code3:       $0;enc:SOP1;name:'SOP1_invalid_129';pfmt:'s0, s0';descr:''),
(code:$BE808200;code3:       $0;enc:SOP1;name:'SOP1_invalid_130';pfmt:'s0, s0';descr:''),
(code:$BE808300;code3:       $0;enc:SOP1;name:'SOP1_invalid_131';pfmt:'s0, s0';descr:''),
(code:$BE808400;code3:       $0;enc:SOP1;name:'SOP1_invalid_132';pfmt:'s0, s0';descr:''),
(code:$BE808500;code3:       $0;enc:SOP1;name:'SOP1_invalid_133';pfmt:'s0, s0';descr:''),
(code:$BE808600;code3:       $0;enc:SOP1;name:'SOP1_invalid_134';pfmt:'s0, s0';descr:''),
(code:$BE808700;code3:       $0;enc:SOP1;name:'SOP1_invalid_135';pfmt:'s0, s0';descr:''),
(code:$BE808800;code3:       $0;enc:SOP1;name:'SOP1_invalid_136';pfmt:'s0, s0';descr:''),
(code:$BE808900;code3:       $0;enc:SOP1;name:'SOP1_invalid_137';pfmt:'s0, s0';descr:''),
(code:$BE808A00;code3:       $0;enc:SOP1;name:'SOP1_invalid_138';pfmt:'s0, s0';descr:''),
(code:$BE808B00;code3:       $0;enc:SOP1;name:'SOP1_invalid_139';pfmt:'s0, s0';descr:''),
(code:$BE808C00;code3:       $0;enc:SOP1;name:'SOP1_invalid_140';pfmt:'s0, s0';descr:''),
(code:$BE808D00;code3:       $0;enc:SOP1;name:'SOP1_invalid_141';pfmt:'s0, s0';descr:''),
(code:$BE808E00;code3:       $0;enc:SOP1;name:'SOP1_invalid_142';pfmt:'s0, s0';descr:''),
(code:$BE808F00;code3:       $0;enc:SOP1;name:'SOP1_invalid_143';pfmt:'s0, s0';descr:''),
(code:$BE809000;code3:       $0;enc:SOP1;name:'SOP1_invalid_144';pfmt:'s0, s0';descr:''),
(code:$BE809100;code3:       $0;enc:SOP1;name:'SOP1_invalid_145';pfmt:'s0, s0';descr:''),
(code:$BE809200;code3:       $0;enc:SOP1;name:'SOP1_invalid_146';pfmt:'s0, s0';descr:''),
(code:$BE809300;code3:       $0;enc:SOP1;name:'SOP1_invalid_147';pfmt:'s0, s0';descr:''),
(code:$BE809400;code3:       $0;enc:SOP1;name:'SOP1_invalid_148';pfmt:'s0, s0';descr:''),
(code:$BE809500;code3:       $0;enc:SOP1;name:'SOP1_invalid_149';pfmt:'s0, s0';descr:''),
(code:$BE809600;code3:       $0;enc:SOP1;name:'SOP1_invalid_150';pfmt:'s0, s0';descr:''),
(code:$BE809700;code3:       $0;enc:SOP1;name:'SOP1_invalid_151';pfmt:'s0, s0';descr:''),
(code:$BE809800;code3:       $0;enc:SOP1;name:'SOP1_invalid_152';pfmt:'s0, s0';descr:''),
(code:$BE809900;code3:       $0;enc:SOP1;name:'SOP1_invalid_153';pfmt:'s0, s0';descr:''),
(code:$BE809A00;code3:       $0;enc:SOP1;name:'SOP1_invalid_154';pfmt:'s0, s0';descr:''),
(code:$BE809B00;code3:       $0;enc:SOP1;name:'SOP1_invalid_155';pfmt:'s0, s0';descr:''),
(code:$BE809C00;code3:       $0;enc:SOP1;name:'SOP1_invalid_156';pfmt:'s0, s0';descr:''),
(code:$BE809D00;code3:       $0;enc:SOP1;name:'SOP1_invalid_157';pfmt:'s0, s0';descr:''),
(code:$BE809E00;code3:       $0;enc:SOP1;name:'SOP1_invalid_158';pfmt:'s0, s0';descr:''),
(code:$BE809F00;code3:       $0;enc:SOP1;name:'SOP1_invalid_159';pfmt:'s0, s0';descr:''),
(code:$BE80A000;code3:       $0;enc:SOP1;name:'SOP1_invalid_160';pfmt:'s0, s0';descr:''),
(code:$BE80A100;code3:       $0;enc:SOP1;name:'SOP1_invalid_161';pfmt:'s0, s0';descr:''),
(code:$BE80A200;code3:       $0;enc:SOP1;name:'SOP1_invalid_162';pfmt:'s0, s0';descr:''),
(code:$BE80A300;code3:       $0;enc:SOP1;name:'SOP1_invalid_163';pfmt:'s0, s0';descr:''),
(code:$BE80A400;code3:       $0;enc:SOP1;name:'SOP1_invalid_164';pfmt:'s0, s0';descr:''),
(code:$BE80A500;code3:       $0;enc:SOP1;name:'SOP1_invalid_165';pfmt:'s0, s0';descr:''),
(code:$BE80A600;code3:       $0;enc:SOP1;name:'SOP1_invalid_166';pfmt:'s0, s0';descr:''),
(code:$BE80A700;code3:       $0;enc:SOP1;name:'SOP1_invalid_167';pfmt:'s0, s0';descr:''),
(code:$BE80A800;code3:       $0;enc:SOP1;name:'SOP1_invalid_168';pfmt:'s0, s0';descr:''),
(code:$BE80A900;code3:       $0;enc:SOP1;name:'SOP1_invalid_169';pfmt:'s0, s0';descr:''),
(code:$BE80AA00;code3:       $0;enc:SOP1;name:'SOP1_invalid_170';pfmt:'s0, s0';descr:''),
(code:$BE80AB00;code3:       $0;enc:SOP1;name:'SOP1_invalid_171';pfmt:'s0, s0';descr:''),
(code:$BE80AC00;code3:       $0;enc:SOP1;name:'SOP1_invalid_172';pfmt:'s0, s0';descr:''),
(code:$BE80AD00;code3:       $0;enc:SOP1;name:'SOP1_invalid_173';pfmt:'s0, s0';descr:''),
(code:$BE80AE00;code3:       $0;enc:SOP1;name:'SOP1_invalid_174';pfmt:'s0, s0';descr:''),
(code:$BE80AF00;code3:       $0;enc:SOP1;name:'SOP1_invalid_175';pfmt:'s0, s0';descr:''),
(code:$BE80B000;code3:       $0;enc:SOP1;name:'SOP1_invalid_176';pfmt:'s0, s0';descr:''),
(code:$BE80B100;code3:       $0;enc:SOP1;name:'SOP1_invalid_177';pfmt:'s0, s0';descr:''),
(code:$BE80B200;code3:       $0;enc:SOP1;name:'SOP1_invalid_178';pfmt:'s0, s0';descr:''),
(code:$BE80B300;code3:       $0;enc:SOP1;name:'SOP1_invalid_179';pfmt:'s0, s0';descr:''),
(code:$BE80B400;code3:       $0;enc:SOP1;name:'SOP1_invalid_180';pfmt:'s0, s0';descr:''),
(code:$BE80B500;code3:       $0;enc:SOP1;name:'SOP1_invalid_181';pfmt:'s0, s0';descr:''),
(code:$BE80B600;code3:       $0;enc:SOP1;name:'SOP1_invalid_182';pfmt:'s0, s0';descr:''),
(code:$BE80B700;code3:       $0;enc:SOP1;name:'SOP1_invalid_183';pfmt:'s0, s0';descr:''),
(code:$BE80B800;code3:       $0;enc:SOP1;name:'SOP1_invalid_184';pfmt:'s0, s0';descr:''),
(code:$BE80B900;code3:       $0;enc:SOP1;name:'SOP1_invalid_185';pfmt:'s0, s0';descr:''),
(code:$BE80BA00;code3:       $0;enc:SOP1;name:'SOP1_invalid_186';pfmt:'s0, s0';descr:''),
(code:$BE80BB00;code3:       $0;enc:SOP1;name:'SOP1_invalid_187';pfmt:'s0, s0';descr:''),
(code:$BE80BC00;code3:       $0;enc:SOP1;name:'SOP1_invalid_188';pfmt:'s0, s0';descr:''),
(code:$BE80BD00;code3:       $0;enc:SOP1;name:'SOP1_invalid_189';pfmt:'s0, s0';descr:''),
(code:$BE80BE00;code3:       $0;enc:SOP1;name:'SOP1_invalid_190';pfmt:'s0, s0';descr:''),
(code:$BE80BF00;code3:       $0;enc:SOP1;name:'SOP1_invalid_191';pfmt:'s0, s0';descr:''),
(code:$BE80C000;code3:       $0;enc:SOP1;name:'SOP1_invalid_192';pfmt:'s0, s0';descr:''),
(code:$BE80C100;code3:       $0;enc:SOP1;name:'SOP1_invalid_193';pfmt:'s0, s0';descr:''),
(code:$BE80C200;code3:       $0;enc:SOP1;name:'SOP1_invalid_194';pfmt:'s0, s0';descr:''),
(code:$BE80C300;code3:       $0;enc:SOP1;name:'SOP1_invalid_195';pfmt:'s0, s0';descr:''),
(code:$BE80C400;code3:       $0;enc:SOP1;name:'SOP1_invalid_196';pfmt:'s0, s0';descr:''),
(code:$BE80C500;code3:       $0;enc:SOP1;name:'SOP1_invalid_197';pfmt:'s0, s0';descr:''),
(code:$BE80C600;code3:       $0;enc:SOP1;name:'SOP1_invalid_198';pfmt:'s0, s0';descr:''),
(code:$BE80C700;code3:       $0;enc:SOP1;name:'SOP1_invalid_199';pfmt:'s0, s0';descr:''),
(code:$BE80C800;code3:       $0;enc:SOP1;name:'SOP1_invalid_200';pfmt:'s0, s0';descr:''),
(code:$BE80C900;code3:       $0;enc:SOP1;name:'SOP1_invalid_201';pfmt:'s0, s0';descr:''),
(code:$BE80CA00;code3:       $0;enc:SOP1;name:'SOP1_invalid_202';pfmt:'s0, s0';descr:''),
(code:$BE80CB00;code3:       $0;enc:SOP1;name:'SOP1_invalid_203';pfmt:'s0, s0';descr:''),
(code:$BE80CC00;code3:       $0;enc:SOP1;name:'SOP1_invalid_204';pfmt:'s0, s0';descr:''),
(code:$BE80CD00;code3:       $0;enc:SOP1;name:'SOP1_invalid_205';pfmt:'s0, s0';descr:''),
(code:$BE80CE00;code3:       $0;enc:SOP1;name:'SOP1_invalid_206';pfmt:'s0, s0';descr:''),
(code:$BE80CF00;code3:       $0;enc:SOP1;name:'SOP1_invalid_207';pfmt:'s0, s0';descr:''),
(code:$BE80D000;code3:       $0;enc:SOP1;name:'SOP1_invalid_208';pfmt:'s0, s0';descr:''),
(code:$BE80D100;code3:       $0;enc:SOP1;name:'SOP1_invalid_209';pfmt:'s0, s0';descr:''),
(code:$BE80D200;code3:       $0;enc:SOP1;name:'SOP1_invalid_210';pfmt:'s0, s0';descr:''),
(code:$BE80D300;code3:       $0;enc:SOP1;name:'SOP1_invalid_211';pfmt:'s0, s0';descr:''),
(code:$BE80D400;code3:       $0;enc:SOP1;name:'SOP1_invalid_212';pfmt:'s0, s0';descr:''),
(code:$BE80D500;code3:       $0;enc:SOP1;name:'SOP1_invalid_213';pfmt:'s0, s0';descr:''),
(code:$BE80D600;code3:       $0;enc:SOP1;name:'SOP1_invalid_214';pfmt:'s0, s0';descr:''),
(code:$BE80D700;code3:       $0;enc:SOP1;name:'SOP1_invalid_215';pfmt:'s0, s0';descr:''),
(code:$BE80D800;code3:       $0;enc:SOP1;name:'SOP1_invalid_216';pfmt:'s0, s0';descr:''),
(code:$BE80D900;code3:       $0;enc:SOP1;name:'SOP1_invalid_217';pfmt:'s0, s0';descr:''),
(code:$BE80DA00;code3:       $0;enc:SOP1;name:'SOP1_invalid_218';pfmt:'s0, s0';descr:''),
(code:$BE80DB00;code3:       $0;enc:SOP1;name:'SOP1_invalid_219';pfmt:'s0, s0';descr:''),
(code:$BE80DC00;code3:       $0;enc:SOP1;name:'SOP1_invalid_220';pfmt:'s0, s0';descr:''),
(code:$BE80DD00;code3:       $0;enc:SOP1;name:'SOP1_invalid_221';pfmt:'s0, s0';descr:''),
(code:$BE80DE00;code3:       $0;enc:SOP1;name:'SOP1_invalid_222';pfmt:'s0, s0';descr:''),
(code:$BE80DF00;code3:       $0;enc:SOP1;name:'SOP1_invalid_223';pfmt:'s0, s0';descr:''),
(code:$BE80E000;code3:       $0;enc:SOP1;name:'SOP1_invalid_224';pfmt:'s0, s0';descr:''),
(code:$BE80E100;code3:       $0;enc:SOP1;name:'SOP1_invalid_225';pfmt:'s0, s0';descr:''),
(code:$BE80E200;code3:       $0;enc:SOP1;name:'SOP1_invalid_226';pfmt:'s0, s0';descr:''),
(code:$BE80E300;code3:       $0;enc:SOP1;name:'SOP1_invalid_227';pfmt:'s0, s0';descr:''),
(code:$BE80E400;code3:       $0;enc:SOP1;name:'SOP1_invalid_228';pfmt:'s0, s0';descr:''),
(code:$BE80E500;code3:       $0;enc:SOP1;name:'SOP1_invalid_229';pfmt:'s0, s0';descr:''),
(code:$BE80E600;code3:       $0;enc:SOP1;name:'SOP1_invalid_230';pfmt:'s0, s0';descr:''),
(code:$BE80E700;code3:       $0;enc:SOP1;name:'SOP1_invalid_231';pfmt:'s0, s0';descr:''),
(code:$BE80E800;code3:       $0;enc:SOP1;name:'SOP1_invalid_232';pfmt:'s0, s0';descr:''),
(code:$BE80E900;code3:       $0;enc:SOP1;name:'SOP1_invalid_233';pfmt:'s0, s0';descr:''),
(code:$BE80EA00;code3:       $0;enc:SOP1;name:'SOP1_invalid_234';pfmt:'s0, s0';descr:''),
(code:$BE80EB00;code3:       $0;enc:SOP1;name:'SOP1_invalid_235';pfmt:'s0, s0';descr:''),
(code:$BE80EC00;code3:       $0;enc:SOP1;name:'SOP1_invalid_236';pfmt:'s0, s0';descr:''),
(code:$BE80ED00;code3:       $0;enc:SOP1;name:'SOP1_invalid_237';pfmt:'s0, s0';descr:''),
(code:$BE80EE00;code3:       $0;enc:SOP1;name:'SOP1_invalid_238';pfmt:'s0, s0';descr:''),
(code:$BE80EF00;code3:       $0;enc:SOP1;name:'SOP1_invalid_239';pfmt:'s0, s0';descr:''),
(code:$BE80F000;code3:       $0;enc:SOP1;name:'SOP1_invalid_240';pfmt:'s0, s0';descr:''),
(code:$BE80F100;code3:       $0;enc:SOP1;name:'SOP1_invalid_241';pfmt:'s0, s0';descr:''),
(code:$BE80F200;code3:       $0;enc:SOP1;name:'SOP1_invalid_242';pfmt:'s0, s0';descr:''),
(code:$BE80F300;code3:       $0;enc:SOP1;name:'SOP1_invalid_243';pfmt:'s0, s0';descr:''),
(code:$BE80F400;code3:       $0;enc:SOP1;name:'SOP1_invalid_244';pfmt:'s0, s0';descr:''),
(code:$BE80F500;code3:       $0;enc:SOP1;name:'SOP1_invalid_245';pfmt:'s0, s0';descr:''),
(code:$BE80F600;code3:       $0;enc:SOP1;name:'SOP1_invalid_246';pfmt:'s0, s0';descr:''),
(code:$BE80F700;code3:       $0;enc:SOP1;name:'SOP1_invalid_247';pfmt:'s0, s0';descr:''),
(code:$BE80F800;code3:       $0;enc:SOP1;name:'SOP1_invalid_248';pfmt:'s0, s0';descr:''),
(code:$BE80F900;code3:       $0;enc:SOP1;name:'SOP1_invalid_249';pfmt:'s0, s0';descr:''),
(code:$BE80FA00;code3:       $0;enc:SOP1;name:'SOP1_invalid_250';pfmt:'s0, s0';descr:''),
(code:$BE80FB00;code3:       $0;enc:SOP1;name:'SOP1_invalid_251';pfmt:'s0, s0';descr:''),
(code:$BE80FC00;code3:       $0;enc:SOP1;name:'SOP1_invalid_252';pfmt:'s0, s0';descr:''),
(code:$BE80FD00;code3:       $0;enc:SOP1;name:'SOP1_invalid_253';pfmt:'s0, s0';descr:''),
(code:$BE80FE00;code3:       $0;enc:SOP1;name:'SOP1_invalid_254';pfmt:'s0, s0';descr:''),
(code:$BE80FF00;code3:       $0;enc:SOP1;name:'SOP1_invalid_255';pfmt:'s0, s0';descr:''),
(code:$BF000000;code3:       $0;enc:SOPC;name:'s_cmp_eq_i32';pfmt:'s0, s0';descr:'SCC = (S0.i == S1.i)'),
(code:$BF010000;code3:       $0;enc:SOPC;name:'s_cmp_lg_i32';pfmt:'s0, s0';descr:'SCC = (S0.i != S1.i)'),
(code:$BF020000;code3:       $0;enc:SOPC;name:'s_cmp_gt_i32';pfmt:'s0, s0';descr:'SCC = (S0.i > S1.i)'),
(code:$BF030000;code3:       $0;enc:SOPC;name:'s_cmp_ge_i32';pfmt:'s0, s0';descr:'SCC = (S0.i >= S1.i)'),
(code:$BF040000;code3:       $0;enc:SOPC;name:'s_cmp_lt_i32';pfmt:'s0, s0';descr:'SCC = (S0.i < S1.i)'),
(code:$BF050000;code3:       $0;enc:SOPC;name:'s_cmp_le_i32';pfmt:'s0, s0';descr:'SCC = (S0.i <= S1.i)'),
(code:$BF060000;code3:       $0;enc:SOPC;name:'s_cmp_eq_u32';pfmt:'s0, s0';descr:'SCC = (S0.u == S1.u)'),
(code:$BF070000;code3:       $0;enc:SOPC;name:'s_cmp_lg_u32';pfmt:'s0, s0';descr:'SCC = (S0.u != S1.u)'),
(code:$BF080000;code3:       $0;enc:SOPC;name:'s_cmp_gt_u32';pfmt:'s0, s0';descr:'SCC = (S0.u > S1.u)'),
(code:$BF090000;code3:       $0;enc:SOPC;name:'s_cmp_ge_u32';pfmt:'s0, s0';descr:'SCC = (S0.u >= S1.u)'),
(code:$BF0A0000;code3:       $0;enc:SOPC;name:'s_cmp_lt_u32';pfmt:'s0, s0';descr:'SCC = (S0.u < S1.u)'),
(code:$BF0B0000;code3:       $0;enc:SOPC;name:'s_cmp_le_u32';pfmt:'s0, s0';descr:'SCC = (S0.u <= S1.u)'),
(code:$BF0C0000;code3:       $0;enc:SOPC;name:'s_bitcmp0_b32';pfmt:'s0, s0';descr:'SCC = (S0.u[S1.u[4:0]] == 0)'),
(code:$BF0D0000;code3:       $0;enc:SOPC;name:'s_bitcmp1_b32';pfmt:'s0, s0';descr:'SCC = (S0.u[S1.u[4:0]] == 1)'),
(code:$BF0E0000;code3:       $0;enc:SOPC;name:'s_bitcmp0_b64';pfmt:'s[0:1], s0';descr:'SCC = (S0.u[S1.u[5:0]] == 0)'),
(code:$BF0F0000;code3:       $0;enc:SOPC;name:'s_bitcmp1_b64';pfmt:'s[0:1], s0';descr:'SCC = (S0.u[S1.u[5:0]] == 1)'),
(code:$BF100000;code3:       $0;enc:SOPC;name:'s_setvskip';pfmt:'s0, s0';descr:'VSKIP = S0.u[S1.u[4:0]]'),
(code:$BF110000;code3:       $0;enc:SOPC;name:'SOPC_invalid_17';pfmt:'s0, s0';descr:''),
(code:$BF120000;code3:       $0;enc:SOPC;name:'SOPC_invalid_18';pfmt:'s0, s0';descr:''),
(code:$BF130000;code3:       $0;enc:SOPC;name:'SOPC_invalid_19';pfmt:'s0, s0';descr:''),
(code:$BF140000;code3:       $0;enc:SOPC;name:'SOPC_invalid_20';pfmt:'s0, s0';descr:''),
(code:$BF150000;code3:       $0;enc:SOPC;name:'SOPC_invalid_21';pfmt:'s0, s0';descr:''),
(code:$BF160000;code3:       $0;enc:SOPC;name:'SOPC_invalid_22';pfmt:'s0, s0';descr:''),
(code:$BF170000;code3:       $0;enc:SOPC;name:'SOPC_invalid_23';pfmt:'s0, s0';descr:''),
(code:$BF180000;code3:       $0;enc:SOPC;name:'SOPC_invalid_24';pfmt:'s0, s0';descr:''),
(code:$BF190000;code3:       $0;enc:SOPC;name:'SOPC_invalid_25';pfmt:'s0, s0';descr:''),
(code:$BF1A0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_26';pfmt:'s0, s0';descr:''),
(code:$BF1B0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_27';pfmt:'s0, s0';descr:''),
(code:$BF1C0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_28';pfmt:'s0, s0';descr:''),
(code:$BF1D0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_29';pfmt:'s0, s0';descr:''),
(code:$BF1E0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_30';pfmt:'s0, s0';descr:''),
(code:$BF1F0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_31';pfmt:'s0, s0';descr:''),
(code:$BF200000;code3:       $0;enc:SOPC;name:'SOPC_invalid_32';pfmt:'s0, s0';descr:''),
(code:$BF210000;code3:       $0;enc:SOPC;name:'SOPC_invalid_33';pfmt:'s0, s0';descr:''),
(code:$BF220000;code3:       $0;enc:SOPC;name:'SOPC_invalid_34';pfmt:'s0, s0';descr:''),
(code:$BF230000;code3:       $0;enc:SOPC;name:'SOPC_invalid_35';pfmt:'s0, s0';descr:''),
(code:$BF240000;code3:       $0;enc:SOPC;name:'SOPC_invalid_36';pfmt:'s0, s0';descr:''),
(code:$BF250000;code3:       $0;enc:SOPC;name:'SOPC_invalid_37';pfmt:'s0, s0';descr:''),
(code:$BF260000;code3:       $0;enc:SOPC;name:'SOPC_invalid_38';pfmt:'s0, s0';descr:''),
(code:$BF270000;code3:       $0;enc:SOPC;name:'SOPC_invalid_39';pfmt:'s0, s0';descr:''),
(code:$BF280000;code3:       $0;enc:SOPC;name:'SOPC_invalid_40';pfmt:'s0, s0';descr:''),
(code:$BF290000;code3:       $0;enc:SOPC;name:'SOPC_invalid_41';pfmt:'s0, s0';descr:''),
(code:$BF2A0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_42';pfmt:'s0, s0';descr:''),
(code:$BF2B0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_43';pfmt:'s0, s0';descr:''),
(code:$BF2C0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_44';pfmt:'s0, s0';descr:''),
(code:$BF2D0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_45';pfmt:'s0, s0';descr:''),
(code:$BF2E0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_46';pfmt:'s0, s0';descr:''),
(code:$BF2F0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_47';pfmt:'s0, s0';descr:''),
(code:$BF300000;code3:       $0;enc:SOPC;name:'SOPC_invalid_48';pfmt:'s0, s0';descr:''),
(code:$BF310000;code3:       $0;enc:SOPC;name:'SOPC_invalid_49';pfmt:'s0, s0';descr:''),
(code:$BF320000;code3:       $0;enc:SOPC;name:'SOPC_invalid_50';pfmt:'s0, s0';descr:''),
(code:$BF330000;code3:       $0;enc:SOPC;name:'SOPC_invalid_51';pfmt:'s0, s0';descr:''),
(code:$BF340000;code3:       $0;enc:SOPC;name:'SOPC_invalid_52';pfmt:'s0, s0';descr:''),
(code:$BF350000;code3:       $0;enc:SOPC;name:'SOPC_invalid_53';pfmt:'s0, s0';descr:''),
(code:$BF360000;code3:       $0;enc:SOPC;name:'SOPC_invalid_54';pfmt:'s0, s0';descr:''),
(code:$BF370000;code3:       $0;enc:SOPC;name:'SOPC_invalid_55';pfmt:'s0, s0';descr:''),
(code:$BF380000;code3:       $0;enc:SOPC;name:'SOPC_invalid_56';pfmt:'s0, s0';descr:''),
(code:$BF390000;code3:       $0;enc:SOPC;name:'SOPC_invalid_57';pfmt:'s0, s0';descr:''),
(code:$BF3A0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_58';pfmt:'s0, s0';descr:''),
(code:$BF3B0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_59';pfmt:'s0, s0';descr:''),
(code:$BF3C0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_60';pfmt:'s0, s0';descr:''),
(code:$BF3D0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_61';pfmt:'s0, s0';descr:''),
(code:$BF3E0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_62';pfmt:'s0, s0';descr:''),
(code:$BF3F0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_63';pfmt:'s0, s0';descr:''),
(code:$BF400000;code3:       $0;enc:SOPC;name:'SOPC_invalid_64';pfmt:'s0, s0';descr:''),
(code:$BF410000;code3:       $0;enc:SOPC;name:'SOPC_invalid_65';pfmt:'s0, s0';descr:''),
(code:$BF420000;code3:       $0;enc:SOPC;name:'SOPC_invalid_66';pfmt:'s0, s0';descr:''),
(code:$BF430000;code3:       $0;enc:SOPC;name:'SOPC_invalid_67';pfmt:'s0, s0';descr:''),
(code:$BF440000;code3:       $0;enc:SOPC;name:'SOPC_invalid_68';pfmt:'s0, s0';descr:''),
(code:$BF450000;code3:       $0;enc:SOPC;name:'SOPC_invalid_69';pfmt:'s0, s0';descr:''),
(code:$BF460000;code3:       $0;enc:SOPC;name:'SOPC_invalid_70';pfmt:'s0, s0';descr:''),
(code:$BF470000;code3:       $0;enc:SOPC;name:'SOPC_invalid_71';pfmt:'s0, s0';descr:''),
(code:$BF480000;code3:       $0;enc:SOPC;name:'SOPC_invalid_72';pfmt:'s0, s0';descr:''),
(code:$BF490000;code3:       $0;enc:SOPC;name:'SOPC_invalid_73';pfmt:'s0, s0';descr:''),
(code:$BF4A0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_74';pfmt:'s0, s0';descr:''),
(code:$BF4B0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_75';pfmt:'s0, s0';descr:''),
(code:$BF4C0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_76';pfmt:'s0, s0';descr:''),
(code:$BF4D0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_77';pfmt:'s0, s0';descr:''),
(code:$BF4E0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_78';pfmt:'s0, s0';descr:''),
(code:$BF4F0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_79';pfmt:'s0, s0';descr:''),
(code:$BF500000;code3:       $0;enc:SOPC;name:'SOPC_invalid_80';pfmt:'s0, s0';descr:''),
(code:$BF510000;code3:       $0;enc:SOPC;name:'SOPC_invalid_81';pfmt:'s0, s0';descr:''),
(code:$BF520000;code3:       $0;enc:SOPC;name:'SOPC_invalid_82';pfmt:'s0, s0';descr:''),
(code:$BF530000;code3:       $0;enc:SOPC;name:'SOPC_invalid_83';pfmt:'s0, s0';descr:''),
(code:$BF540000;code3:       $0;enc:SOPC;name:'SOPC_invalid_84';pfmt:'s0, s0';descr:''),
(code:$BF550000;code3:       $0;enc:SOPC;name:'SOPC_invalid_85';pfmt:'s0, s0';descr:''),
(code:$BF560000;code3:       $0;enc:SOPC;name:'SOPC_invalid_86';pfmt:'s0, s0';descr:''),
(code:$BF570000;code3:       $0;enc:SOPC;name:'SOPC_invalid_87';pfmt:'s0, s0';descr:''),
(code:$BF580000;code3:       $0;enc:SOPC;name:'SOPC_invalid_88';pfmt:'s0, s0';descr:''),
(code:$BF590000;code3:       $0;enc:SOPC;name:'SOPC_invalid_89';pfmt:'s0, s0';descr:''),
(code:$BF5A0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_90';pfmt:'s0, s0';descr:''),
(code:$BF5B0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_91';pfmt:'s0, s0';descr:''),
(code:$BF5C0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_92';pfmt:'s0, s0';descr:''),
(code:$BF5D0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_93';pfmt:'s0, s0';descr:''),
(code:$BF5E0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_94';pfmt:'s0, s0';descr:''),
(code:$BF5F0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_95';pfmt:'s0, s0';descr:''),
(code:$BF600000;code3:       $0;enc:SOPC;name:'SOPC_invalid_96';pfmt:'s0, s0';descr:''),
(code:$BF610000;code3:       $0;enc:SOPC;name:'SOPC_invalid_97';pfmt:'s0, s0';descr:''),
(code:$BF620000;code3:       $0;enc:SOPC;name:'SOPC_invalid_98';pfmt:'s0, s0';descr:''),
(code:$BF630000;code3:       $0;enc:SOPC;name:'SOPC_invalid_99';pfmt:'s0, s0';descr:''),
(code:$BF640000;code3:       $0;enc:SOPC;name:'SOPC_invalid_100';pfmt:'s0, s0';descr:''),
(code:$BF650000;code3:       $0;enc:SOPC;name:'SOPC_invalid_101';pfmt:'s0, s0';descr:''),
(code:$BF660000;code3:       $0;enc:SOPC;name:'SOPC_invalid_102';pfmt:'s0, s0';descr:''),
(code:$BF670000;code3:       $0;enc:SOPC;name:'SOPC_invalid_103';pfmt:'s0, s0';descr:''),
(code:$BF680000;code3:       $0;enc:SOPC;name:'SOPC_invalid_104';pfmt:'s0, s0';descr:''),
(code:$BF690000;code3:       $0;enc:SOPC;name:'SOPC_invalid_105';pfmt:'s0, s0';descr:''),
(code:$BF6A0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_106';pfmt:'s0, s0';descr:''),
(code:$BF6B0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_107';pfmt:'s0, s0';descr:''),
(code:$BF6C0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_108';pfmt:'s0, s0';descr:''),
(code:$BF6D0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_109';pfmt:'s0, s0';descr:''),
(code:$BF6E0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_110';pfmt:'s0, s0';descr:''),
(code:$BF6F0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_111';pfmt:'s0, s0';descr:''),
(code:$BF700000;code3:       $0;enc:SOPC;name:'SOPC_invalid_112';pfmt:'s0, s0';descr:''),
(code:$BF710000;code3:       $0;enc:SOPC;name:'SOPC_invalid_113';pfmt:'s0, s0';descr:''),
(code:$BF720000;code3:       $0;enc:SOPC;name:'SOPC_invalid_114';pfmt:'s0, s0';descr:''),
(code:$BF730000;code3:       $0;enc:SOPC;name:'SOPC_invalid_115';pfmt:'s0, s0';descr:''),
(code:$BF740000;code3:       $0;enc:SOPC;name:'SOPC_invalid_116';pfmt:'s0, s0';descr:''),
(code:$BF750000;code3:       $0;enc:SOPC;name:'SOPC_invalid_117';pfmt:'s0, s0';descr:''),
(code:$BF760000;code3:       $0;enc:SOPC;name:'SOPC_invalid_118';pfmt:'s0, s0';descr:''),
(code:$BF770000;code3:       $0;enc:SOPC;name:'SOPC_invalid_119';pfmt:'s0, s0';descr:''),
(code:$BF780000;code3:       $0;enc:SOPC;name:'SOPC_invalid_120';pfmt:'s0, s0';descr:''),
(code:$BF790000;code3:       $0;enc:SOPC;name:'SOPC_invalid_121';pfmt:'s0, s0';descr:''),
(code:$BF7A0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_122';pfmt:'s0, s0';descr:''),
(code:$BF7B0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_123';pfmt:'s0, s0';descr:''),
(code:$BF7C0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_124';pfmt:'s0, s0';descr:''),
(code:$BF7D0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_125';pfmt:'s0, s0';descr:''),
(code:$BF7E0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_126';pfmt:'s0, s0';descr:''),
(code:$BF7F0000;code3:       $0;enc:SOPC;name:'SOPC_invalid_127';pfmt:'s0, s0';descr:''),
(code:$BF800000;code3:       $0;enc:SOPP;name:'s_nop';pfmt:'0x0000';descr:'do nothing.  Repeat NOP 1..8 times based on SIMM16[2:0]. 0 = 1 time, 7 = 8 times.'),
(code:$BF810000;code3:       $0;enc:SOPP;name:'s_endpgm';pfmt:'';descr:'end of program; terminate wavefront'),
(code:$BF820000;code3:       $0;enc:SOPP;name:'s_branch';pfmt:'label';descr:'PC = PC + signext(SIMM16 * 4) + 4'),
(code:$BF830000;code3:       $0;enc:SOPP;name:'SOPP_invalid_3';pfmt:'0x0000';descr:''),
(code:$BF840000;code3:       $0;enc:SOPP;name:'s_cbranch_scc0';pfmt:'label';descr:'if(SCC == 0) then PC = PC + signext(SIMM16 * 4) + 4; else nop'),
(code:$BF850000;code3:       $0;enc:SOPP;name:'s_cbranch_scc1';pfmt:'label';descr:'if(SCC == 1) then PC = PC + signext(SIMM16 * 4) + 4; else nop'),
(code:$BF860000;code3:       $0;enc:SOPP;name:'s_cbranch_vccz';pfmt:'label';descr:'if(VCC == 0) then PC = PC + signext(SIMM16 * 4) + 4; else nop'),
(code:$BF870000;code3:       $0;enc:SOPP;name:'s_cbranch_vccnz';pfmt:'label';descr:'if(VCC != 0) then PC = PC + signext(SIMM16 * 4) + 4; else nop'),
(code:$BF880000;code3:       $0;enc:SOPP;name:'s_cbranch_execz';pfmt:'label';descr:'if(EXEC == 0) then PC = PC + signext(SIMM16 * 4) + 4; else nop'),
(code:$BF890000;code3:       $0;enc:SOPP;name:'s_cbranch_execnz';pfmt:'label';descr:'if(EXEC != 0) then PC = PC + signext(SIMM16 * 4) + 4; else nop'),
(code:$BF8A0000;code3:       $0;enc:SOPP;name:'s_barrier';pfmt:'';descr:'Sync waves within a threadgroup'),
(code:$BF8B0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_11';pfmt:'0x0000';descr:''),
(code:$BF8C0000;code3:       $0;enc:SOPP;name:'s_waitcnt';pfmt:'0x0000';descr:'Wait for count of outstanding lds, vector-memory and export/vmem-write-data to be at or below the specified levels. simm16[3:0] = vmcount, simm16[6:4] = export/mem-write-data count, simm16[12:8] = LGKM_cnt (scalar-mem/GDS/LDS count).'),
(code:$BF8D0000;code3:       $0;enc:SOPP;name:'s_sethalt';pfmt:'0x0000';descr:'set HALT bit to value of SIMM16[0]. 1=halt, 0=resume. Halt is ignored while priv=1'),
(code:$BF8E0000;code3:       $0;enc:SOPP;name:'s_sleep';pfmt:'0x0000';descr:'Cause a wave to sleep for approximately 64*SIMM16[2:0] clocks.'),
(code:$BF8F0000;code3:       $0;enc:SOPP;name:'s_setprio';pfmt:'0x0000';descr:'User settable wave priority. 0 = lowest, 3 = highest.'),
(code:$BF900000;code3:       $0;enc:SOPP;name:'s_sendmsg';pfmt:'sendmsg(0, GS_OP_NOP, 0)';descr:'Send a message. DETAILS TO FOLLOW.  (includes emit/cut).'),
(code:$BF910000;code3:       $0;enc:SOPP;name:'s_sendmsghalt';pfmt:'sendmsg(0, GS_OP_NOP, 0)';descr:'Send a message and then HALT. DETAILS TO FOLLOW.  (includes emit/cut).'),
(code:$BF920000;code3:       $0;enc:SOPP;name:'s_trap';pfmt:'0x0000';descr:'Enter the trap handler.  TrapID = SIMM16[7:0]. Wait for all instructions to complete, save {pc_rewind,trapID,pc} into ttmp0,1; load TBA into PC, set PRIV=1 and continue.'),
(code:$BF930000;code3:       $0;enc:SOPP;name:'s_icache_inv';pfmt:'';descr:'Invalidate entire L1 I cache'),
(code:$BF940000;code3:       $0;enc:SOPP;name:'s_incperflevel';pfmt:'';descr:'Increment performance counter specified in SIMM16[3:0] by 1'),
(code:$BF950000;code3:       $0;enc:SOPP;name:'s_decperflevel';pfmt:'';descr:'Decrement performance counter specified in SIMM16[3:0] by 1'),
(code:$BF960000;code3:       $0;enc:SOPP;name:'s_ttracedata';pfmt:'';descr:'Send M0 as user data to thread-trace'),
(code:$BF970000;code3:       $0;enc:SOPP;name:'SOPP_invalid_23';pfmt:'0x0000';descr:''),
(code:$BF980000;code3:       $0;enc:SOPP;name:'SOPP_invalid_24';pfmt:'0x0000';descr:''),
(code:$BF990000;code3:       $0;enc:SOPP;name:'SOPP_invalid_25';pfmt:'0x0000';descr:''),
(code:$BF9A0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_26';pfmt:'0x0000';descr:''),
(code:$BF9B0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_27';pfmt:'0x0000';descr:''),
(code:$BF9C0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_28';pfmt:'0x0000';descr:''),
(code:$BF9D0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_29';pfmt:'0x0000';descr:''),
(code:$BF9E0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_30';pfmt:'0x0000';descr:''),
(code:$BF9F0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_31';pfmt:'0x0000';descr:''),
(code:$BFA00000;code3:       $0;enc:SOPP;name:'SOPP_invalid_32';pfmt:'0x0000';descr:''),
(code:$BFA10000;code3:       $0;enc:SOPP;name:'SOPP_invalid_33';pfmt:'0x0000';descr:''),
(code:$BFA20000;code3:       $0;enc:SOPP;name:'SOPP_invalid_34';pfmt:'0x0000';descr:''),
(code:$BFA30000;code3:       $0;enc:SOPP;name:'SOPP_invalid_35';pfmt:'0x0000';descr:''),
(code:$BFA40000;code3:       $0;enc:SOPP;name:'SOPP_invalid_36';pfmt:'0x0000';descr:''),
(code:$BFA50000;code3:       $0;enc:SOPP;name:'SOPP_invalid_37';pfmt:'0x0000';descr:''),
(code:$BFA60000;code3:       $0;enc:SOPP;name:'SOPP_invalid_38';pfmt:'0x0000';descr:''),
(code:$BFA70000;code3:       $0;enc:SOPP;name:'SOPP_invalid_39';pfmt:'0x0000';descr:''),
(code:$BFA80000;code3:       $0;enc:SOPP;name:'SOPP_invalid_40';pfmt:'0x0000';descr:''),
(code:$BFA90000;code3:       $0;enc:SOPP;name:'SOPP_invalid_41';pfmt:'0x0000';descr:''),
(code:$BFAA0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_42';pfmt:'0x0000';descr:''),
(code:$BFAB0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_43';pfmt:'0x0000';descr:''),
(code:$BFAC0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_44';pfmt:'0x0000';descr:''),
(code:$BFAD0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_45';pfmt:'0x0000';descr:''),
(code:$BFAE0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_46';pfmt:'0x0000';descr:''),
(code:$BFAF0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_47';pfmt:'0x0000';descr:''),
(code:$BFB00000;code3:       $0;enc:SOPP;name:'SOPP_invalid_48';pfmt:'0x0000';descr:''),
(code:$BFB10000;code3:       $0;enc:SOPP;name:'SOPP_invalid_49';pfmt:'0x0000';descr:''),
(code:$BFB20000;code3:       $0;enc:SOPP;name:'SOPP_invalid_50';pfmt:'0x0000';descr:''),
(code:$BFB30000;code3:       $0;enc:SOPP;name:'SOPP_invalid_51';pfmt:'0x0000';descr:''),
(code:$BFB40000;code3:       $0;enc:SOPP;name:'SOPP_invalid_52';pfmt:'0x0000';descr:''),
(code:$BFB50000;code3:       $0;enc:SOPP;name:'SOPP_invalid_53';pfmt:'0x0000';descr:''),
(code:$BFB60000;code3:       $0;enc:SOPP;name:'SOPP_invalid_54';pfmt:'0x0000';descr:''),
(code:$BFB70000;code3:       $0;enc:SOPP;name:'SOPP_invalid_55';pfmt:'0x0000';descr:''),
(code:$BFB80000;code3:       $0;enc:SOPP;name:'SOPP_invalid_56';pfmt:'0x0000';descr:''),
(code:$BFB90000;code3:       $0;enc:SOPP;name:'SOPP_invalid_57';pfmt:'0x0000';descr:''),
(code:$BFBA0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_58';pfmt:'0x0000';descr:''),
(code:$BFBB0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_59';pfmt:'0x0000';descr:''),
(code:$BFBC0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_60';pfmt:'0x0000';descr:''),
(code:$BFBD0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_61';pfmt:'0x0000';descr:''),
(code:$BFBE0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_62';pfmt:'0x0000';descr:''),
(code:$BFBF0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_63';pfmt:'0x0000';descr:''),
(code:$BFC00000;code3:       $0;enc:SOPP;name:'SOPP_invalid_64';pfmt:'0x0000';descr:''),
(code:$BFC10000;code3:       $0;enc:SOPP;name:'SOPP_invalid_65';pfmt:'0x0000';descr:''),
(code:$BFC20000;code3:       $0;enc:SOPP;name:'SOPP_invalid_66';pfmt:'0x0000';descr:''),
(code:$BFC30000;code3:       $0;enc:SOPP;name:'SOPP_invalid_67';pfmt:'0x0000';descr:''),
(code:$BFC40000;code3:       $0;enc:SOPP;name:'SOPP_invalid_68';pfmt:'0x0000';descr:''),
(code:$BFC50000;code3:       $0;enc:SOPP;name:'SOPP_invalid_69';pfmt:'0x0000';descr:''),
(code:$BFC60000;code3:       $0;enc:SOPP;name:'SOPP_invalid_70';pfmt:'0x0000';descr:''),
(code:$BFC70000;code3:       $0;enc:SOPP;name:'SOPP_invalid_71';pfmt:'0x0000';descr:''),
(code:$BFC80000;code3:       $0;enc:SOPP;name:'SOPP_invalid_72';pfmt:'0x0000';descr:''),
(code:$BFC90000;code3:       $0;enc:SOPP;name:'SOPP_invalid_73';pfmt:'0x0000';descr:''),
(code:$BFCA0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_74';pfmt:'0x0000';descr:''),
(code:$BFCB0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_75';pfmt:'0x0000';descr:''),
(code:$BFCC0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_76';pfmt:'0x0000';descr:''),
(code:$BFCD0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_77';pfmt:'0x0000';descr:''),
(code:$BFCE0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_78';pfmt:'0x0000';descr:''),
(code:$BFCF0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_79';pfmt:'0x0000';descr:''),
(code:$BFD00000;code3:       $0;enc:SOPP;name:'SOPP_invalid_80';pfmt:'0x0000';descr:''),
(code:$BFD10000;code3:       $0;enc:SOPP;name:'SOPP_invalid_81';pfmt:'0x0000';descr:''),
(code:$BFD20000;code3:       $0;enc:SOPP;name:'SOPP_invalid_82';pfmt:'0x0000';descr:''),
(code:$BFD30000;code3:       $0;enc:SOPP;name:'SOPP_invalid_83';pfmt:'0x0000';descr:''),
(code:$BFD40000;code3:       $0;enc:SOPP;name:'SOPP_invalid_84';pfmt:'0x0000';descr:''),
(code:$BFD50000;code3:       $0;enc:SOPP;name:'SOPP_invalid_85';pfmt:'0x0000';descr:''),
(code:$BFD60000;code3:       $0;enc:SOPP;name:'SOPP_invalid_86';pfmt:'0x0000';descr:''),
(code:$BFD70000;code3:       $0;enc:SOPP;name:'SOPP_invalid_87';pfmt:'0x0000';descr:''),
(code:$BFD80000;code3:       $0;enc:SOPP;name:'SOPP_invalid_88';pfmt:'0x0000';descr:''),
(code:$BFD90000;code3:       $0;enc:SOPP;name:'SOPP_invalid_89';pfmt:'0x0000';descr:''),
(code:$BFDA0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_90';pfmt:'0x0000';descr:''),
(code:$BFDB0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_91';pfmt:'0x0000';descr:''),
(code:$BFDC0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_92';pfmt:'0x0000';descr:''),
(code:$BFDD0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_93';pfmt:'0x0000';descr:''),
(code:$BFDE0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_94';pfmt:'0x0000';descr:''),
(code:$BFDF0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_95';pfmt:'0x0000';descr:''),
(code:$BFE00000;code3:       $0;enc:SOPP;name:'SOPP_invalid_96';pfmt:'0x0000';descr:''),
(code:$BFE10000;code3:       $0;enc:SOPP;name:'SOPP_invalid_97';pfmt:'0x0000';descr:''),
(code:$BFE20000;code3:       $0;enc:SOPP;name:'SOPP_invalid_98';pfmt:'0x0000';descr:''),
(code:$BFE30000;code3:       $0;enc:SOPP;name:'SOPP_invalid_99';pfmt:'0x0000';descr:''),
(code:$BFE40000;code3:       $0;enc:SOPP;name:'SOPP_invalid_100';pfmt:'0x0000';descr:''),
(code:$BFE50000;code3:       $0;enc:SOPP;name:'SOPP_invalid_101';pfmt:'0x0000';descr:''),
(code:$BFE60000;code3:       $0;enc:SOPP;name:'SOPP_invalid_102';pfmt:'0x0000';descr:''),
(code:$BFE70000;code3:       $0;enc:SOPP;name:'SOPP_invalid_103';pfmt:'0x0000';descr:''),
(code:$BFE80000;code3:       $0;enc:SOPP;name:'SOPP_invalid_104';pfmt:'0x0000';descr:''),
(code:$BFE90000;code3:       $0;enc:SOPP;name:'SOPP_invalid_105';pfmt:'0x0000';descr:''),
(code:$BFEA0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_106';pfmt:'0x0000';descr:''),
(code:$BFEB0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_107';pfmt:'0x0000';descr:''),
(code:$BFEC0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_108';pfmt:'0x0000';descr:''),
(code:$BFED0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_109';pfmt:'0x0000';descr:''),
(code:$BFEE0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_110';pfmt:'0x0000';descr:''),
(code:$BFEF0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_111';pfmt:'0x0000';descr:''),
(code:$BFF00000;code3:       $0;enc:SOPP;name:'SOPP_invalid_112';pfmt:'0x0000';descr:''),
(code:$BFF10000;code3:       $0;enc:SOPP;name:'SOPP_invalid_113';pfmt:'0x0000';descr:''),
(code:$BFF20000;code3:       $0;enc:SOPP;name:'SOPP_invalid_114';pfmt:'0x0000';descr:''),
(code:$BFF30000;code3:       $0;enc:SOPP;name:'SOPP_invalid_115';pfmt:'0x0000';descr:''),
(code:$BFF40000;code3:       $0;enc:SOPP;name:'SOPP_invalid_116';pfmt:'0x0000';descr:''),
(code:$BFF50000;code3:       $0;enc:SOPP;name:'SOPP_invalid_117';pfmt:'0x0000';descr:''),
(code:$BFF60000;code3:       $0;enc:SOPP;name:'SOPP_invalid_118';pfmt:'0x0000';descr:''),
(code:$BFF70000;code3:       $0;enc:SOPP;name:'SOPP_invalid_119';pfmt:'0x0000';descr:''),
(code:$BFF80000;code3:       $0;enc:SOPP;name:'SOPP_invalid_120';pfmt:'0x0000';descr:''),
(code:$BFF90000;code3:       $0;enc:SOPP;name:'SOPP_invalid_121';pfmt:'0x0000';descr:''),
(code:$BFFA0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_122';pfmt:'0x0000';descr:''),
(code:$BFFB0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_123';pfmt:'0x0000';descr:''),
(code:$BFFC0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_124';pfmt:'0x0000';descr:''),
(code:$BFFD0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_125';pfmt:'0x0000';descr:''),
(code:$BFFE0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_126';pfmt:'0x0000';descr:''),
(code:$BFFF0000;code3:       $0;enc:SOPP;name:'SOPP_invalid_127';pfmt:'0x0000';descr:''),
(code:$C0000000;code3:       $0;enc:SMRD;name:'s_load_dword';pfmt:'s0, s[0:1], s0';descr:'Read from read-only constant memory'),
(code:$C0400000;code3:       $0;enc:SMRD;name:'s_load_dwordx2';pfmt:'s[0:1], s[0:1], s0';descr:''),
(code:$C0800000;code3:       $0;enc:SMRD;name:'s_load_dwordx4';pfmt:'s[0:3], s[0:1], s0';descr:''),
(code:$C0C00000;code3:       $0;enc:SMRD;name:'s_load_dwordx8';pfmt:'s[0:7], s[0:1], s0';descr:''),
(code:$C1000000;code3:       $0;enc:SMRD;name:'s_load_dwordx16';pfmt:'s[0:15], s[0:1], s0';descr:''),
(code:$C1400000;code3:       $0;enc:SMRD;name:'SMRD_invalid_5';pfmt:'s0, s[0:1], s0';descr:''),
(code:$C1800000;code3:       $0;enc:SMRD;name:'SMRD_invalid_6';pfmt:'s0, s[0:1], s0';descr:''),
(code:$C1C00000;code3:       $0;enc:SMRD;name:'SMRD_invalid_7';pfmt:'s0, s[0:1], s0';descr:''),
(code:$C2000000;code3:       $0;enc:SMRD;name:'s_buffer_load_dword';pfmt:'s0, s[0:3], s0';descr:'Use ofsByte or ofsDWord to specify offset units.'),
(code:$C2400000;code3:       $0;enc:SMRD;name:'s_buffer_load_dwordx2';pfmt:'s[0:1], s[0:3], s0';descr:'Use ofsByte or ofsDWord to specify offset units.'),
(code:$C2800000;code3:       $0;enc:SMRD;name:'s_buffer_load_dwordx4';pfmt:'s[0:3], s[0:3], s0';descr:'Use ofsByte or ofsDWord to specify offset units.'),
(code:$C2C00000;code3:       $0;enc:SMRD;name:'s_buffer_load_dwordx8';pfmt:'s[0:7], s[0:3], s0';descr:'Use ofsByte or ofsDWord to specify offset units.'),
(code:$C3000000;code3:       $0;enc:SMRD;name:'s_buffer_load_dwordx16';pfmt:'s[0:15], s[0:3], s0';descr:'Use ofsByte or ofsDWord to specify offset units.'),
(code:$C3400000;code3:       $0;enc:SMRD;name:'SMRD_invalid_13';pfmt:'s0, s[0:1], s0';descr:''),
(code:$C3800000;code3:       $0;enc:SMRD;name:'SMRD_invalid_14';pfmt:'s0, s[0:1], s0';descr:''),
(code:$C3C00000;code3:       $0;enc:SMRD;name:'SMRD_invalid_15';pfmt:'s0, s[0:1], s0';descr:''),
(code:$C4000000;code3:       $0;enc:SMRD;name:'SMRD_invalid_16';pfmt:'s0, s[0:1], s0';descr:''),
(code:$C4400000;code3:       $0;enc:SMRD;name:'SMRD_invalid_17';pfmt:'s0, s[0:1], s0';descr:''),
(code:$C4800000;code3:       $0;enc:SMRD;name:'SMRD_invalid_18';pfmt:'s0, s[0:1], s0';descr:''),
(code:$C4C00000;code3:       $0;enc:SMRD;name:'SMRD_invalid_19';pfmt:'s0, s[0:1], s0';descr:''),
(code:$C5000000;code3:       $0;enc:SMRD;name:'SMRD_invalid_20';pfmt:'s0, s[0:1], s0';descr:''),
(code:$C5400000;code3:       $0;enc:SMRD;name:'SMRD_invalid_21';pfmt:'s0, s[0:1], s0';descr:''),
(code:$C5800000;code3:       $0;enc:SMRD;name:'SMRD_invalid_22';pfmt:'s0, s[0:1], s0';descr:''),
(code:$C5C00000;code3:       $0;enc:SMRD;name:'SMRD_invalid_23';pfmt:'s0, s[0:1], s0';descr:''),
(code:$C6000000;code3:       $0;enc:SMRD;name:'SMRD_invalid_24';pfmt:'s0, s[0:1], s0';descr:''),
(code:$C6400000;code3:       $0;enc:SMRD;name:'SMRD_invalid_25';pfmt:'s0, s[0:1], s0';descr:''),
(code:$C6800000;code3:       $0;enc:SMRD;name:'SMRD_invalid_26';pfmt:'s0, s[0:1], s0';descr:''),
(code:$C6C00000;code3:       $0;enc:SMRD;name:'SMRD_invalid_27';pfmt:'s0, s[0:1], s0';descr:''),
(code:$C7000000;code3:       $0;enc:SMRD;name:'SMRD_invalid_28';pfmt:'s0, s[0:1], s0';descr:''),
(code:$C7400000;code3:       $0;enc:SMRD;name:'SMRD_invalid_29';pfmt:'s0, s[0:1], s0';descr:''),
(code:$C7800000;code3:       $0;enc:SMRD;name:'s_memtime';pfmt:'s[0:1]';descr:'Return current 64-bit timestamp'),
(code:$C7C00000;code3:       $0;enc:SMRD;name:'s_dcache_inv';pfmt:'';descr:'Invalidate entire L1 K cache'),
(code:$02000000;code3:       $0;enc:VOP2;name:'v_readlane_b32';pfmt:'s0, s0, s0';descr:'copy one VGPR value to one SGPR.  Dst = SGPR-dest, Src0 = Source Data (VGPR# or M0(lds-direct)), Src1 = Lane Select (SGPR or M0).  Ignores exec mask.'),
(code:$04000000;code3:       $0;enc:VOP2;name:'v_writelane_b32';pfmt:'v0, s0, s0';descr:'Write value into one VGPR one one lane.  Dst = VGPR-dest, Src0 = Source Data (sgpr, m0, exec or constants), Src1 = Lane Select (SGPR or M0).  Ignores exec mask. SQ translates to V_MOV_B32'),
(code:$06000000;code3:       $0;enc:VOP2;name:'v_add_f32';pfmt:'v0, s0, v0';descr:'D.f = S0.f + S1.f'),
(code:$08000000;code3:       $0;enc:VOP2;name:'v_sub_f32';pfmt:'v0, s0, v0';descr:'D.f = S0.f - S1.f. SQ translates to V_ADD'),
(code:$0A000000;code3:       $0;enc:VOP2;name:'v_subrev_f32';pfmt:'v0, s0, v0';descr:'D.f = S1.f - S0.f. SQ translates to V_ADD'),
(code:$0C000000;code3:       $0;enc:VOP2;name:'v_mac_legacy_f32';pfmt:'v0, s0, v0';descr:'D.f = S0.F * S1.f + D.f.  SQ translates to V_MAD_LEGACY_F32'),
(code:$0E000000;code3:       $0;enc:VOP2;name:'v_mul_legacy_f32';pfmt:'v0, s0, v0';descr:'D.f = S0.f * S1.f (DX9 rules, 0.0*x = 0.0)'),
(code:$10000000;code3:       $0;enc:VOP2;name:'v_mul_f32';pfmt:'v0, s0, v0';descr:'D.f = S0.f * S1.f'),
(code:$12000000;code3:       $0;enc:VOP2;name:'v_mul_i32_i24';pfmt:'v0, s0, v0';descr:'D.i = S0.i[23:0] * S1.i[23:0]'),
(code:$14000000;code3:       $0;enc:VOP2;name:'v_mul_hi_i32_i24';pfmt:'v0, s0, v0';descr:'D.i = (S0.i[23:0] * S1.i[23:0])>>32'),
(code:$16000000;code3:       $0;enc:VOP2;name:'v_mul_u32_u24';pfmt:'v0, s0, v0';descr:'D.u = S0.u[23:0] * S1.u[23:0]'),
(code:$18000000;code3:       $0;enc:VOP2;name:'v_mul_hi_u32_u24';pfmt:'v0, s0, v0';descr:'D.i = (S0.u[23:0] * S1.u[23:0])>>32'),
(code:$1A000000;code3:       $0;enc:VOP2;name:'v_min_legacy_f32';pfmt:'v0, s0, v0';descr:'D.f = min(S0.f, S1.f) (DX9 rules for NaN)'),
(code:$1C000000;code3:       $0;enc:VOP2;name:'v_max_legacy_f32';pfmt:'v0, s0, v0';descr:'D.f = max(S0.f, S1.f) (DX9 rules for NaN)'),
(code:$1E000000;code3:       $0;enc:VOP2;name:'v_min_f32';pfmt:'v0, s0, v0';descr:'D.f = min(S0.f, S1.f)'),
(code:$20000000;code3:       $0;enc:VOP2;name:'v_max_f32';pfmt:'v0, s0, v0';descr:'D.f = max(S0.f, S1.f)'),
(code:$22000000;code3:       $0;enc:VOP2;name:'v_min_i32';pfmt:'v0, s0, v0';descr:'D.i = min(S0.i, S1.i)'),
(code:$24000000;code3:       $0;enc:VOP2;name:'v_max_i32';pfmt:'v0, s0, v0';descr:'D.i = max(S0.i, S1.i)'),
(code:$26000000;code3:       $0;enc:VOP2;name:'v_min_u32';pfmt:'v0, s0, v0';descr:'D.u = min(S0.u, S1.u)'),
(code:$28000000;code3:       $0;enc:VOP2;name:'v_max_u32';pfmt:'v0, s0, v0';descr:'D.u = max(S0.u, S1.u)'),
(code:$2A000000;code3:       $0;enc:VOP2;name:'v_lshr_b32';pfmt:'v0, s0, v0';descr:'D.u = S0.u >> S1.u[4:0]'),
(code:$2C000000;code3:       $0;enc:VOP2;name:'v_lshrrev_b32';pfmt:'v0, s0, v0';descr:'D.u = S1.u >> S0.u[4:0]. SQ translates to V_LSHR_B32'),
(code:$2E000000;code3:       $0;enc:VOP2;name:'v_ashr_i32';pfmt:'v0, s0, v0';descr:'D.i = S0.i >> S1.i[4:0]'),
(code:$30000000;code3:       $0;enc:VOP2;name:'v_ashrrev_i32';pfmt:'v0, s0, v0';descr:'D.i = S1.i >> S0.i[4:0]. SQ translates to V_ASHR_I32'),
(code:$32000000;code3:       $0;enc:VOP2;name:'v_lshl_b32';pfmt:'v0, s0, v0';descr:'D.u = S0.u << S1.u[4:0]'),
(code:$34000000;code3:       $0;enc:VOP2;name:'v_lshlrev_b32';pfmt:'v0, s0, v0';descr:'D.u = S1.u << S0.u[4:0]. SQ translates to V_LSHL_B32'),
(code:$36000000;code3:       $0;enc:VOP2;name:'v_and_b32';pfmt:'v0, s0, v0';descr:'D.u = S0.u & S1.u'),
(code:$38000000;code3:       $0;enc:VOP2;name:'v_or_b32';pfmt:'v0, s0, v0';descr:'D.u = S0.u | S1.u'),
(code:$3A000000;code3:       $0;enc:VOP2;name:'v_xor_b32';pfmt:'v0, s0, v0';descr:'D.u = S0.u ^ S1.u'),
(code:$3C000000;code3:       $0;enc:VOP2;name:'v_bfm_b32';pfmt:'v0, s0, v0';descr:'D.u  = ((1<<S0.u[4:0])-1) << S1.u[4:0]; S0=bitfield_width, S1=bitfield_offset'),
(code:$3E000000;code3:       $0;enc:VOP2;name:'v_mac_f32';pfmt:'v0, s0, v0';descr:'D.f = S0.f * S1.f + D.f. SQ translates to V_MAD_F32'),
(code:$40000000;code3:       $0;enc:VOP2;name:'v_madmk_f32';pfmt:'v0, s0, 0x00000000, v0';descr:'D.f = S0.f * K + S1.f; K is a 32-bit inline constant. SQ translates to V_MAD_F32'),
(code:$42000000;code3:       $0;enc:VOP2;name:'v_madak_f32';pfmt:'v0, s0, v0, 0x00000000';descr:'D.f = S0.f * S1.f + K; K is a 32-bit inline constant. SQ translates to V_MAD_F32'),
(code:$44000000;code3:       $0;enc:VOP2;name:'v_bcnt_u32_b32';pfmt:'v0, s0, v0';descr:'D.u = countbits(S0.u) + S1.u; TEMP ???'),
(code:$46000000;code3:       $0;enc:VOP2;name:'v_mbcnt_lo_u32_b32';pfmt:'v0, s0, v0';descr:''),
(code:$48000000;code3:       $0;enc:VOP2;name:'v_mbcnt_hi_u32_b32';pfmt:'v0, s0, v0';descr:''),
(code:$4A000000;code3:       $0;enc:VOP2;name:'v_add_i32';pfmt:'v0, vcc, s0, v0';descr:'D.u = S0.u + S1.u; VCC=carry-out (VOP3:sgpr=carry-out)'),
(code:$4C000000;code3:       $0;enc:VOP2;name:'v_sub_i32';pfmt:'v0, vcc, s0, v0';descr:'D.u = S0.u - S1.u; VCC=carry-out (VOP3:sgpr=carry-out).'),
(code:$4E000000;code3:       $0;enc:VOP2;name:'v_subrev_i32';pfmt:'v0, vcc, s0, v0';descr:'D.u = S1.u - S0.u; VCC=carry-out (VOP3:sgpr=carry-out). SQ translates to V_SUB_I32'),
(code:$50000000;code3:       $0;enc:VOP2;name:'v_addc_u32';pfmt:'v0, vcc, s0, v0, vcc';descr:'D.u = S0.u + S1.u + VCC; VCC=carry-out (VOP3:sgpr=carry-out, S2.u=carry-in)'),
(code:$52000000;code3:       $0;enc:VOP2;name:'v_subb_u32';pfmt:'v0, vcc, s0, v0, vcc';descr:'D.u = S0.u - S1.u - VCC; VCC=carry-out (VOP3:sgpr=carry-out, S2.u=carry-in)'),
(code:$54000000;code3:       $0;enc:VOP2;name:'v_subbrev_u32';pfmt:'v0, vcc, s0, v0, vcc';descr:'D.u = S1.u - S0.u - VCC; VCC=carry-out (VOP3:sgpr=carry-out, S2.u=carry-in). SQ translates to V_SUBB_U32'),
(code:$56000000;code3:       $0;enc:VOP2;name:'v_ldexp_f32';pfmt:'v0, s0, v0';descr:'D.d = pow(S0.f, S1.i)'),
(code:$58000000;code3:       $0;enc:VOP2;name:'v_cvt_pkaccum_u8_f32';pfmt:'v0, s0, v0';descr:'f32->u8(s0.f), pack into byte(s1.u), of dst. SQ translates to V_CVT_PK_U8_F32'),
(code:$5A000000;code3:       $0;enc:VOP2;name:'v_cvt_pknorm_i16_f32';pfmt:'v0, s0, v0';descr:'D = {(snorm)S1.f, (snorm)S0.f}'),
(code:$5C000000;code3:       $0;enc:VOP2;name:'v_cvt_pknorm_u16_f32';pfmt:'v0, s0, v0';descr:'D = {(unorm)S1.f, (unorm)S0.f}'),
(code:$5E000000;code3:       $0;enc:VOP2;name:'v_cvt_pkrtz_f16_f32';pfmt:'v0, s0, v0';descr:'D = {flt32_to_flt16(S1.f),flt32_to_flt16(S0.f)}, with round-toward-zero.'),
(code:$60000000;code3:       $0;enc:VOP2;name:'v_cvt_pk_u16_u32';pfmt:'v0, s0, v0';descr:'D = {(u32->u16)S1.u, (u32->u16)S0.u}'),
(code:$62000000;code3:       $0;enc:VOP2;name:'v_cvt_pk_i16_i32';pfmt:'v0, s0, v0';descr:'D = {(i32->i16)S1.i, (i32->i16)S0.i}'),
(code:$64000000;code3:       $0;enc:VOP2;name:'VOP2_invalid_50';pfmt:'v0, s0, v0';descr:''),
(code:$66000000;code3:       $0;enc:VOP2;name:'VOP2_invalid_51';pfmt:'v0, s0, v0';descr:''),
(code:$68000000;code3:       $0;enc:VOP2;name:'VOP2_invalid_52';pfmt:'v0, s0, v0';descr:''),
(code:$6A000000;code3:       $0;enc:VOP2;name:'VOP2_invalid_53';pfmt:'v0, s0, v0';descr:''),
(code:$6C000000;code3:       $0;enc:VOP2;name:'VOP2_invalid_54';pfmt:'v0, s0, v0';descr:''),
(code:$6E000000;code3:       $0;enc:VOP2;name:'VOP2_invalid_55';pfmt:'v0, s0, v0';descr:''),
(code:$70000000;code3:       $0;enc:VOP2;name:'VOP2_invalid_56';pfmt:'v0, s0, v0';descr:''),
(code:$72000000;code3:       $0;enc:VOP2;name:'VOP2_invalid_57';pfmt:'v0, s0, v0';descr:''),
(code:$74000000;code3:       $0;enc:VOP2;name:'VOP2_invalid_58';pfmt:'v0, s0, v0';descr:''),
(code:$76000000;code3:       $0;enc:VOP2;name:'VOP2_invalid_59';pfmt:'v0, s0, v0';descr:''),
(code:$78000000;code3:       $0;enc:VOP2;name:'VOP2_invalid_60';pfmt:'v0, s0, v0';descr:''),
(code:$7A000000;code3:       $0;enc:VOP2;name:'VOP2_invalid_61';pfmt:'v0, s0, v0';descr:''),
(code:$7E000000;code3:       $0;enc:VOP1;name:'v_nop';pfmt:'';descr:'do nothing'),
(code:$7E000200;code3:       $0;enc:VOP1;name:'v_mov_b32';pfmt:'v0, s0';descr:''),
(code:$7E000400;code3:       $0;enc:VOP1;name:'v_readfirstlane_b32';pfmt:'s0, s0';descr:'copy one VGPR value to one SGPR.  Dst = SGPR-dest, Src0 = Source Data (VGPR# or M0(lds-direct)), Lane# = FindFirst1fromLSB(exec) (lane = 0 if exec is zero).  Ignores exec mask. SQ translates to V_READLANE_B32'),
(code:$7E000600;code3:       $0;enc:VOP1;name:'v_cvt_i32_f64';pfmt:'v[0:1], s[0:1]';descr:'D.i = (int)S0.d'),
(code:$7E000800;code3:       $0;enc:VOP1;name:'v_cvt_f64_i32';pfmt:'v[0:1], s0';descr:'D.f = (float)S0.i'),
(code:$7E000A00;code3:       $0;enc:VOP1;name:'v_cvt_f32_i32';pfmt:'v0, s0';descr:''),
(code:$7E000C00;code3:       $0;enc:VOP1;name:'v_cvt_f32_u32';pfmt:'v0, s0';descr:'D.f = (float)S0.u'),
(code:$7E000E00;code3:       $0;enc:VOP1;name:'v_cvt_u32_f32';pfmt:'v0, s0';descr:'D.u = (unsigned)S0.f'),
(code:$7E001000;code3:       $0;enc:VOP1;name:'v_cvt_i32_f32';pfmt:'v0, s0';descr:'D.i = (int)S0.f'),
(code:$7E001200;code3:       $0;enc:VOP1;name:'v_mov_fed_b32';pfmt:'v0, s0';descr:'D.u = S0.u, introduce edc double error upon write to dest vgpr without causing an exception'),
(code:$7E001400;code3:       $0;enc:VOP1;name:'v_cvt_f16_f32';pfmt:'v0, s0';descr:'D.f16 = flt32_to_flt16(S0.f)'),
(code:$7E001600;code3:       $0;enc:VOP1;name:'v_cvt_f32_f16';pfmt:'v0, s0';descr:'D.f = flt16_to_flt32(S0.f16)'),
(code:$7E001800;code3:       $0;enc:VOP1;name:'v_cvt_rpi_i32_f32';pfmt:'v0, s0';descr:'D.i = (int)floor(S0.f + 0.5)'),
(code:$7E001A00;code3:       $0;enc:VOP1;name:'v_cvt_flr_i32_f32';pfmt:'v0, s0';descr:'D.i = (int)floor(S0.f)'),
(code:$7E001C00;code3:       $0;enc:VOP1;name:'v_cvt_off_f32_i4';pfmt:'v0, s0';descr:'4-bit signed int to 32-bit float. For interpolation in shader.'),
(code:$7E001E00;code3:       $0;enc:VOP1;name:'v_cvt_f32_f64';pfmt:'v0, s[0:1]';descr:'D.f = (float)S0.d'),
(code:$7E002000;code3:       $0;enc:VOP1;name:'v_cvt_f64_f32';pfmt:'v[0:1], s0';descr:'D.d = (double)S0.f'),
(code:$7E002200;code3:       $0;enc:VOP1;name:'v_cvt_f32_ubyte0';pfmt:'v0, s0';descr:'D.f = UINT2FLT(S0.u[7:0])'),
(code:$7E002400;code3:       $0;enc:VOP1;name:'v_cvt_f32_ubyte1';pfmt:'v0, s0';descr:'D.f = UINT2FLT(S0.u[15:8])'),
(code:$7E002600;code3:       $0;enc:VOP1;name:'v_cvt_f32_ubyte2';pfmt:'v0, s0';descr:'D.f = UINT2FLT(S0.u[23:16])'),
(code:$7E002800;code3:       $0;enc:VOP1;name:'v_cvt_f32_ubyte3';pfmt:'v0, s0';descr:'D.f = UINT2FLT(S0.u[31:24])'),
(code:$7E002A00;code3:       $0;enc:VOP1;name:'v_cvt_u32_f64';pfmt:'v[0:1], s[0:1]';descr:'D.u = (uint)S0.d'),
(code:$7E002C00;code3:       $0;enc:VOP1;name:'v_cvt_f64_u32';pfmt:'v[0:1], s[0:1]';descr:'D.d = (double)S0.u'),
(code:$7E002E00;code3:       $0;enc:VOP1;name:'VOP1_invalid_23';pfmt:'v0, s0';descr:''),
(code:$7E003000;code3:       $0;enc:VOP1;name:'VOP1_invalid_24';pfmt:'v0, s0';descr:''),
(code:$7E003200;code3:       $0;enc:VOP1;name:'VOP1_invalid_25';pfmt:'v0, s0';descr:''),
(code:$7E003400;code3:       $0;enc:VOP1;name:'VOP1_invalid_26';pfmt:'v0, s0';descr:''),
(code:$7E003600;code3:       $0;enc:VOP1;name:'VOP1_invalid_27';pfmt:'v0, s0';descr:''),
(code:$7E003800;code3:       $0;enc:VOP1;name:'VOP1_invalid_28';pfmt:'v0, s0';descr:''),
(code:$7E003A00;code3:       $0;enc:VOP1;name:'VOP1_invalid_29';pfmt:'v0, s0';descr:''),
(code:$7E003C00;code3:       $0;enc:VOP1;name:'VOP1_invalid_30';pfmt:'v0, s0';descr:''),
(code:$7E003E00;code3:       $0;enc:VOP1;name:'VOP1_invalid_31';pfmt:'v0, s0';descr:''),
(code:$7E004000;code3:       $0;enc:VOP1;name:'v_fract_f32';pfmt:'v0, s0';descr:'D.f = S0.f - floor(S0.f)'),
(code:$7E004200;code3:       $0;enc:VOP1;name:'v_trunc_f32';pfmt:'v0, s0';descr:'D.f = trunc(S0.f), return integer part of S0'),
(code:$7E004400;code3:       $0;enc:VOP1;name:'v_ceil_f32';pfmt:'v0, s0';descr:'D.f = ceil(S0.f).  Implemented as: D.f = trunc(S0.f); if (S0 > 0.0 && S0 != D), D += 1.0'),
(code:$7E004600;code3:       $0;enc:VOP1;name:'v_rndne_f32';pfmt:'v0, s0';descr:'D.f = round_nearest_even(S0.f)'),
(code:$7E004800;code3:       $0;enc:VOP1;name:'v_floor_f32';pfmt:'v0, s0';descr:'D.f = trunc(S0); if ((S0 < 0.0) && (S0 != D)) D += -1.0'),
(code:$7E004A00;code3:       $0;enc:VOP1;name:'v_exp_f32';pfmt:'v0, s0';descr:'D.f = pow(2.0, S0.f)'),
(code:$7E004C00;code3:       $0;enc:VOP1;name:'v_log_clamp_f32';pfmt:'v0, s0';descr:'D.f = log2(S0.f), clamp -infinity to -max_float'),
(code:$7E004E00;code3:       $0;enc:VOP1;name:'v_log_f32';pfmt:'v0, s0';descr:'D.f = log2(S0.f)'),
(code:$7E005000;code3:       $0;enc:VOP1;name:'v_rcp_clamp_f32';pfmt:'v0, s0';descr:'D.f = 1.0 / S0.f, result clamped to +-max_float'),
(code:$7E005200;code3:       $0;enc:VOP1;name:'v_rcp_legacy_f32';pfmt:'v0, s0';descr:'D.f = 1.0 / S0.f, +-infinity result clamped to +-0.0'),
(code:$7E005400;code3:       $0;enc:VOP1;name:'v_rcp_f32';pfmt:'v0, s0';descr:'D.f = 1.0 / S0.f'),
(code:$7E005600;code3:       $0;enc:VOP1;name:'v_rcp_iflag_f32';pfmt:'v0, s0';descr:'D.f = 1.0 / S0.f, only integer div_by_zero flag can be raised'),
(code:$7E005800;code3:       $0;enc:VOP1;name:'v_rsq_clamp_f32';pfmt:'v0, s0';descr:'D.f = 1.0 / sqrt(S0.f), result clamped to +-max_float'),
(code:$7E005A00;code3:       $0;enc:VOP1;name:'v_rsq_legacy_f32';pfmt:'v0, s0';descr:'D.f = 1.0 / sqrt(S0.f)'),
(code:$7E005C00;code3:       $0;enc:VOP1;name:'v_rsq_f32';pfmt:'v0, s0';descr:''),
(code:$7E005E00;code3:       $0;enc:VOP1;name:'v_rcp_f64';pfmt:'v[0:1], s[0:1]';descr:'D.d = 1.0 / (S0.d)'),
(code:$7E006000;code3:       $0;enc:VOP1;name:'v_rcp_clamp_f64';pfmt:'v[0:1], s[0:1]';descr:'D.f = 1.0 / (S0.f), result clamped to +-max_float'),
(code:$7E006200;code3:       $0;enc:VOP1;name:'v_rsq_f64';pfmt:'v[0:1], s[0:1]';descr:''),
(code:$7E006400;code3:       $0;enc:VOP1;name:'v_rsq_clamp_f64';pfmt:'v[0:1], s[0:1]';descr:'D.d = 1.0 / sqrt(S0.d), result clamped to +-max_float'),
(code:$7E006600;code3:       $0;enc:VOP1;name:'v_sqrt_f32';pfmt:'v0, s0';descr:'D.f = sqrt(S0.f)'),
(code:$7E006800;code3:       $0;enc:VOP1;name:'v_sqrt_f64';pfmt:'v[0:1], s[0:1]';descr:'D.d = sqrt(S0.d)'),
(code:$7E006A00;code3:       $0;enc:VOP1;name:'v_sin_f32';pfmt:'v0, s0';descr:'D.f = sin(S0.f)'),
(code:$7E006C00;code3:       $0;enc:VOP1;name:'v_cos_f32';pfmt:'v0, s0';descr:'D.f = cos(S0.f)'),
(code:$7E006E00;code3:       $0;enc:VOP1;name:'v_not_b32';pfmt:'v0, s0';descr:'D.u = ~S0.u'),
(code:$7E007000;code3:       $0;enc:VOP1;name:'v_bfrev_b32';pfmt:'v0, s0';descr:'D.u[31:0] = S0.u[0:31], bitfield reverse'),
(code:$7E007200;code3:       $0;enc:VOP1;name:'v_ffbh_u32';pfmt:'v0, s0';descr:'D.u = position of first 1 in S0 from MSB; D=0xffffffff if S0==0'),
(code:$7E007400;code3:       $0;enc:VOP1;name:'v_ffbl_b32';pfmt:'v0, s0';descr:'D.u = position of first 1 in S0 from LSB; D=0xffffffff if S0==0'),
(code:$7E007600;code3:       $0;enc:VOP1;name:'v_ffbh_i32';pfmt:'v0, s0';descr:'D.u = position of first bit different from sign bit in S0 from MSB; D=0xffffffff if S0==0 or 0xffffffff'),
(code:$7E007800;code3:       $0;enc:VOP1;name:'v_frexp_exp_i32_f64';pfmt:'v[0:1], s[0:1]';descr:'xxx'),
(code:$7E007A00;code3:       $0;enc:VOP1;name:'v_frexp_mant_f64';pfmt:'v[0:1], s[0:1]';descr:''),
(code:$7E007C00;code3:       $0;enc:VOP1;name:'v_fract_f64';pfmt:'v[0:1], s[0:1]';descr:''),
(code:$7E007E00;code3:       $0;enc:VOP1;name:'v_frexp_exp_i32_f32';pfmt:'v0, s0';descr:''),
(code:$7E008000;code3:       $0;enc:VOP1;name:'v_frexp_mant_f32';pfmt:'v0, s0';descr:''),
(code:$7E008200;code3:       $0;enc:VOP1;name:'v_clrexcp';pfmt:'';descr:'Clear wave''s exception state in SIMD(SP)'),
(code:$7E008400;code3:       $0;enc:VOP1;name:'v_movreld_b32';pfmt:'v0, s0';descr:'VGPR[D.u + M0.u] = VGPR[S0.u]  SQ translates to V_MOV_B32'),
(code:$7E008600;code3:       $0;enc:VOP1;name:'v_movrels_b32';pfmt:'v0, s0';descr:'VGPR[D.u] = VGPR[S0.u + M0.u]  SQ translates to V_MOV_B32'),
(code:$7E008800;code3:       $0;enc:VOP1;name:'v_movrelsd_b32';pfmt:'v0, s0';descr:'VGPR[D.u + M0.u] = VGPR[S0.u + M0.u]  SQ translates to V_MOV_B32'),
(code:$7E008A00;code3:       $0;enc:VOP1;name:'VOP1_invalid_69';pfmt:'v0, s0';descr:''),
(code:$7E008C00;code3:       $0;enc:VOP1;name:'VOP1_invalid_70';pfmt:'v0, s0';descr:''),
(code:$7E008E00;code3:       $0;enc:VOP1;name:'VOP1_invalid_71';pfmt:'v0, s0';descr:''),
(code:$7E009000;code3:       $0;enc:VOP1;name:'VOP1_invalid_72';pfmt:'v0, s0';descr:''),
(code:$7E009200;code3:       $0;enc:VOP1;name:'VOP1_invalid_73';pfmt:'v0, s0';descr:''),
(code:$7E009400;code3:       $0;enc:VOP1;name:'VOP1_invalid_74';pfmt:'v0, s0';descr:''),
(code:$7E009600;code3:       $0;enc:VOP1;name:'VOP1_invalid_75';pfmt:'v0, s0';descr:''),
(code:$7E009800;code3:       $0;enc:VOP1;name:'VOP1_invalid_76';pfmt:'v0, s0';descr:''),
(code:$7E009A00;code3:       $0;enc:VOP1;name:'VOP1_invalid_77';pfmt:'v0, s0';descr:''),
(code:$7E009C00;code3:       $0;enc:VOP1;name:'VOP1_invalid_78';pfmt:'v0, s0';descr:''),
(code:$7E009E00;code3:       $0;enc:VOP1;name:'VOP1_invalid_79';pfmt:'v0, s0';descr:''),
(code:$7E00A000;code3:       $0;enc:VOP1;name:'VOP1_invalid_80';pfmt:'v0, s0';descr:''),
(code:$7E00A200;code3:       $0;enc:VOP1;name:'VOP1_invalid_81';pfmt:'v0, s0';descr:''),
(code:$7E00A400;code3:       $0;enc:VOP1;name:'VOP1_invalid_82';pfmt:'v0, s0';descr:''),
(code:$7E00A600;code3:       $0;enc:VOP1;name:'VOP1_invalid_83';pfmt:'v0, s0';descr:''),
(code:$7E00A800;code3:       $0;enc:VOP1;name:'VOP1_invalid_84';pfmt:'v0, s0';descr:''),
(code:$7E00AA00;code3:       $0;enc:VOP1;name:'VOP1_invalid_85';pfmt:'v0, s0';descr:''),
(code:$7E00AC00;code3:       $0;enc:VOP1;name:'VOP1_invalid_86';pfmt:'v0, s0';descr:''),
(code:$7E00AE00;code3:       $0;enc:VOP1;name:'VOP1_invalid_87';pfmt:'v0, s0';descr:''),
(code:$7E00B000;code3:       $0;enc:VOP1;name:'VOP1_invalid_88';pfmt:'v0, s0';descr:''),
(code:$7E00B200;code3:       $0;enc:VOP1;name:'VOP1_invalid_89';pfmt:'v0, s0';descr:''),
(code:$7E00B400;code3:       $0;enc:VOP1;name:'VOP1_invalid_90';pfmt:'v0, s0';descr:''),
(code:$7E00B600;code3:       $0;enc:VOP1;name:'VOP1_invalid_91';pfmt:'v0, s0';descr:''),
(code:$7E00B800;code3:       $0;enc:VOP1;name:'VOP1_invalid_92';pfmt:'v0, s0';descr:''),
(code:$7E00BA00;code3:       $0;enc:VOP1;name:'VOP1_invalid_93';pfmt:'v0, s0';descr:''),
(code:$7E00BC00;code3:       $0;enc:VOP1;name:'VOP1_invalid_94';pfmt:'v0, s0';descr:''),
(code:$7E00BE00;code3:       $0;enc:VOP1;name:'VOP1_invalid_95';pfmt:'v0, s0';descr:''),
(code:$7E00C000;code3:       $0;enc:VOP1;name:'VOP1_invalid_96';pfmt:'v0, s0';descr:''),
(code:$7E00C200;code3:       $0;enc:VOP1;name:'VOP1_invalid_97';pfmt:'v0, s0';descr:''),
(code:$7E00C400;code3:       $0;enc:VOP1;name:'VOP1_invalid_98';pfmt:'v0, s0';descr:''),
(code:$7E00C600;code3:       $0;enc:VOP1;name:'VOP1_invalid_99';pfmt:'v0, s0';descr:''),
(code:$7E00C800;code3:       $0;enc:VOP1;name:'VOP1_invalid_100';pfmt:'v0, s0';descr:''),
(code:$7E00CA00;code3:       $0;enc:VOP1;name:'VOP1_invalid_101';pfmt:'v0, s0';descr:''),
(code:$7E00CC00;code3:       $0;enc:VOP1;name:'VOP1_invalid_102';pfmt:'v0, s0';descr:''),
(code:$7E00CE00;code3:       $0;enc:VOP1;name:'VOP1_invalid_103';pfmt:'v0, s0';descr:''),
(code:$7E00D000;code3:       $0;enc:VOP1;name:'VOP1_invalid_104';pfmt:'v0, s0';descr:''),
(code:$7E00D200;code3:       $0;enc:VOP1;name:'VOP1_invalid_105';pfmt:'v0, s0';descr:''),
(code:$7E00D400;code3:       $0;enc:VOP1;name:'VOP1_invalid_106';pfmt:'v0, s0';descr:''),
(code:$7E00D600;code3:       $0;enc:VOP1;name:'VOP1_invalid_107';pfmt:'v0, s0';descr:''),
(code:$7E00D800;code3:       $0;enc:VOP1;name:'VOP1_invalid_108';pfmt:'v0, s0';descr:''),
(code:$7E00DA00;code3:       $0;enc:VOP1;name:'VOP1_invalid_109';pfmt:'v0, s0';descr:''),
(code:$7E00DC00;code3:       $0;enc:VOP1;name:'VOP1_invalid_110';pfmt:'v0, s0';descr:''),
(code:$7E00DE00;code3:       $0;enc:VOP1;name:'VOP1_invalid_111';pfmt:'v0, s0';descr:''),
(code:$7E00E000;code3:       $0;enc:VOP1;name:'VOP1_invalid_112';pfmt:'v0, s0';descr:''),
(code:$7E00E200;code3:       $0;enc:VOP1;name:'VOP1_invalid_113';pfmt:'v0, s0';descr:''),
(code:$7E00E400;code3:       $0;enc:VOP1;name:'VOP1_invalid_114';pfmt:'v0, s0';descr:''),
(code:$7E00E600;code3:       $0;enc:VOP1;name:'VOP1_invalid_115';pfmt:'v0, s0';descr:''),
(code:$7E00E800;code3:       $0;enc:VOP1;name:'VOP1_invalid_116';pfmt:'v0, s0';descr:''),
(code:$7E00EA00;code3:       $0;enc:VOP1;name:'VOP1_invalid_117';pfmt:'v0, s0';descr:''),
(code:$7E00EC00;code3:       $0;enc:VOP1;name:'VOP1_invalid_118';pfmt:'v0, s0';descr:''),
(code:$7E00EE00;code3:       $0;enc:VOP1;name:'VOP1_invalid_119';pfmt:'v0, s0';descr:''),
(code:$7E00F000;code3:       $0;enc:VOP1;name:'VOP1_invalid_120';pfmt:'v0, s0';descr:''),
(code:$7E00F200;code3:       $0;enc:VOP1;name:'VOP1_invalid_121';pfmt:'v0, s0';descr:''),
(code:$7E00F400;code3:       $0;enc:VOP1;name:'VOP1_invalid_122';pfmt:'v0, s0';descr:''),
(code:$7E00F600;code3:       $0;enc:VOP1;name:'VOP1_invalid_123';pfmt:'v0, s0';descr:''),
(code:$7E00F800;code3:       $0;enc:VOP1;name:'VOP1_invalid_124';pfmt:'v0, s0';descr:''),
(code:$7E00FA00;code3:       $0;enc:VOP1;name:'VOP1_invalid_125';pfmt:'v0, s0';descr:''),
(code:$7E00FC00;code3:       $0;enc:VOP1;name:'VOP1_invalid_126';pfmt:'v0, s0';descr:''),
(code:$7E00FE00;code3:       $0;enc:VOP1;name:'VOP1_invalid_127';pfmt:'v0, s0';descr:''),
(code:$7E010000;code3:       $0;enc:VOP1;name:'VOP1_invalid_128';pfmt:'v0, s0';descr:''),
(code:$7E010200;code3:       $0;enc:VOP1;name:'VOP1_invalid_129';pfmt:'v0, s0';descr:''),
(code:$7E010400;code3:       $0;enc:VOP1;name:'VOP1_invalid_130';pfmt:'v0, s0';descr:''),
(code:$7E010600;code3:       $0;enc:VOP1;name:'VOP1_invalid_131';pfmt:'v0, s0';descr:''),
(code:$7E010800;code3:       $0;enc:VOP1;name:'VOP1_invalid_132';pfmt:'v0, s0';descr:''),
(code:$7E010A00;code3:       $0;enc:VOP1;name:'VOP1_invalid_133';pfmt:'v0, s0';descr:''),
(code:$7E010C00;code3:       $0;enc:VOP1;name:'VOP1_invalid_134';pfmt:'v0, s0';descr:''),
(code:$7E010E00;code3:       $0;enc:VOP1;name:'VOP1_invalid_135';pfmt:'v0, s0';descr:''),
(code:$7E011000;code3:       $0;enc:VOP1;name:'VOP1_invalid_136';pfmt:'v0, s0';descr:''),
(code:$7E011200;code3:       $0;enc:VOP1;name:'VOP1_invalid_137';pfmt:'v0, s0';descr:''),
(code:$7E011400;code3:       $0;enc:VOP1;name:'VOP1_invalid_138';pfmt:'v0, s0';descr:''),
(code:$7E011600;code3:       $0;enc:VOP1;name:'VOP1_invalid_139';pfmt:'v0, s0';descr:''),
(code:$7E011800;code3:       $0;enc:VOP1;name:'VOP1_invalid_140';pfmt:'v0, s0';descr:''),
(code:$7E011A00;code3:       $0;enc:VOP1;name:'VOP1_invalid_141';pfmt:'v0, s0';descr:''),
(code:$7E011C00;code3:       $0;enc:VOP1;name:'VOP1_invalid_142';pfmt:'v0, s0';descr:''),
(code:$7E011E00;code3:       $0;enc:VOP1;name:'VOP1_invalid_143';pfmt:'v0, s0';descr:''),
(code:$7E012000;code3:       $0;enc:VOP1;name:'VOP1_invalid_144';pfmt:'v0, s0';descr:''),
(code:$7E012200;code3:       $0;enc:VOP1;name:'VOP1_invalid_145';pfmt:'v0, s0';descr:''),
(code:$7E012400;code3:       $0;enc:VOP1;name:'VOP1_invalid_146';pfmt:'v0, s0';descr:''),
(code:$7E012600;code3:       $0;enc:VOP1;name:'VOP1_invalid_147';pfmt:'v0, s0';descr:''),
(code:$7E012800;code3:       $0;enc:VOP1;name:'VOP1_invalid_148';pfmt:'v0, s0';descr:''),
(code:$7E012A00;code3:       $0;enc:VOP1;name:'VOP1_invalid_149';pfmt:'v0, s0';descr:''),
(code:$7E012C00;code3:       $0;enc:VOP1;name:'VOP1_invalid_150';pfmt:'v0, s0';descr:''),
(code:$7E012E00;code3:       $0;enc:VOP1;name:'VOP1_invalid_151';pfmt:'v0, s0';descr:''),
(code:$7E013000;code3:       $0;enc:VOP1;name:'VOP1_invalid_152';pfmt:'v0, s0';descr:''),
(code:$7E013200;code3:       $0;enc:VOP1;name:'VOP1_invalid_153';pfmt:'v0, s0';descr:''),
(code:$7E013400;code3:       $0;enc:VOP1;name:'VOP1_invalid_154';pfmt:'v0, s0';descr:''),
(code:$7E013600;code3:       $0;enc:VOP1;name:'VOP1_invalid_155';pfmt:'v0, s0';descr:''),
(code:$7E013800;code3:       $0;enc:VOP1;name:'VOP1_invalid_156';pfmt:'v0, s0';descr:''),
(code:$7E013A00;code3:       $0;enc:VOP1;name:'VOP1_invalid_157';pfmt:'v0, s0';descr:''),
(code:$7E013C00;code3:       $0;enc:VOP1;name:'VOP1_invalid_158';pfmt:'v0, s0';descr:''),
(code:$7E013E00;code3:       $0;enc:VOP1;name:'VOP1_invalid_159';pfmt:'v0, s0';descr:''),
(code:$7E014000;code3:       $0;enc:VOP1;name:'VOP1_invalid_160';pfmt:'v0, s0';descr:''),
(code:$7E014200;code3:       $0;enc:VOP1;name:'VOP1_invalid_161';pfmt:'v0, s0';descr:''),
(code:$7E014400;code3:       $0;enc:VOP1;name:'VOP1_invalid_162';pfmt:'v0, s0';descr:''),
(code:$7E014600;code3:       $0;enc:VOP1;name:'VOP1_invalid_163';pfmt:'v0, s0';descr:''),
(code:$7E014800;code3:       $0;enc:VOP1;name:'VOP1_invalid_164';pfmt:'v0, s0';descr:''),
(code:$7E014A00;code3:       $0;enc:VOP1;name:'VOP1_invalid_165';pfmt:'v0, s0';descr:''),
(code:$7E014C00;code3:       $0;enc:VOP1;name:'VOP1_invalid_166';pfmt:'v0, s0';descr:''),
(code:$7E014E00;code3:       $0;enc:VOP1;name:'VOP1_invalid_167';pfmt:'v0, s0';descr:''),
(code:$7E015000;code3:       $0;enc:VOP1;name:'VOP1_invalid_168';pfmt:'v0, s0';descr:''),
(code:$7E015200;code3:       $0;enc:VOP1;name:'VOP1_invalid_169';pfmt:'v0, s0';descr:''),
(code:$7E015400;code3:       $0;enc:VOP1;name:'VOP1_invalid_170';pfmt:'v0, s0';descr:''),
(code:$7E015600;code3:       $0;enc:VOP1;name:'VOP1_invalid_171';pfmt:'v0, s0';descr:''),
(code:$7E015800;code3:       $0;enc:VOP1;name:'VOP1_invalid_172';pfmt:'v0, s0';descr:''),
(code:$7E015A00;code3:       $0;enc:VOP1;name:'VOP1_invalid_173';pfmt:'v0, s0';descr:''),
(code:$7E015C00;code3:       $0;enc:VOP1;name:'VOP1_invalid_174';pfmt:'v0, s0';descr:''),
(code:$7E015E00;code3:       $0;enc:VOP1;name:'VOP1_invalid_175';pfmt:'v0, s0';descr:''),
(code:$7E016000;code3:       $0;enc:VOP1;name:'VOP1_invalid_176';pfmt:'v0, s0';descr:''),
(code:$7E016200;code3:       $0;enc:VOP1;name:'VOP1_invalid_177';pfmt:'v0, s0';descr:''),
(code:$7E016400;code3:       $0;enc:VOP1;name:'VOP1_invalid_178';pfmt:'v0, s0';descr:''),
(code:$7E016600;code3:       $0;enc:VOP1;name:'VOP1_invalid_179';pfmt:'v0, s0';descr:''),
(code:$7E016800;code3:       $0;enc:VOP1;name:'VOP1_invalid_180';pfmt:'v0, s0';descr:''),
(code:$7E016A00;code3:       $0;enc:VOP1;name:'VOP1_invalid_181';pfmt:'v0, s0';descr:''),
(code:$7E016C00;code3:       $0;enc:VOP1;name:'VOP1_invalid_182';pfmt:'v0, s0';descr:''),
(code:$7E016E00;code3:       $0;enc:VOP1;name:'VOP1_invalid_183';pfmt:'v0, s0';descr:''),
(code:$7E017000;code3:       $0;enc:VOP1;name:'VOP1_invalid_184';pfmt:'v0, s0';descr:''),
(code:$7E017200;code3:       $0;enc:VOP1;name:'VOP1_invalid_185';pfmt:'v0, s0';descr:''),
(code:$7E017400;code3:       $0;enc:VOP1;name:'VOP1_invalid_186';pfmt:'v0, s0';descr:''),
(code:$7E017600;code3:       $0;enc:VOP1;name:'VOP1_invalid_187';pfmt:'v0, s0';descr:''),
(code:$7E017800;code3:       $0;enc:VOP1;name:'VOP1_invalid_188';pfmt:'v0, s0';descr:''),
(code:$7E017A00;code3:       $0;enc:VOP1;name:'VOP1_invalid_189';pfmt:'v0, s0';descr:''),
(code:$7E017C00;code3:       $0;enc:VOP1;name:'VOP1_invalid_190';pfmt:'v0, s0';descr:''),
(code:$7E017E00;code3:       $0;enc:VOP1;name:'VOP1_invalid_191';pfmt:'v0, s0';descr:''),
(code:$7E018000;code3:       $0;enc:VOP1;name:'VOP1_invalid_192';pfmt:'v0, s0';descr:''),
(code:$7E018200;code3:       $0;enc:VOP1;name:'VOP1_invalid_193';pfmt:'v0, s0';descr:''),
(code:$7E018400;code3:       $0;enc:VOP1;name:'VOP1_invalid_194';pfmt:'v0, s0';descr:''),
(code:$7E018600;code3:       $0;enc:VOP1;name:'VOP1_invalid_195';pfmt:'v0, s0';descr:''),
(code:$7E018800;code3:       $0;enc:VOP1;name:'VOP1_invalid_196';pfmt:'v0, s0';descr:''),
(code:$7E018A00;code3:       $0;enc:VOP1;name:'VOP1_invalid_197';pfmt:'v0, s0';descr:''),
(code:$7E018C00;code3:       $0;enc:VOP1;name:'VOP1_invalid_198';pfmt:'v0, s0';descr:''),
(code:$7E018E00;code3:       $0;enc:VOP1;name:'VOP1_invalid_199';pfmt:'v0, s0';descr:''),
(code:$7E019000;code3:       $0;enc:VOP1;name:'VOP1_invalid_200';pfmt:'v0, s0';descr:''),
(code:$7E019200;code3:       $0;enc:VOP1;name:'VOP1_invalid_201';pfmt:'v0, s0';descr:''),
(code:$7E019400;code3:       $0;enc:VOP1;name:'VOP1_invalid_202';pfmt:'v0, s0';descr:''),
(code:$7E019600;code3:       $0;enc:VOP1;name:'VOP1_invalid_203';pfmt:'v0, s0';descr:''),
(code:$7E019800;code3:       $0;enc:VOP1;name:'VOP1_invalid_204';pfmt:'v0, s0';descr:''),
(code:$7E019A00;code3:       $0;enc:VOP1;name:'VOP1_invalid_205';pfmt:'v0, s0';descr:''),
(code:$7E019C00;code3:       $0;enc:VOP1;name:'VOP1_invalid_206';pfmt:'v0, s0';descr:''),
(code:$7E019E00;code3:       $0;enc:VOP1;name:'VOP1_invalid_207';pfmt:'v0, s0';descr:''),
(code:$7E01A000;code3:       $0;enc:VOP1;name:'VOP1_invalid_208';pfmt:'v0, s0';descr:''),
(code:$7E01A200;code3:       $0;enc:VOP1;name:'VOP1_invalid_209';pfmt:'v0, s0';descr:''),
(code:$7E01A400;code3:       $0;enc:VOP1;name:'VOP1_invalid_210';pfmt:'v0, s0';descr:''),
(code:$7E01A600;code3:       $0;enc:VOP1;name:'VOP1_invalid_211';pfmt:'v0, s0';descr:''),
(code:$7E01A800;code3:       $0;enc:VOP1;name:'VOP1_invalid_212';pfmt:'v0, s0';descr:''),
(code:$7E01AA00;code3:       $0;enc:VOP1;name:'VOP1_invalid_213';pfmt:'v0, s0';descr:''),
(code:$7E01AC00;code3:       $0;enc:VOP1;name:'VOP1_invalid_214';pfmt:'v0, s0';descr:''),
(code:$7E01AE00;code3:       $0;enc:VOP1;name:'VOP1_invalid_215';pfmt:'v0, s0';descr:''),
(code:$7E01B000;code3:       $0;enc:VOP1;name:'VOP1_invalid_216';pfmt:'v0, s0';descr:''),
(code:$7E01B200;code3:       $0;enc:VOP1;name:'VOP1_invalid_217';pfmt:'v0, s0';descr:''),
(code:$7E01B400;code3:       $0;enc:VOP1;name:'VOP1_invalid_218';pfmt:'v0, s0';descr:''),
(code:$7E01B600;code3:       $0;enc:VOP1;name:'VOP1_invalid_219';pfmt:'v0, s0';descr:''),
(code:$7E01B800;code3:       $0;enc:VOP1;name:'VOP1_invalid_220';pfmt:'v0, s0';descr:''),
(code:$7E01BA00;code3:       $0;enc:VOP1;name:'VOP1_invalid_221';pfmt:'v0, s0';descr:''),
(code:$7E01BC00;code3:       $0;enc:VOP1;name:'VOP1_invalid_222';pfmt:'v0, s0';descr:''),
(code:$7E01BE00;code3:       $0;enc:VOP1;name:'VOP1_invalid_223';pfmt:'v0, s0';descr:''),
(code:$7E01C000;code3:       $0;enc:VOP1;name:'VOP1_invalid_224';pfmt:'v0, s0';descr:''),
(code:$7E01C200;code3:       $0;enc:VOP1;name:'VOP1_invalid_225';pfmt:'v0, s0';descr:''),
(code:$7E01C400;code3:       $0;enc:VOP1;name:'VOP1_invalid_226';pfmt:'v0, s0';descr:''),
(code:$7E01C600;code3:       $0;enc:VOP1;name:'VOP1_invalid_227';pfmt:'v0, s0';descr:''),
(code:$7E01C800;code3:       $0;enc:VOP1;name:'VOP1_invalid_228';pfmt:'v0, s0';descr:''),
(code:$7E01CA00;code3:       $0;enc:VOP1;name:'VOP1_invalid_229';pfmt:'v0, s0';descr:''),
(code:$7E01CC00;code3:       $0;enc:VOP1;name:'VOP1_invalid_230';pfmt:'v0, s0';descr:''),
(code:$7E01CE00;code3:       $0;enc:VOP1;name:'VOP1_invalid_231';pfmt:'v0, s0';descr:''),
(code:$7E01D000;code3:       $0;enc:VOP1;name:'VOP1_invalid_232';pfmt:'v0, s0';descr:''),
(code:$7E01D200;code3:       $0;enc:VOP1;name:'VOP1_invalid_233';pfmt:'v0, s0';descr:''),
(code:$7E01D400;code3:       $0;enc:VOP1;name:'VOP1_invalid_234';pfmt:'v0, s0';descr:''),
(code:$7E01D600;code3:       $0;enc:VOP1;name:'VOP1_invalid_235';pfmt:'v0, s0';descr:''),
(code:$7E01D800;code3:       $0;enc:VOP1;name:'VOP1_invalid_236';pfmt:'v0, s0';descr:''),
(code:$7E01DA00;code3:       $0;enc:VOP1;name:'VOP1_invalid_237';pfmt:'v0, s0';descr:''),
(code:$7E01DC00;code3:       $0;enc:VOP1;name:'VOP1_invalid_238';pfmt:'v0, s0';descr:''),
(code:$7E01DE00;code3:       $0;enc:VOP1;name:'VOP1_invalid_239';pfmt:'v0, s0';descr:''),
(code:$7E01E000;code3:       $0;enc:VOP1;name:'VOP1_invalid_240';pfmt:'v0, s0';descr:''),
(code:$7E01E200;code3:       $0;enc:VOP1;name:'VOP1_invalid_241';pfmt:'v0, s0';descr:''),
(code:$7E01E400;code3:       $0;enc:VOP1;name:'VOP1_invalid_242';pfmt:'v0, s0';descr:''),
(code:$7E01E600;code3:       $0;enc:VOP1;name:'VOP1_invalid_243';pfmt:'v0, s0';descr:''),
(code:$7E01E800;code3:       $0;enc:VOP1;name:'VOP1_invalid_244';pfmt:'v0, s0';descr:''),
(code:$7E01EA00;code3:       $0;enc:VOP1;name:'VOP1_invalid_245';pfmt:'v0, s0';descr:''),
(code:$7E01EC00;code3:       $0;enc:VOP1;name:'VOP1_invalid_246';pfmt:'v0, s0';descr:''),
(code:$7E01EE00;code3:       $0;enc:VOP1;name:'VOP1_invalid_247';pfmt:'v0, s0';descr:''),
(code:$7E01F000;code3:       $0;enc:VOP1;name:'VOP1_invalid_248';pfmt:'v0, s0';descr:''),
(code:$7E01F200;code3:       $0;enc:VOP1;name:'VOP1_invalid_249';pfmt:'v0, s0';descr:''),
(code:$7E01F400;code3:       $0;enc:VOP1;name:'VOP1_invalid_250';pfmt:'v0, s0';descr:''),
(code:$7E01F600;code3:       $0;enc:VOP1;name:'VOP1_invalid_251';pfmt:'v0, s0';descr:''),
(code:$7E01F800;code3:       $0;enc:VOP1;name:'VOP1_invalid_252';pfmt:'v0, s0';descr:''),
(code:$7E01FA00;code3:       $0;enc:VOP1;name:'VOP1_invalid_253';pfmt:'v0, s0';descr:''),
(code:$7E01FC00;code3:       $0;enc:VOP1;name:'VOP1_invalid_254';pfmt:'v0, s0';descr:''),
(code:$7E01FE00;code3:       $0;enc:VOP1;name:'VOP1_invalid_255';pfmt:'v0, s0';descr:''),
(code:$7C000000;code3:       $0;enc:VOPC;name:'v_cmp_f_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = 0, signal on sNaN input only; D = VCC in VOPC'),
(code:$7C020000;code3:       $0;enc:VOPC;name:'v_cmp_lt_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (S0 < S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C040000;code3:       $0;enc:VOPC;name:'v_cmp_eq_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (S0 == S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C060000;code3:       $0;enc:VOPC;name:'v_cmp_le_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (S0 <= S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C080000;code3:       $0;enc:VOPC;name:'v_cmp_gt_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (S0 > S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C0A0000;code3:       $0;enc:VOPC;name:'v_cmp_lg_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (S0 <> S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C0C0000;code3:       $0;enc:VOPC;name:'v_cmp_ge_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (S0 >= S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C0E0000;code3:       $0;enc:VOPC;name:'v_cmp_o_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (!isNan(S0) && !isNan(S1)), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C100000;code3:       $0;enc:VOPC;name:'v_cmp_u_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (isNan(S0)  ||  isNan(S1)), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C120000;code3:       $0;enc:VOPC;name:'v_cmp_nge_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = !(S0 >= S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C140000;code3:       $0;enc:VOPC;name:'v_cmp_nlg_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = !(S0 <> S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C160000;code3:       $0;enc:VOPC;name:'v_cmp_ngt_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = !(S0 > S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C180000;code3:       $0;enc:VOPC;name:'v_cmp_nle_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = !(S0 <= S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C1A0000;code3:       $0;enc:VOPC;name:'v_cmp_neq_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = !(S0 == S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C1C0000;code3:       $0;enc:VOPC;name:'v_cmp_nlt_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = !(S0 < S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C1E0000;code3:       $0;enc:VOPC;name:'v_cmp_tru_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = 1, signal on sNaN input only; D = VCC in VOPC'),
(code:$7C200000;code3:       $0;enc:VOPC;name:'v_cmpx_f_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = 0, signal on sNaN input only; D = VCC in VOPC'),
(code:$7C220000;code3:       $0;enc:VOPC;name:'v_cmpx_lt_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (S0 < S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C240000;code3:       $0;enc:VOPC;name:'v_cmpx_eq_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (S0 == S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C260000;code3:       $0;enc:VOPC;name:'v_cmpx_le_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (S0 <= S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C280000;code3:       $0;enc:VOPC;name:'v_cmpx_gt_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (S0 > S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C2A0000;code3:       $0;enc:VOPC;name:'v_cmpx_lg_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (S0 <> S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C2C0000;code3:       $0;enc:VOPC;name:'v_cmpx_ge_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (S0 >= S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C2E0000;code3:       $0;enc:VOPC;name:'v_cmpx_o_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (!isNan(S0) && !isNan(S1)), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C300000;code3:       $0;enc:VOPC;name:'v_cmpx_u_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (isNan(S0)  ||  isNan(S1)), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C320000;code3:       $0;enc:VOPC;name:'v_cmpx_nge_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = !(S0 >= S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C340000;code3:       $0;enc:VOPC;name:'v_cmpx_nlg_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = !(S0 <> S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C360000;code3:       $0;enc:VOPC;name:'v_cmpx_ngt_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = !(S0 > S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C380000;code3:       $0;enc:VOPC;name:'v_cmpx_nle_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = !(S0 <= S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C3A0000;code3:       $0;enc:VOPC;name:'v_cmpx_neq_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = !(S0 == S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C3C0000;code3:       $0;enc:VOPC;name:'v_cmpx_nlt_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = !(S0 < S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$7C3E0000;code3:       $0;enc:VOPC;name:'v_cmpx_tru_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = 1, signal on sNaN input only; D = VCC in VOPC'),
(code:$7C400000;code3:       $0;enc:VOPC;name:'v_cmp_f_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C420000;code3:       $0;enc:VOPC;name:'v_cmp_lt_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C440000;code3:       $0;enc:VOPC;name:'v_cmp_eq_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C460000;code3:       $0;enc:VOPC;name:'v_cmp_le_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C480000;code3:       $0;enc:VOPC;name:'v_cmp_gt_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C4A0000;code3:       $0;enc:VOPC;name:'v_cmp_lg_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C4C0000;code3:       $0;enc:VOPC;name:'v_cmp_ge_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C4E0000;code3:       $0;enc:VOPC;name:'v_cmp_o_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C500000;code3:       $0;enc:VOPC;name:'v_cmp_u_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C520000;code3:       $0;enc:VOPC;name:'v_cmp_nge_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C540000;code3:       $0;enc:VOPC;name:'v_cmp_nlg_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C560000;code3:       $0;enc:VOPC;name:'v_cmp_ngt_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C580000;code3:       $0;enc:VOPC;name:'v_cmp_nle_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C5A0000;code3:       $0;enc:VOPC;name:'v_cmp_neq_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C5C0000;code3:       $0;enc:VOPC;name:'v_cmp_nlt_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C5E0000;code3:       $0;enc:VOPC;name:'v_cmp_tru_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C600000;code3:       $0;enc:VOPC;name:'v_cmpx_f_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C620000;code3:       $0;enc:VOPC;name:'v_cmpx_lt_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C640000;code3:       $0;enc:VOPC;name:'v_cmpx_eq_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C660000;code3:       $0;enc:VOPC;name:'v_cmpx_le_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C680000;code3:       $0;enc:VOPC;name:'v_cmpx_gt_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C6A0000;code3:       $0;enc:VOPC;name:'v_cmpx_lg_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C6C0000;code3:       $0;enc:VOPC;name:'v_cmpx_ge_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C6E0000;code3:       $0;enc:VOPC;name:'v_cmpx_o_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C700000;code3:       $0;enc:VOPC;name:'v_cmpx_u_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C720000;code3:       $0;enc:VOPC;name:'v_cmpx_nge_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C740000;code3:       $0;enc:VOPC;name:'v_cmpx_nlg_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C760000;code3:       $0;enc:VOPC;name:'v_cmpx_ngt_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C780000;code3:       $0;enc:VOPC;name:'v_cmpx_nle_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C7A0000;code3:       $0;enc:VOPC;name:'v_cmpx_neq_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C7C0000;code3:       $0;enc:VOPC;name:'v_cmpx_nlt_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C7E0000;code3:       $0;enc:VOPC;name:'v_cmpx_tru_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7C800000;code3:       $0;enc:VOPC;name:'v_cmps_f_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = 0, signal any NaN; D = VCC in VOPC'),
(code:$7C820000;code3:       $0;enc:VOPC;name:'v_cmps_lt_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (S0 < S1), signal any NaN; D = VCC in VOPC'),
(code:$7C840000;code3:       $0;enc:VOPC;name:'v_cmps_eq_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (S0 == S1), signal any NaN; D = VCC in VOPC'),
(code:$7C860000;code3:       $0;enc:VOPC;name:'v_cmps_le_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (S0 <= S1), signal any NaN; D = VCC in VOPC'),
(code:$7C880000;code3:       $0;enc:VOPC;name:'v_cmps_gt_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (S0 > S1), signal any NaN; D = VCC in VOPC'),
(code:$7C8A0000;code3:       $0;enc:VOPC;name:'v_cmps_lg_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (S0 <> S1), signal any NaN; D = VCC in VOPC'),
(code:$7C8C0000;code3:       $0;enc:VOPC;name:'v_cmps_ge_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (S0 >= S1), signal any NaN; D = VCC in VOPC'),
(code:$7C8E0000;code3:       $0;enc:VOPC;name:'v_cmps_o_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (!isNan(S0) && !isNan(S1)), signal any NaN; D = VCC in VOPC'),
(code:$7C900000;code3:       $0;enc:VOPC;name:'v_cmps_u_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (isNan(S0)  ||  isNan(S1)), signal any NaN; D = VCC in VOPC'),
(code:$7C920000;code3:       $0;enc:VOPC;name:'v_cmps_nge_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = !(S0 >= S1), signal any NaN; D = VCC in VOPC'),
(code:$7C940000;code3:       $0;enc:VOPC;name:'v_cmps_nlg_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = !(S0 <> S1), signal any NaN; D = VCC in VOPC'),
(code:$7C960000;code3:       $0;enc:VOPC;name:'v_cmps_ngt_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = !(S0 > S1), signal any NaN; D = VCC in VOPC'),
(code:$7C980000;code3:       $0;enc:VOPC;name:'v_cmps_nle_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = !(S0 <= S1), signal any NaN; D = VCC in VOPC'),
(code:$7C9A0000;code3:       $0;enc:VOPC;name:'v_cmps_neq_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = !(S0 == S1), signal any NaN; D = VCC in VOPC'),
(code:$7C9C0000;code3:       $0;enc:VOPC;name:'v_cmps_nlt_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = !(S0 < S1), signal any NaN; D = VCC in VOPC'),
(code:$7C9E0000;code3:       $0;enc:VOPC;name:'v_cmps_tru_f32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = 1, signal any NaN; D = VCC in VOPC'),
(code:$7CA00000;code3:       $0;enc:VOPC;name:'v_cmpsx_f_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = 0, signal on any NaN; D = VCC in VOPC'),
(code:$7CA20000;code3:       $0;enc:VOPC;name:'v_cmpsx_lt_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (S0 < S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CA40000;code3:       $0;enc:VOPC;name:'v_cmpsx_eq_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (S0 == S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CA60000;code3:       $0;enc:VOPC;name:'v_cmpsx_le_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (S0 <= S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CA80000;code3:       $0;enc:VOPC;name:'v_cmpsx_gt_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (S0 > S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CAA0000;code3:       $0;enc:VOPC;name:'v_cmpsx_lg_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (S0 <> S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CAC0000;code3:       $0;enc:VOPC;name:'v_cmpsx_ge_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (S0 >= S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CAE0000;code3:       $0;enc:VOPC;name:'v_cmpsx_o_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (!isNan(S0) && !isNan(S1)), signal on any NaN; D = VCC in VOPC'),
(code:$7CB00000;code3:       $0;enc:VOPC;name:'v_cmpsx_u_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (isNan(S0)  ||  isNan(S1)), signal on any NaN; D = VCC in VOPC'),
(code:$7CB20000;code3:       $0;enc:VOPC;name:'v_cmpsx_nge_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = !(S0 >= S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CB40000;code3:       $0;enc:VOPC;name:'v_cmpsx_nlg_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = !(S0 <> S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CB60000;code3:       $0;enc:VOPC;name:'v_cmpsx_ngt_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = !(S0 > S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CB80000;code3:       $0;enc:VOPC;name:'v_cmpsx_nle_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = !(S0 <= S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CBA0000;code3:       $0;enc:VOPC;name:'v_cmpsx_neq_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = !(S0 == S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CBC0000;code3:       $0;enc:VOPC;name:'v_cmpsx_nlt_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = !(S0 < S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CBE0000;code3:       $0;enc:VOPC;name:'v_cmpsx_tru_f32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = 1, signal on any NaN; D = VCC in VOPC'),
(code:$7CC00000;code3:       $0;enc:VOPC;name:'v_cmps_f_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:'D(sgpr).u = 0, signal on any NaN; D = VCC in VOPC'),
(code:$7CC20000;code3:       $0;enc:VOPC;name:'v_cmps_lt_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:'D(sgpr).u = (S0 < S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CC40000;code3:       $0;enc:VOPC;name:'v_cmps_eq_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:'D(sgpr).u = (S0 == S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CC60000;code3:       $0;enc:VOPC;name:'v_cmps_le_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:'D(sgpr).u = (S0 <= S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CC80000;code3:       $0;enc:VOPC;name:'v_cmps_gt_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:'D(sgpr).u = (S0 > S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CCA0000;code3:       $0;enc:VOPC;name:'v_cmps_lg_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:'D(sgpr).u = (S0 <> S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CCC0000;code3:       $0;enc:VOPC;name:'v_cmps_ge_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:'D(sgpr).u = (S0 >= S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CCE0000;code3:       $0;enc:VOPC;name:'v_cmps_o_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:'D(sgpr).u = (!isNan(S0) && !isNan(S1)), signal on any NaN; D = VCC in VOPC'),
(code:$7CD00000;code3:       $0;enc:VOPC;name:'v_cmps_u_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:'D(sgpr).u = (isNan(S0)  ||  isNan(S1)), signal on any NaN; D = VCC in VOPC'),
(code:$7CD20000;code3:       $0;enc:VOPC;name:'v_cmps_nge_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:'D(sgpr).u = !(S0 >= S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CD40000;code3:       $0;enc:VOPC;name:'v_cmps_nlg_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:'D(sgpr).u = !(S0 <> S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CD60000;code3:       $0;enc:VOPC;name:'v_cmps_ngt_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:'D(sgpr).u = !(S0 > S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CD80000;code3:       $0;enc:VOPC;name:'v_cmps_nle_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:'D(sgpr).u = !(S0 <= S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CDA0000;code3:       $0;enc:VOPC;name:'v_cmps_neq_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:'D(sgpr).u = !(S0 == S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CDC0000;code3:       $0;enc:VOPC;name:'v_cmps_nlt_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:'D(sgpr).u = !(S0 < S1), signal on any NaN; D = VCC in VOPC'),
(code:$7CDE0000;code3:       $0;enc:VOPC;name:'v_cmps_tru_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:'D(sgpr).u = 1, signal on any NaN; D = VCC in VOPC'),
(code:$7CE00000;code3:       $0;enc:VOPC;name:'v_cmpsx_f_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7CE20000;code3:       $0;enc:VOPC;name:'v_cmpsx_lt_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7CE40000;code3:       $0;enc:VOPC;name:'v_cmpsx_eq_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7CE60000;code3:       $0;enc:VOPC;name:'v_cmpsx_le_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7CE80000;code3:       $0;enc:VOPC;name:'v_cmpsx_gt_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7CEA0000;code3:       $0;enc:VOPC;name:'v_cmpsx_lg_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7CEC0000;code3:       $0;enc:VOPC;name:'v_cmpsx_ge_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7CEE0000;code3:       $0;enc:VOPC;name:'v_cmpsx_o_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7CF00000;code3:       $0;enc:VOPC;name:'v_cmpsx_u_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7CF20000;code3:       $0;enc:VOPC;name:'v_cmpsx_nge_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7CF40000;code3:       $0;enc:VOPC;name:'v_cmpsx_nlg_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7CF60000;code3:       $0;enc:VOPC;name:'v_cmpsx_ngt_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7CF80000;code3:       $0;enc:VOPC;name:'v_cmpsx_nle_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7CFA0000;code3:       $0;enc:VOPC;name:'v_cmpsx_neq_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7CFC0000;code3:       $0;enc:VOPC;name:'v_cmpsx_nlt_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7CFE0000;code3:       $0;enc:VOPC;name:'v_cmpsx_tru_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7D000000;code3:       $0;enc:VOPC;name:'v_cmp_f_i32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = 0; D = VCC in VOPC'),
(code:$7D020000;code3:       $0;enc:VOPC;name:'v_cmp_lt_i32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (S0 < S1); D = VCC in VOPC'),
(code:$7D040000;code3:       $0;enc:VOPC;name:'v_cmp_eq_i32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (S0 == S1); D = VCC in VOPC'),
(code:$7D060000;code3:       $0;enc:VOPC;name:'v_cmp_le_i32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (S0 <= S1); D = VCC in VOPC'),
(code:$7D080000;code3:       $0;enc:VOPC;name:'v_cmp_gt_i32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (S0 > S1); D = VCC in VOPC'),
(code:$7D0A0000;code3:       $0;enc:VOPC;name:'v_cmp_ne_i32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (S0 <> S1); D = VCC in VOPC'),
(code:$7D0C0000;code3:       $0;enc:VOPC;name:'v_cmp_ge_i32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (S0 >= S1); D = VCC in VOPC'),
(code:$7D0E0000;code3:       $0;enc:VOPC;name:'v_cmp_t_i32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = 1; D = VCC in VOPC'),
(code:$7D100000;code3:       $0;enc:VOPC;name:'v_cmp_class_f32';pfmt:'vcc, s0, v0';descr:'VCC = IEEE numeric class function specified in S1.u, performed on S0.f'),
(code:$7D120000;code3:       $0;enc:VOPC;name:'VOPC_invalid_137';pfmt:'vcc, s0, v0';descr:''),
(code:$7D140000;code3:       $0;enc:VOPC;name:'VOPC_invalid_138';pfmt:'vcc, s0, v0';descr:''),
(code:$7D160000;code3:       $0;enc:VOPC;name:'VOPC_invalid_139';pfmt:'vcc, s0, v0';descr:''),
(code:$7D180000;code3:       $0;enc:VOPC;name:'VOPC_invalid_140';pfmt:'vcc, s0, v0';descr:''),
(code:$7D1A0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_141';pfmt:'vcc, s0, v0';descr:''),
(code:$7D1C0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_142';pfmt:'vcc, s0, v0';descr:''),
(code:$7D1E0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_143';pfmt:'vcc, s0, v0';descr:''),
(code:$7D200000;code3:       $0;enc:VOPC;name:'v_cmpx_f_i32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = 0; D = VCC in VOPC'),
(code:$7D220000;code3:       $0;enc:VOPC;name:'v_cmpx_lt_i32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (S0 < S1); D = VCC in VOPC'),
(code:$7D240000;code3:       $0;enc:VOPC;name:'v_cmpx_eq_i32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (S0 == S1); D = VCC in VOPC'),
(code:$7D260000;code3:       $0;enc:VOPC;name:'v_cmpx_le_i32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (S0 <= S1); D = VCC in VOPC'),
(code:$7D280000;code3:       $0;enc:VOPC;name:'v_cmpx_gt_i32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (S0 > S1); D = VCC in VOPC'),
(code:$7D2A0000;code3:       $0;enc:VOPC;name:'v_cmpx_ne_i32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (S0 <> S1); D = VCC in VOPC'),
(code:$7D2C0000;code3:       $0;enc:VOPC;name:'v_cmpx_ge_i32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = (S0 >= S1); D = VCC in VOPC'),
(code:$7D2E0000;code3:       $0;enc:VOPC;name:'v_cmpx_t_i32';pfmt:'vcc, s0, v0';descr:'EXEC,D(sgpr).u = 1; D = VCC in VOPC'),
(code:$7D300000;code3:       $0;enc:VOPC;name:'v_cmpx_class_f32';pfmt:'vcc, s0, v0';descr:'EXEC, VCC = IEEE numeric class function specified in S1.u, performed on S0.f'),
(code:$7D320000;code3:       $0;enc:VOPC;name:'VOPC_invalid_153';pfmt:'vcc, s0, v0';descr:''),
(code:$7D340000;code3:       $0;enc:VOPC;name:'VOPC_invalid_154';pfmt:'vcc, s0, v0';descr:''),
(code:$7D360000;code3:       $0;enc:VOPC;name:'VOPC_invalid_155';pfmt:'vcc, s0, v0';descr:''),
(code:$7D380000;code3:       $0;enc:VOPC;name:'VOPC_invalid_156';pfmt:'vcc, s0, v0';descr:''),
(code:$7D3A0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_157';pfmt:'vcc, s0, v0';descr:''),
(code:$7D3C0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_158';pfmt:'vcc, s0, v0';descr:''),
(code:$7D3E0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_159';pfmt:'vcc, s0, v0';descr:''),
(code:$7D400000;code3:       $0;enc:VOPC;name:'v_cmp_f_i64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7D420000;code3:       $0;enc:VOPC;name:'v_cmp_lt_i64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7D440000;code3:       $0;enc:VOPC;name:'v_cmp_eq_i64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7D460000;code3:       $0;enc:VOPC;name:'v_cmp_le_i64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7D480000;code3:       $0;enc:VOPC;name:'v_cmp_gt_i64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7D4A0000;code3:       $0;enc:VOPC;name:'v_cmp_ne_i64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7D4C0000;code3:       $0;enc:VOPC;name:'v_cmp_ge_i64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7D4E0000;code3:       $0;enc:VOPC;name:'v_cmp_t_i64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7D500000;code3:       $0;enc:VOPC;name:'v_cmp_class_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:'VCC = IEEE numeric class function specified in S1.u, performed on S0.d'),
(code:$7D520000;code3:       $0;enc:VOPC;name:'VOPC_invalid_169';pfmt:'vcc, s0, v0';descr:''),
(code:$7D540000;code3:       $0;enc:VOPC;name:'VOPC_invalid_170';pfmt:'vcc, s0, v0';descr:''),
(code:$7D560000;code3:       $0;enc:VOPC;name:'VOPC_invalid_171';pfmt:'vcc, s0, v0';descr:''),
(code:$7D580000;code3:       $0;enc:VOPC;name:'VOPC_invalid_172';pfmt:'vcc, s0, v0';descr:''),
(code:$7D5A0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_173';pfmt:'vcc, s0, v0';descr:''),
(code:$7D5C0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_174';pfmt:'vcc, s0, v0';descr:''),
(code:$7D5E0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_175';pfmt:'vcc, s0, v0';descr:''),
(code:$7D600000;code3:       $0;enc:VOPC;name:'v_cmpx_f_i64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7D620000;code3:       $0;enc:VOPC;name:'v_cmpx_lt_i64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7D640000;code3:       $0;enc:VOPC;name:'v_cmpx_eq_i64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7D660000;code3:       $0;enc:VOPC;name:'v_cmpx_le_i64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7D680000;code3:       $0;enc:VOPC;name:'v_cmpx_gt_i64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7D6A0000;code3:       $0;enc:VOPC;name:'v_cmpx_ne_i64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7D6C0000;code3:       $0;enc:VOPC;name:'v_cmpx_ge_i64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7D6E0000;code3:       $0;enc:VOPC;name:'v_cmpx_t_i64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7D700000;code3:       $0;enc:VOPC;name:'v_cmpx_class_f64';pfmt:'vcc, s[0:1], v[0:1]';descr:'EXEC, VCC = IEEE numeric class function specified in S1.u, performed on S0.d'),
(code:$7D720000;code3:       $0;enc:VOPC;name:'VOPC_invalid_185';pfmt:'vcc, s0, v0';descr:''),
(code:$7D740000;code3:       $0;enc:VOPC;name:'VOPC_invalid_186';pfmt:'vcc, s0, v0';descr:''),
(code:$7D760000;code3:       $0;enc:VOPC;name:'VOPC_invalid_187';pfmt:'vcc, s0, v0';descr:''),
(code:$7D780000;code3:       $0;enc:VOPC;name:'VOPC_invalid_188';pfmt:'vcc, s0, v0';descr:''),
(code:$7D7A0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_189';pfmt:'vcc, s0, v0';descr:''),
(code:$7D7C0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_190';pfmt:'vcc, s0, v0';descr:''),
(code:$7D7E0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_191';pfmt:'vcc, s0, v0';descr:''),
(code:$7D800000;code3:       $0;enc:VOPC;name:'v_cmp_f_u32';pfmt:'vcc, s0, v0';descr:''),
(code:$7D820000;code3:       $0;enc:VOPC;name:'v_cmp_lt_u32';pfmt:'vcc, s0, v0';descr:''),
(code:$7D840000;code3:       $0;enc:VOPC;name:'v_cmp_eq_u32';pfmt:'vcc, s0, v0';descr:''),
(code:$7D860000;code3:       $0;enc:VOPC;name:'v_cmp_le_u32';pfmt:'vcc, s0, v0';descr:''),
(code:$7D880000;code3:       $0;enc:VOPC;name:'v_cmp_gt_u32';pfmt:'vcc, s0, v0';descr:''),
(code:$7D8A0000;code3:       $0;enc:VOPC;name:'v_cmp_ne_u32';pfmt:'vcc, s0, v0';descr:''),
(code:$7D8C0000;code3:       $0;enc:VOPC;name:'v_cmp_ge_u32';pfmt:'vcc, s0, v0';descr:''),
(code:$7D8E0000;code3:       $0;enc:VOPC;name:'v_cmp_t_u32';pfmt:'vcc, s0, v0';descr:''),
(code:$7D900000;code3:       $0;enc:VOPC;name:'VOPC_invalid_200';pfmt:'vcc, s0, v0';descr:''),
(code:$7D920000;code3:       $0;enc:VOPC;name:'VOPC_invalid_201';pfmt:'vcc, s0, v0';descr:''),
(code:$7D940000;code3:       $0;enc:VOPC;name:'VOPC_invalid_202';pfmt:'vcc, s0, v0';descr:''),
(code:$7D960000;code3:       $0;enc:VOPC;name:'VOPC_invalid_203';pfmt:'vcc, s0, v0';descr:''),
(code:$7D980000;code3:       $0;enc:VOPC;name:'VOPC_invalid_204';pfmt:'vcc, s0, v0';descr:''),
(code:$7D9A0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_205';pfmt:'vcc, s0, v0';descr:''),
(code:$7D9C0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_206';pfmt:'vcc, s0, v0';descr:''),
(code:$7D9E0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_207';pfmt:'vcc, s0, v0';descr:''),
(code:$7DA00000;code3:       $0;enc:VOPC;name:'v_cmpx_f_u32';pfmt:'vcc, s0, v0';descr:''),
(code:$7DA20000;code3:       $0;enc:VOPC;name:'v_cmpx_lt_u32';pfmt:'vcc, s0, v0';descr:''),
(code:$7DA40000;code3:       $0;enc:VOPC;name:'v_cmpx_eq_u32';pfmt:'vcc, s0, v0';descr:''),
(code:$7DA60000;code3:       $0;enc:VOPC;name:'v_cmpx_le_u32';pfmt:'vcc, s0, v0';descr:''),
(code:$7DA80000;code3:       $0;enc:VOPC;name:'v_cmpx_gt_u32';pfmt:'vcc, s0, v0';descr:''),
(code:$7DAA0000;code3:       $0;enc:VOPC;name:'v_cmpx_ne_u32';pfmt:'vcc, s0, v0';descr:''),
(code:$7DAC0000;code3:       $0;enc:VOPC;name:'v_cmpx_ge_u32';pfmt:'vcc, s0, v0';descr:''),
(code:$7DAE0000;code3:       $0;enc:VOPC;name:'v_cmpx_t_u32';pfmt:'vcc, s0, v0';descr:''),
(code:$7DB00000;code3:       $0;enc:VOPC;name:'VOPC_invalid_216';pfmt:'vcc, s0, v0';descr:''),
(code:$7DB20000;code3:       $0;enc:VOPC;name:'VOPC_invalid_217';pfmt:'vcc, s0, v0';descr:''),
(code:$7DB40000;code3:       $0;enc:VOPC;name:'VOPC_invalid_218';pfmt:'vcc, s0, v0';descr:''),
(code:$7DB60000;code3:       $0;enc:VOPC;name:'VOPC_invalid_219';pfmt:'vcc, s0, v0';descr:''),
(code:$7DB80000;code3:       $0;enc:VOPC;name:'VOPC_invalid_220';pfmt:'vcc, s0, v0';descr:''),
(code:$7DBA0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_221';pfmt:'vcc, s0, v0';descr:''),
(code:$7DBC0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_222';pfmt:'vcc, s0, v0';descr:''),
(code:$7DBE0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_223';pfmt:'vcc, s0, v0';descr:''),
(code:$7DC00000;code3:       $0;enc:VOPC;name:'v_cmp_f_u64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7DC20000;code3:       $0;enc:VOPC;name:'v_cmp_lt_u64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7DC40000;code3:       $0;enc:VOPC;name:'v_cmp_eq_u64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7DC60000;code3:       $0;enc:VOPC;name:'v_cmp_le_u64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7DC80000;code3:       $0;enc:VOPC;name:'v_cmp_gt_u64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7DCA0000;code3:       $0;enc:VOPC;name:'v_cmp_ne_u64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7DCC0000;code3:       $0;enc:VOPC;name:'v_cmp_ge_u64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7DCE0000;code3:       $0;enc:VOPC;name:'v_cmp_t_u64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7DD00000;code3:       $0;enc:VOPC;name:'VOPC_invalid_232';pfmt:'vcc, s0, v0';descr:''),
(code:$7DD20000;code3:       $0;enc:VOPC;name:'VOPC_invalid_233';pfmt:'vcc, s0, v0';descr:''),
(code:$7DD40000;code3:       $0;enc:VOPC;name:'VOPC_invalid_234';pfmt:'vcc, s0, v0';descr:''),
(code:$7DD60000;code3:       $0;enc:VOPC;name:'VOPC_invalid_235';pfmt:'vcc, s0, v0';descr:''),
(code:$7DD80000;code3:       $0;enc:VOPC;name:'VOPC_invalid_236';pfmt:'vcc, s0, v0';descr:''),
(code:$7DDA0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_237';pfmt:'vcc, s0, v0';descr:''),
(code:$7DDC0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_238';pfmt:'vcc, s0, v0';descr:''),
(code:$7DDE0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_239';pfmt:'vcc, s0, v0';descr:''),
(code:$7DE00000;code3:       $0;enc:VOPC;name:'v_cmpx_f_u64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7DE20000;code3:       $0;enc:VOPC;name:'v_cmpx_lt_u64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7DE40000;code3:       $0;enc:VOPC;name:'v_cmpx_eq_u64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7DE60000;code3:       $0;enc:VOPC;name:'v_cmpx_le_u64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7DE80000;code3:       $0;enc:VOPC;name:'v_cmpx_gt_u64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7DEA0000;code3:       $0;enc:VOPC;name:'v_cmpx_ne_u64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7DEC0000;code3:       $0;enc:VOPC;name:'v_cmpx_ge_u64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7DEE0000;code3:       $0;enc:VOPC;name:'v_cmpx_t_u64';pfmt:'vcc, s[0:1], v[0:1]';descr:''),
(code:$7DF00000;code3:       $0;enc:VOPC;name:'VOPC_invalid_248';pfmt:'vcc, s0, v0';descr:''),
(code:$7DF20000;code3:       $0;enc:VOPC;name:'VOPC_invalid_249';pfmt:'vcc, s0, v0';descr:''),
(code:$7DF40000;code3:       $0;enc:VOPC;name:'VOPC_invalid_250';pfmt:'vcc, s0, v0';descr:''),
(code:$7DF60000;code3:       $0;enc:VOPC;name:'VOPC_invalid_251';pfmt:'vcc, s0, v0';descr:''),
(code:$7DF80000;code3:       $0;enc:VOPC;name:'VOPC_invalid_252';pfmt:'vcc, s0, v0';descr:''),
(code:$7DFA0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_253';pfmt:'vcc, s0, v0';descr:''),
(code:$7DFC0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_254';pfmt:'vcc, s0, v0';descr:''),
(code:$7DFE0000;code3:       $0;enc:VOPC;name:'VOPC_invalid_255';pfmt:'vcc, s0, v0';descr:''),
(code:$D0000000;code3:       $0;enc:VOP3;name:'v_cmp_f_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = 0, signal on sNaN input only; D = VCC in VOPC'),
(code:$D0020000;code3:       $0;enc:VOP3;name:'v_cmp_lt_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (S0 < S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D0040000;code3:       $0;enc:VOP3;name:'v_cmp_eq_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (S0 == S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D0060000;code3:       $0;enc:VOP3;name:'v_cmp_le_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (S0 <= S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D0080000;code3:       $0;enc:VOP3;name:'v_cmp_gt_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (S0 > S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D00A0000;code3:       $0;enc:VOP3;name:'v_cmp_lg_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (S0 <> S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D00C0000;code3:       $0;enc:VOP3;name:'v_cmp_ge_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (S0 >= S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D00E0000;code3:       $0;enc:VOP3;name:'v_cmp_o_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (!isNan(S0) && !isNan(S1)), signal on sNaN input only; D = VCC in VOPC'),
(code:$D0100000;code3:       $0;enc:VOP3;name:'v_cmp_u_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (isNan(S0)  ||  isNan(S1)), signal on sNaN input only; D = VCC in VOPC'),
(code:$D0120000;code3:       $0;enc:VOP3;name:'v_cmp_nge_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = !(S0 >= S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D0140000;code3:       $0;enc:VOP3;name:'v_cmp_nlg_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = !(S0 <> S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D0160000;code3:       $0;enc:VOP3;name:'v_cmp_ngt_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = !(S0 > S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D0180000;code3:       $0;enc:VOP3;name:'v_cmp_nle_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = !(S0 <= S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D01A0000;code3:       $0;enc:VOP3;name:'v_cmp_neq_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = !(S0 == S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D01C0000;code3:       $0;enc:VOP3;name:'v_cmp_nlt_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = !(S0 < S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D01E0000;code3:       $0;enc:VOP3;name:'v_cmp_tru_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = 1, signal on sNaN input only; D = VCC in VOPC'),
(code:$D0200000;code3:       $0;enc:VOP3;name:'v_cmpx_f_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = 0, signal on sNaN input only; D = VCC in VOPC'),
(code:$D0220000;code3:       $0;enc:VOP3;name:'v_cmpx_lt_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (S0 < S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D0240000;code3:       $0;enc:VOP3;name:'v_cmpx_eq_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (S0 == S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D0260000;code3:       $0;enc:VOP3;name:'v_cmpx_le_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (S0 <= S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D0280000;code3:       $0;enc:VOP3;name:'v_cmpx_gt_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (S0 > S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D02A0000;code3:       $0;enc:VOP3;name:'v_cmpx_lg_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (S0 <> S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D02C0000;code3:       $0;enc:VOP3;name:'v_cmpx_ge_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (S0 >= S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D02E0000;code3:       $0;enc:VOP3;name:'v_cmpx_o_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (!isNan(S0) && !isNan(S1)), signal on sNaN input only; D = VCC in VOPC'),
(code:$D0300000;code3:       $0;enc:VOP3;name:'v_cmpx_u_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (isNan(S0)  ||  isNan(S1)), signal on sNaN input only; D = VCC in VOPC'),
(code:$D0320000;code3:       $0;enc:VOP3;name:'v_cmpx_nge_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = !(S0 >= S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D0340000;code3:       $0;enc:VOP3;name:'v_cmpx_nlg_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = !(S0 <> S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D0360000;code3:       $0;enc:VOP3;name:'v_cmpx_ngt_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = !(S0 > S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D0380000;code3:       $0;enc:VOP3;name:'v_cmpx_nle_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = !(S0 <= S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D03A0000;code3:       $0;enc:VOP3;name:'v_cmpx_neq_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = !(S0 == S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D03C0000;code3:       $0;enc:VOP3;name:'v_cmpx_nlt_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = !(S0 < S1), signal on sNaN input only; D = VCC in VOPC'),
(code:$D03E0000;code3:       $0;enc:VOP3;name:'v_cmpx_tru_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = 1, signal on sNaN input only; D = VCC in VOPC'),
(code:$D0400000;code3:       $0;enc:VOP3;name:'v_cmp_f_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0420000;code3:       $0;enc:VOP3;name:'v_cmp_lt_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0440000;code3:       $0;enc:VOP3;name:'v_cmp_eq_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0460000;code3:       $0;enc:VOP3;name:'v_cmp_le_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0480000;code3:       $0;enc:VOP3;name:'v_cmp_gt_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D04A0000;code3:       $0;enc:VOP3;name:'v_cmp_lg_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D04C0000;code3:       $0;enc:VOP3;name:'v_cmp_ge_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D04E0000;code3:       $0;enc:VOP3;name:'v_cmp_o_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0500000;code3:       $0;enc:VOP3;name:'v_cmp_u_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0520000;code3:       $0;enc:VOP3;name:'v_cmp_nge_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0540000;code3:       $0;enc:VOP3;name:'v_cmp_nlg_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0560000;code3:       $0;enc:VOP3;name:'v_cmp_ngt_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0580000;code3:       $0;enc:VOP3;name:'v_cmp_nle_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D05A0000;code3:       $0;enc:VOP3;name:'v_cmp_neq_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D05C0000;code3:       $0;enc:VOP3;name:'v_cmp_nlt_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D05E0000;code3:       $0;enc:VOP3;name:'v_cmp_tru_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0600000;code3:       $0;enc:VOP3;name:'v_cmpx_f_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0620000;code3:       $0;enc:VOP3;name:'v_cmpx_lt_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0640000;code3:       $0;enc:VOP3;name:'v_cmpx_eq_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0660000;code3:       $0;enc:VOP3;name:'v_cmpx_le_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0680000;code3:       $0;enc:VOP3;name:'v_cmpx_gt_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D06A0000;code3:       $0;enc:VOP3;name:'v_cmpx_lg_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D06C0000;code3:       $0;enc:VOP3;name:'v_cmpx_ge_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D06E0000;code3:       $0;enc:VOP3;name:'v_cmpx_o_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0700000;code3:       $0;enc:VOP3;name:'v_cmpx_u_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0720000;code3:       $0;enc:VOP3;name:'v_cmpx_nge_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0740000;code3:       $0;enc:VOP3;name:'v_cmpx_nlg_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0760000;code3:       $0;enc:VOP3;name:'v_cmpx_ngt_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0780000;code3:       $0;enc:VOP3;name:'v_cmpx_nle_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D07A0000;code3:       $0;enc:VOP3;name:'v_cmpx_neq_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D07C0000;code3:       $0;enc:VOP3;name:'v_cmpx_nlt_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D07E0000;code3:       $0;enc:VOP3;name:'v_cmpx_tru_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0800000;code3:       $0;enc:VOP3;name:'v_cmps_f_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = 0, signal any NaN; D = VCC in VOPC'),
(code:$D0820000;code3:       $0;enc:VOP3;name:'v_cmps_lt_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (S0 < S1), signal any NaN; D = VCC in VOPC'),
(code:$D0840000;code3:       $0;enc:VOP3;name:'v_cmps_eq_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (S0 == S1), signal any NaN; D = VCC in VOPC'),
(code:$D0860000;code3:       $0;enc:VOP3;name:'v_cmps_le_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (S0 <= S1), signal any NaN; D = VCC in VOPC'),
(code:$D0880000;code3:       $0;enc:VOP3;name:'v_cmps_gt_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (S0 > S1), signal any NaN; D = VCC in VOPC'),
(code:$D08A0000;code3:       $0;enc:VOP3;name:'v_cmps_lg_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (S0 <> S1), signal any NaN; D = VCC in VOPC'),
(code:$D08C0000;code3:       $0;enc:VOP3;name:'v_cmps_ge_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (S0 >= S1), signal any NaN; D = VCC in VOPC'),
(code:$D08E0000;code3:       $0;enc:VOP3;name:'v_cmps_o_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (!isNan(S0) && !isNan(S1)), signal any NaN; D = VCC in VOPC'),
(code:$D0900000;code3:       $0;enc:VOP3;name:'v_cmps_u_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (isNan(S0)  ||  isNan(S1)), signal any NaN; D = VCC in VOPC'),
(code:$D0920000;code3:       $0;enc:VOP3;name:'v_cmps_nge_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = !(S0 >= S1), signal any NaN; D = VCC in VOPC'),
(code:$D0940000;code3:       $0;enc:VOP3;name:'v_cmps_nlg_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = !(S0 <> S1), signal any NaN; D = VCC in VOPC'),
(code:$D0960000;code3:       $0;enc:VOP3;name:'v_cmps_ngt_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = !(S0 > S1), signal any NaN; D = VCC in VOPC'),
(code:$D0980000;code3:       $0;enc:VOP3;name:'v_cmps_nle_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = !(S0 <= S1), signal any NaN; D = VCC in VOPC'),
(code:$D09A0000;code3:       $0;enc:VOP3;name:'v_cmps_neq_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = !(S0 == S1), signal any NaN; D = VCC in VOPC'),
(code:$D09C0000;code3:       $0;enc:VOP3;name:'v_cmps_nlt_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = !(S0 < S1), signal any NaN; D = VCC in VOPC'),
(code:$D09E0000;code3:       $0;enc:VOP3;name:'v_cmps_tru_f32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = 1, signal any NaN; D = VCC in VOPC'),
(code:$D0A00000;code3:       $0;enc:VOP3;name:'v_cmpsx_f_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = 0, signal on any NaN; D = VCC in VOPC'),
(code:$D0A20000;code3:       $0;enc:VOP3;name:'v_cmpsx_lt_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (S0 < S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0A40000;code3:       $0;enc:VOP3;name:'v_cmpsx_eq_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (S0 == S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0A60000;code3:       $0;enc:VOP3;name:'v_cmpsx_le_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (S0 <= S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0A80000;code3:       $0;enc:VOP3;name:'v_cmpsx_gt_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (S0 > S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0AA0000;code3:       $0;enc:VOP3;name:'v_cmpsx_lg_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (S0 <> S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0AC0000;code3:       $0;enc:VOP3;name:'v_cmpsx_ge_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (S0 >= S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0AE0000;code3:       $0;enc:VOP3;name:'v_cmpsx_o_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (!isNan(S0) && !isNan(S1)), signal on any NaN; D = VCC in VOPC'),
(code:$D0B00000;code3:       $0;enc:VOP3;name:'v_cmpsx_u_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (isNan(S0)  ||  isNan(S1)), signal on any NaN; D = VCC in VOPC'),
(code:$D0B20000;code3:       $0;enc:VOP3;name:'v_cmpsx_nge_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = !(S0 >= S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0B40000;code3:       $0;enc:VOP3;name:'v_cmpsx_nlg_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = !(S0 <> S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0B60000;code3:       $0;enc:VOP3;name:'v_cmpsx_ngt_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = !(S0 > S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0B80000;code3:       $0;enc:VOP3;name:'v_cmpsx_nle_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = !(S0 <= S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0BA0000;code3:       $0;enc:VOP3;name:'v_cmpsx_neq_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = !(S0 == S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0BC0000;code3:       $0;enc:VOP3;name:'v_cmpsx_nlt_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = !(S0 < S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0BE0000;code3:       $0;enc:VOP3;name:'v_cmpsx_tru_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = 1, signal on any NaN; D = VCC in VOPC'),
(code:$D0C00000;code3:       $0;enc:VOP3;name:'v_cmps_f_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:'D(sgpr).u = 0, signal on any NaN; D = VCC in VOPC'),
(code:$D0C20000;code3:       $0;enc:VOP3;name:'v_cmps_lt_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:'D(sgpr).u = (S0 < S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0C40000;code3:       $0;enc:VOP3;name:'v_cmps_eq_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:'D(sgpr).u = (S0 == S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0C60000;code3:       $0;enc:VOP3;name:'v_cmps_le_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:'D(sgpr).u = (S0 <= S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0C80000;code3:       $0;enc:VOP3;name:'v_cmps_gt_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:'D(sgpr).u = (S0 > S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0CA0000;code3:       $0;enc:VOP3;name:'v_cmps_lg_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:'D(sgpr).u = (S0 <> S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0CC0000;code3:       $0;enc:VOP3;name:'v_cmps_ge_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:'D(sgpr).u = (S0 >= S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0CE0000;code3:       $0;enc:VOP3;name:'v_cmps_o_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:'D(sgpr).u = (!isNan(S0) && !isNan(S1)), signal on any NaN; D = VCC in VOPC'),
(code:$D0D00000;code3:       $0;enc:VOP3;name:'v_cmps_u_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:'D(sgpr).u = (isNan(S0)  ||  isNan(S1)), signal on any NaN; D = VCC in VOPC'),
(code:$D0D20000;code3:       $0;enc:VOP3;name:'v_cmps_nge_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:'D(sgpr).u = !(S0 >= S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0D40000;code3:       $0;enc:VOP3;name:'v_cmps_nlg_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:'D(sgpr).u = !(S0 <> S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0D60000;code3:       $0;enc:VOP3;name:'v_cmps_ngt_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:'D(sgpr).u = !(S0 > S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0D80000;code3:       $0;enc:VOP3;name:'v_cmps_nle_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:'D(sgpr).u = !(S0 <= S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0DA0000;code3:       $0;enc:VOP3;name:'v_cmps_neq_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:'D(sgpr).u = !(S0 == S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0DC0000;code3:       $0;enc:VOP3;name:'v_cmps_nlt_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:'D(sgpr).u = !(S0 < S1), signal on any NaN; D = VCC in VOPC'),
(code:$D0DE0000;code3:       $0;enc:VOP3;name:'v_cmps_tru_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:'D(sgpr).u = 1, signal on any NaN; D = VCC in VOPC'),
(code:$D0E00000;code3:       $0;enc:VOP3;name:'v_cmpsx_f_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0E20000;code3:       $0;enc:VOP3;name:'v_cmpsx_lt_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0E40000;code3:       $0;enc:VOP3;name:'v_cmpsx_eq_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0E60000;code3:       $0;enc:VOP3;name:'v_cmpsx_le_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0E80000;code3:       $0;enc:VOP3;name:'v_cmpsx_gt_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0EA0000;code3:       $0;enc:VOP3;name:'v_cmpsx_lg_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0EC0000;code3:       $0;enc:VOP3;name:'v_cmpsx_ge_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0EE0000;code3:       $0;enc:VOP3;name:'v_cmpsx_o_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0F00000;code3:       $0;enc:VOP3;name:'v_cmpsx_u_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0F20000;code3:       $0;enc:VOP3;name:'v_cmpsx_nge_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0F40000;code3:       $0;enc:VOP3;name:'v_cmpsx_nlg_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0F60000;code3:       $0;enc:VOP3;name:'v_cmpsx_ngt_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0F80000;code3:       $0;enc:VOP3;name:'v_cmpsx_nle_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0FA0000;code3:       $0;enc:VOP3;name:'v_cmpsx_neq_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0FC0000;code3:       $0;enc:VOP3;name:'v_cmpsx_nlt_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D0FE0000;code3:       $0;enc:VOP3;name:'v_cmpsx_tru_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1000000;code3:       $0;enc:VOP3;name:'v_cmp_f_i32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = 0; D = VCC in VOPC'),
(code:$D1020000;code3:       $0;enc:VOP3;name:'v_cmp_lt_i32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (S0 < S1); D = VCC in VOPC'),
(code:$D1040000;code3:       $0;enc:VOP3;name:'v_cmp_eq_i32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (S0 == S1); D = VCC in VOPC'),
(code:$D1060000;code3:       $0;enc:VOP3;name:'v_cmp_le_i32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (S0 <= S1); D = VCC in VOPC'),
(code:$D1080000;code3:       $0;enc:VOP3;name:'v_cmp_gt_i32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (S0 > S1); D = VCC in VOPC'),
(code:$D10A0000;code3:       $0;enc:VOP3;name:'v_cmp_ne_i32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (S0 <> S1); D = VCC in VOPC'),
(code:$D10C0000;code3:       $0;enc:VOP3;name:'v_cmp_ge_i32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (S0 >= S1); D = VCC in VOPC'),
(code:$D10E0000;code3:       $0;enc:VOP3;name:'v_cmp_t_i32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = 1; D = VCC in VOPC'),
(code:$D1100000;code3:       $0;enc:VOP3;name:'v_cmp_class_f32';pfmt:'s[0:1], s0, s0';descr:'VCC = IEEE numeric class function specified in S1.u, performed on S0.f'),
(code:$D1120000;code3:       $0;enc:VOP3;name:'VOP3_invalid_137';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1140000;code3:       $0;enc:VOP3;name:'VOP3_invalid_138';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1160000;code3:       $0;enc:VOP3;name:'VOP3_invalid_139';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1180000;code3:       $0;enc:VOP3;name:'VOP3_invalid_140';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D11A0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_141';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D11C0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_142';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D11E0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_143';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1200000;code3:       $0;enc:VOP3;name:'v_cmpx_f_i32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = 0; D = VCC in VOPC'),
(code:$D1220000;code3:       $0;enc:VOP3;name:'v_cmpx_lt_i32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (S0 < S1); D = VCC in VOPC'),
(code:$D1240000;code3:       $0;enc:VOP3;name:'v_cmpx_eq_i32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (S0 == S1); D = VCC in VOPC'),
(code:$D1260000;code3:       $0;enc:VOP3;name:'v_cmpx_le_i32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (S0 <= S1); D = VCC in VOPC'),
(code:$D1280000;code3:       $0;enc:VOP3;name:'v_cmpx_gt_i32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (S0 > S1); D = VCC in VOPC'),
(code:$D12A0000;code3:       $0;enc:VOP3;name:'v_cmpx_ne_i32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (S0 <> S1); D = VCC in VOPC'),
(code:$D12C0000;code3:       $0;enc:VOP3;name:'v_cmpx_ge_i32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = (S0 >= S1); D = VCC in VOPC'),
(code:$D12E0000;code3:       $0;enc:VOP3;name:'v_cmpx_t_i32';pfmt:'s[0:1], s0, s0';descr:'EXEC,D(sgpr).u = 1; D = VCC in VOPC'),
(code:$D1300000;code3:       $0;enc:VOP3;name:'v_cmpx_class_f32';pfmt:'s[0:1], s0, s0';descr:'EXEC, VCC = IEEE numeric class function specified in S1.u, performed on S0.f'),
(code:$D1320000;code3:       $0;enc:VOP3;name:'VOP3_invalid_153';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1340000;code3:       $0;enc:VOP3;name:'VOP3_invalid_154';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1360000;code3:       $0;enc:VOP3;name:'VOP3_invalid_155';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1380000;code3:       $0;enc:VOP3;name:'VOP3_invalid_156';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D13A0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_157';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D13C0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_158';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D13E0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_159';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1400000;code3:       $0;enc:VOP3;name:'v_cmp_f_i64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1420000;code3:       $0;enc:VOP3;name:'v_cmp_lt_i64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1440000;code3:       $0;enc:VOP3;name:'v_cmp_eq_i64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1460000;code3:       $0;enc:VOP3;name:'v_cmp_le_i64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1480000;code3:       $0;enc:VOP3;name:'v_cmp_gt_i64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D14A0000;code3:       $0;enc:VOP3;name:'v_cmp_ne_i64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D14C0000;code3:       $0;enc:VOP3;name:'v_cmp_ge_i64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D14E0000;code3:       $0;enc:VOP3;name:'v_cmp_t_i64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1500000;code3:       $0;enc:VOP3;name:'v_cmp_class_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:'VCC = IEEE numeric class function specified in S1.u, performed on S0.d'),
(code:$D1520000;code3:       $0;enc:VOP3;name:'VOP3_invalid_169';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1540000;code3:       $0;enc:VOP3;name:'VOP3_invalid_170';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1560000;code3:       $0;enc:VOP3;name:'VOP3_invalid_171';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1580000;code3:       $0;enc:VOP3;name:'VOP3_invalid_172';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D15A0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_173';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D15C0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_174';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D15E0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_175';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1600000;code3:       $0;enc:VOP3;name:'v_cmpx_f_i64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1620000;code3:       $0;enc:VOP3;name:'v_cmpx_lt_i64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1640000;code3:       $0;enc:VOP3;name:'v_cmpx_eq_i64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1660000;code3:       $0;enc:VOP3;name:'v_cmpx_le_i64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1680000;code3:       $0;enc:VOP3;name:'v_cmpx_gt_i64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D16A0000;code3:       $0;enc:VOP3;name:'v_cmpx_ne_i64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D16C0000;code3:       $0;enc:VOP3;name:'v_cmpx_ge_i64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D16E0000;code3:       $0;enc:VOP3;name:'v_cmpx_t_i64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1700000;code3:       $0;enc:VOP3;name:'v_cmpx_class_f64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:'EXEC, VCC = IEEE numeric class function specified in S1.u, performed on S0.d'),
(code:$D1720000;code3:       $0;enc:VOP3;name:'VOP3_invalid_185';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1740000;code3:       $0;enc:VOP3;name:'VOP3_invalid_186';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1760000;code3:       $0;enc:VOP3;name:'VOP3_invalid_187';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1780000;code3:       $0;enc:VOP3;name:'VOP3_invalid_188';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D17A0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_189';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D17C0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_190';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D17E0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_191';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1800000;code3:       $0;enc:VOP3;name:'v_cmp_f_u32';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1820000;code3:       $0;enc:VOP3;name:'v_cmp_lt_u32';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1840000;code3:       $0;enc:VOP3;name:'v_cmp_eq_u32';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1860000;code3:       $0;enc:VOP3;name:'v_cmp_le_u32';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1880000;code3:       $0;enc:VOP3;name:'v_cmp_gt_u32';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D18A0000;code3:       $0;enc:VOP3;name:'v_cmp_ne_u32';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D18C0000;code3:       $0;enc:VOP3;name:'v_cmp_ge_u32';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D18E0000;code3:       $0;enc:VOP3;name:'v_cmp_t_u32';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1900000;code3:       $0;enc:VOP3;name:'VOP3_invalid_200';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1920000;code3:       $0;enc:VOP3;name:'VOP3_invalid_201';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1940000;code3:       $0;enc:VOP3;name:'VOP3_invalid_202';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1960000;code3:       $0;enc:VOP3;name:'VOP3_invalid_203';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1980000;code3:       $0;enc:VOP3;name:'VOP3_invalid_204';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D19A0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_205';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D19C0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_206';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D19E0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_207';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1A00000;code3:       $0;enc:VOP3;name:'v_cmpx_f_u32';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1A20000;code3:       $0;enc:VOP3;name:'v_cmpx_lt_u32';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1A40000;code3:       $0;enc:VOP3;name:'v_cmpx_eq_u32';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1A60000;code3:       $0;enc:VOP3;name:'v_cmpx_le_u32';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1A80000;code3:       $0;enc:VOP3;name:'v_cmpx_gt_u32';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1AA0000;code3:       $0;enc:VOP3;name:'v_cmpx_ne_u32';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1AC0000;code3:       $0;enc:VOP3;name:'v_cmpx_ge_u32';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1AE0000;code3:       $0;enc:VOP3;name:'v_cmpx_t_u32';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1B00000;code3:       $0;enc:VOP3;name:'VOP3_invalid_216';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1B20000;code3:       $0;enc:VOP3;name:'VOP3_invalid_217';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1B40000;code3:       $0;enc:VOP3;name:'VOP3_invalid_218';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1B60000;code3:       $0;enc:VOP3;name:'VOP3_invalid_219';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1B80000;code3:       $0;enc:VOP3;name:'VOP3_invalid_220';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1BA0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_221';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1BC0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_222';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1BE0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_223';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1C00000;code3:       $0;enc:VOP3;name:'v_cmp_f_u64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1C20000;code3:       $0;enc:VOP3;name:'v_cmp_lt_u64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1C40000;code3:       $0;enc:VOP3;name:'v_cmp_eq_u64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1C60000;code3:       $0;enc:VOP3;name:'v_cmp_le_u64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1C80000;code3:       $0;enc:VOP3;name:'v_cmp_gt_u64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1CA0000;code3:       $0;enc:VOP3;name:'v_cmp_ne_u64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1CC0000;code3:       $0;enc:VOP3;name:'v_cmp_ge_u64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1CE0000;code3:       $0;enc:VOP3;name:'v_cmp_t_u64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1D00000;code3:       $0;enc:VOP3;name:'VOP3_invalid_232';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1D20000;code3:       $0;enc:VOP3;name:'VOP3_invalid_233';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1D40000;code3:       $0;enc:VOP3;name:'VOP3_invalid_234';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1D60000;code3:       $0;enc:VOP3;name:'VOP3_invalid_235';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1D80000;code3:       $0;enc:VOP3;name:'VOP3_invalid_236';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1DA0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_237';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1DC0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_238';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1DE0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_239';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1E00000;code3:       $0;enc:VOP3;name:'v_cmpx_f_u64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1E20000;code3:       $0;enc:VOP3;name:'v_cmpx_lt_u64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1E40000;code3:       $0;enc:VOP3;name:'v_cmpx_eq_u64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1E60000;code3:       $0;enc:VOP3;name:'v_cmpx_le_u64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1E80000;code3:       $0;enc:VOP3;name:'v_cmpx_gt_u64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1EA0000;code3:       $0;enc:VOP3;name:'v_cmpx_ne_u64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1EC0000;code3:       $0;enc:VOP3;name:'v_cmpx_ge_u64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1EE0000;code3:       $0;enc:VOP3;name:'v_cmpx_t_u64';pfmt:'s[0:1], s[0:1], s[0:1]';descr:''),
(code:$D1F00000;code3:       $0;enc:VOP3;name:'VOP3_invalid_248';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1F20000;code3:       $0;enc:VOP3;name:'VOP3_invalid_249';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1F40000;code3:       $0;enc:VOP3;name:'VOP3_invalid_250';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1F60000;code3:       $0;enc:VOP3;name:'VOP3_invalid_251';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1F80000;code3:       $0;enc:VOP3;name:'VOP3_invalid_252';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1FA0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_253';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1FC0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_254';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D1FE0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_255';pfmt:'s[0:1], s0, s0';descr:''),
(code:$D2000000;code3:       $0;enc:VOP3;name:'v_cndmask_b32';pfmt:'v0, s0, s0, s[0:1]';descr:'D.u = VCC[i] ? S1.u : S0.u (i = threadID in wave); VOP3: specify VCC as a scalar GPR in S2'),
(code:$D2060000;code3:       $0;enc:VOP3;name:'v_add_f32';pfmt:'v0, s0, s0 vop3';descr:'D.f = S0.f + S1.f'),
(code:$D2080000;code3:       $0;enc:VOP3;name:'v_sub_f32';pfmt:'v0, s0, s0 vop3';descr:'D.f = S0.f - S1.f. SQ translates to V_ADD'),
(code:$D20A0000;code3:       $0;enc:VOP3;name:'v_subrev_f32';pfmt:'v0, s0, s0 vop3';descr:'D.f = S1.f - S0.f. SQ translates to V_ADD'),
(code:$D20C0000;code3:       $0;enc:VOP3;name:'v_mac_legacy_f32';pfmt:'v0, s0, s0 vop3';descr:'D.f = S0.F * S1.f + D.f.  SQ translates to V_MAD_LEGACY_F32'),
(code:$D20E0000;code3:       $0;enc:VOP3;name:'v_mul_legacy_f32';pfmt:'v0, s0, s0 vop3';descr:'D.f = S0.f * S1.f (DX9 rules, 0.0*x = 0.0)'),
(code:$D2100000;code3:       $0;enc:VOP3;name:'v_mul_f32';pfmt:'v0, s0, s0 vop3';descr:'D.f = S0.f * S1.f'),
(code:$D2120000;code3:       $0;enc:VOP3;name:'v_mul_i32_i24';pfmt:'v0, s0, s0 vop3';descr:'D.i = S0.i[23:0] * S1.i[23:0]'),
(code:$D2140000;code3:       $0;enc:VOP3;name:'v_mul_hi_i32_i24';pfmt:'v0, s0, s0 vop3';descr:'D.i = (S0.i[23:0] * S1.i[23:0])>>32'),
(code:$D2160000;code3:       $0;enc:VOP3;name:'v_mul_u32_u24';pfmt:'v0, s0, s0 vop3';descr:'D.u = S0.u[23:0] * S1.u[23:0]'),
(code:$D2180000;code3:       $0;enc:VOP3;name:'v_mul_hi_u32_u24';pfmt:'v0, s0, s0 vop3';descr:'D.i = (S0.u[23:0] * S1.u[23:0])>>32'),
(code:$D21A0000;code3:       $0;enc:VOP3;name:'v_min_legacy_f32';pfmt:'v0, s0, s0 vop3';descr:'D.f = min(S0.f, S1.f) (DX9 rules for NaN)'),
(code:$D21C0000;code3:       $0;enc:VOP3;name:'v_max_legacy_f32';pfmt:'v0, s0, s0 vop3';descr:'D.f = max(S0.f, S1.f) (DX9 rules for NaN)'),
(code:$D21E0000;code3:       $0;enc:VOP3;name:'v_min_f32';pfmt:'v0, s0, s0 vop3';descr:'D.f = min(S0.f, S1.f)'),
(code:$D2200000;code3:       $0;enc:VOP3;name:'v_max_f32';pfmt:'v0, s0, s0 vop3';descr:'D.f = max(S0.f, S1.f)'),
(code:$D2220000;code3:       $0;enc:VOP3;name:'v_min_i32';pfmt:'v0, s0, s0 vop3';descr:'D.i = min(S0.i, S1.i)'),
(code:$D2240000;code3:       $0;enc:VOP3;name:'v_max_i32';pfmt:'v0, s0, s0 vop3';descr:'D.i = max(S0.i, S1.i)'),
(code:$D2260000;code3:       $0;enc:VOP3;name:'v_min_u32';pfmt:'v0, s0, s0 vop3';descr:'D.u = min(S0.u, S1.u)'),
(code:$D2280000;code3:       $0;enc:VOP3;name:'v_max_u32';pfmt:'v0, s0, s0 vop3';descr:'D.u = max(S0.u, S1.u)'),
(code:$D22A0000;code3:       $0;enc:VOP3;name:'v_lshr_b32';pfmt:'v0, s0, s0 vop3';descr:'D.u = S0.u >> S1.u[4:0]'),
(code:$D22C0000;code3:       $0;enc:VOP3;name:'v_lshrrev_b32';pfmt:'v0, s0, s0 vop3';descr:'D.u = S1.u >> S0.u[4:0]. SQ translates to V_LSHR_B32'),
(code:$D22E0000;code3:       $0;enc:VOP3;name:'v_ashr_i32';pfmt:'v0, s0, s0 vop3';descr:'D.i = S0.i >> S1.i[4:0]'),
(code:$D2300000;code3:       $0;enc:VOP3;name:'v_ashrrev_i32';pfmt:'v0, s0, s0 vop3';descr:'D.i = S1.i >> S0.i[4:0]. SQ translates to V_ASHR_I32'),
(code:$D2320000;code3:       $0;enc:VOP3;name:'v_lshl_b32';pfmt:'v0, s0, s0 vop3';descr:'D.u = S0.u << S1.u[4:0]'),
(code:$D2340000;code3:       $0;enc:VOP3;name:'v_lshlrev_b32';pfmt:'v0, s0, s0 vop3';descr:'D.u = S1.u << S0.u[4:0]. SQ translates to V_LSHL_B32'),
(code:$D2360000;code3:       $0;enc:VOP3;name:'v_and_b32';pfmt:'v0, s0, s0 vop3';descr:'D.u = S0.u & S1.u'),
(code:$D2380000;code3:       $0;enc:VOP3;name:'v_or_b32';pfmt:'v0, s0, s0 vop3';descr:'D.u = S0.u | S1.u'),
(code:$D23A0000;code3:       $0;enc:VOP3;name:'v_xor_b32';pfmt:'v0, s0, s0 vop3';descr:'D.u = S0.u ^ S1.u'),
(code:$D23C0000;code3:       $0;enc:VOP3;name:'v_bfm_b32';pfmt:'v0, s0, s0 vop3';descr:'D.u  = ((1<<S0.u[4:0])-1) << S1.u[4:0]; S0=bitfield_width, S1=bitfield_offset'),
(code:$D23E0000;code3:       $0;enc:VOP3;name:'v_mac_f32';pfmt:'v0, s0, s0 vop3';descr:'D.f = S0.f * S1.f + D.f. SQ translates to V_MAD_F32'),
(code:$D2440000;code3:       $0;enc:VOP3;name:'v_bcnt_u32_b32';pfmt:'v0, s0, s0 vop3';descr:'D.u = countbits(S0.u) + S1.u; TEMP ???'),
(code:$D2460000;code3:       $0;enc:VOP3;name:'v_mbcnt_lo_u32_b32';pfmt:'v0, s0, s0 vop3';descr:''),
(code:$D2480000;code3:       $0;enc:VOP3;name:'v_mbcnt_hi_u32_b32';pfmt:'v0, s0, s0 vop3';descr:''),
(code:$D24A0000;code3:       $0;enc:VOP3;name:'v_add_i32';pfmt:'v0, s[0:1], s0, s0';descr:'D.u = S0.u + S1.u; VCC=carry-out (VOP3:sgpr=carry-out)'),
(code:$D24C0000;code3:       $0;enc:VOP3;name:'v_sub_i32';pfmt:'v0, s[0:1], s0, s0';descr:'D.u = S0.u - S1.u; VCC=carry-out (VOP3:sgpr=carry-out).'),
(code:$D24E0000;code3:       $0;enc:VOP3;name:'v_subrev_i32';pfmt:'v0, s[0:1], s0, s0';descr:'D.u = S1.u - S0.u; VCC=carry-out (VOP3:sgpr=carry-out). SQ translates to V_SUB_I32'),
(code:$D2500000;code3:       $0;enc:VOP3;name:'v_addc_u32';pfmt:'v0, s[0:1], s0, s0, s[0:1]';descr:'D.u = S0.u + S1.u + VCC; VCC=carry-out (VOP3:sgpr=carry-out, S2.u=carry-in)'),
(code:$D2520000;code3:       $0;enc:VOP3;name:'v_subb_u32';pfmt:'v0, s[0:1], s0, s0, s[0:1]';descr:'D.u = S0.u - S1.u - VCC; VCC=carry-out (VOP3:sgpr=carry-out, S2.u=carry-in)'),
(code:$D2540000;code3:       $0;enc:VOP3;name:'v_subbrev_u32';pfmt:'v0, s[0:1], s0, s0, s[0:1]';descr:'D.u = S1.u - S0.u - VCC; VCC=carry-out (VOP3:sgpr=carry-out, S2.u=carry-in). SQ translates to V_SUBB_U32'),
(code:$D2560000;code3:       $0;enc:VOP3;name:'v_ldexp_f32';pfmt:'v0, s0, s0';descr:'D.d = pow(S0.f, S1.i)'),
(code:$D2580000;code3:       $0;enc:VOP3;name:'v_cvt_pkaccum_u8_f32';pfmt:'v0, s0, s0';descr:'f32->u8(s0.f), pack into byte(s1.u), of dst. SQ translates to V_CVT_PK_U8_F32'),
(code:$D25A0000;code3:       $0;enc:VOP3;name:'v_cvt_pknorm_i16_f32';pfmt:'v0, s0, s0';descr:'D = {(snorm)S1.f, (snorm)S0.f}'),
(code:$D25C0000;code3:       $0;enc:VOP3;name:'v_cvt_pknorm_u16_f32';pfmt:'v0, s0, s0';descr:'D = {(unorm)S1.f, (unorm)S0.f}'),
(code:$D25E0000;code3:       $0;enc:VOP3;name:'v_cvt_pkrtz_f16_f32';pfmt:'v0, s0, s0';descr:'D = {flt32_to_flt16(S1.f),flt32_to_flt16(S0.f)}, with round-toward-zero.'),
(code:$D2600000;code3:       $0;enc:VOP3;name:'v_cvt_pk_u16_u32';pfmt:'v0, s0, s0';descr:'D = {(u32->u16)S1.u, (u32->u16)S0.u}'),
(code:$D2620000;code3:       $0;enc:VOP3;name:'v_cvt_pk_i16_i32';pfmt:'v0, s0, s0';descr:'D = {(i32->i16)S1.i, (i32->i16)S0.i}'),
(code:$D2640000;code3:       $0;enc:VOP3;name:'VOP3_invalid_50';pfmt:'v0, s0, s0';descr:''),
(code:$D2660000;code3:       $0;enc:VOP3;name:'VOP3_invalid_51';pfmt:'v0, s0, s0';descr:''),
(code:$D2680000;code3:       $0;enc:VOP3;name:'VOP3_invalid_52';pfmt:'v0, s0, s0';descr:''),
(code:$D26A0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_53';pfmt:'v0, s0, s0';descr:''),
(code:$D26C0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_54';pfmt:'v0, s0, s0';descr:''),
(code:$D26E0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_55';pfmt:'v0, s0, s0';descr:''),
(code:$D2700000;code3:       $0;enc:VOP3;name:'VOP3_invalid_56';pfmt:'v0, s0, s0';descr:''),
(code:$D2720000;code3:       $0;enc:VOP3;name:'VOP3_invalid_57';pfmt:'v0, s0, s0';descr:''),
(code:$D2740000;code3:       $0;enc:VOP3;name:'VOP3_invalid_58';pfmt:'v0, s0, s0';descr:''),
(code:$D2760000;code3:       $0;enc:VOP3;name:'VOP3_invalid_59';pfmt:'v0, s0, s0';descr:''),
(code:$D2780000;code3:       $0;enc:VOP3;name:'VOP3_invalid_60';pfmt:'v0, s0, s0';descr:''),
(code:$D27A0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_61';pfmt:'v0, s0, s0';descr:''),
(code:$D27C0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_62';pfmt:'v0, s0, s0';descr:''),
(code:$D27E0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_63';pfmt:'v0, s0, s0';descr:''),
(code:$D2800000;code3:       $0;enc:VOP3;name:'v_mad_legacy_f32';pfmt:'v0, s0, s0, s0';descr:'D.f = S0.f * S1.f + S2.f (DX9 rules, 0.0*x = 0.0)'),
(code:$D2820000;code3:       $0;enc:VOP3;name:'v_mad_f32';pfmt:'v0, s0, s0, s0';descr:'D.f = S0.f * S1.f + S2.f'),
(code:$D2840000;code3:       $0;enc:VOP3;name:'v_mad_i32_i24';pfmt:'v0, s0, s0, s0';descr:'D.i = S0.i * S1.i + S2.i'),
(code:$D2860000;code3:       $0;enc:VOP3;name:'v_mad_u32_u24';pfmt:'v0, s0, s0, s0';descr:'D.u = S0.u * S1.u + S2.u'),
(code:$D2880000;code3:       $0;enc:VOP3;name:'v_cubeid_f32';pfmt:'v0, s0, s0, s0';descr:'Rm.w <- Rn,x, Rn,y, Rn.z'),
(code:$D28A0000;code3:       $0;enc:VOP3;name:'v_cubesc_f32';pfmt:'v0, s0, s0, s0';descr:'Rm.y <- Rn,x, Rn,y, Rn.z'),
(code:$D28C0000;code3:       $0;enc:VOP3;name:'v_cubetc_f32';pfmt:'v0, s0, s0, s0';descr:'Rm.x <- Rn,x, Rn,y, Rn.z'),
(code:$D28E0000;code3:       $0;enc:VOP3;name:'v_cubema_f32';pfmt:'v0, s0, s0, s0';descr:'Rm.z <- Rn,x, Rn,y, Rn.z'),
(code:$D2900000;code3:       $0;enc:VOP3;name:'v_bfe_u32';pfmt:'v0, s0, s0, s0';descr:'D.u = (S0.u>>S1.u[4:0]) & ((1<<S2.u[4:0])-1); bitfield extract, S0=data, S1=field_offset, S2=field_width'),
(code:$D2920000;code3:       $0;enc:VOP3;name:'v_bfe_i32';pfmt:'v0, s0, s0, s0';descr:'D.i = (S0.i>>S1.u[4:0]) & ((1<<S2.u[4:0])-1); bitfield extract, S0=data, S1=field_offset, S2=field_width'),
(code:$D2940000;code3:       $0;enc:VOP3;name:'v_bfi_b32';pfmt:'v0, s0, s0, s0';descr:'D.u = (S0.u & S1.u) | (~S0.u & S2.u); bitfield insert'),
(code:$D2960000;code3:       $0;enc:VOP3;name:'v_fma_f32';pfmt:'v0, s0, s0, s0';descr:''),
(code:$D2980000;code3:       $0;enc:VOP3;name:'v_fma_f64';pfmt:'v[0:1], s[0:1], s[0:1], s[0:1]';descr:'D.d = S0.d * S1.d + S2.d'),
(code:$D29A0000;code3:       $0;enc:VOP3;name:'v_lerp_u8';pfmt:'v0, s0, s0, s0';descr:'pixel average on packed unsigned bytes; S0, S1 are data, S2 is round mode. TEMP ???'),
(code:$D29C0000;code3:       $0;enc:VOP3;name:'v_alignbit_b32';pfmt:'v0, s0, s0, s0';descr:'D.u = ({S0,S1} >> S2.u[4:0]) & 0xffffffff'),
(code:$D29E0000;code3:       $0;enc:VOP3;name:'v_alignbyte_b32';pfmt:'v0, s0, s0, s0';descr:'D.u = ({S0,S1} >> (8*S2.u[4:0])) & 0xffffffff'),
(code:$D2A00000;code3:       $0;enc:VOP3;name:'v_mullit_f32';pfmt:'v0, s0, s0, s0';descr:'D.f = S0.f * S1.f, replicate result into 4 components (0.0 * x = 0.0; special INF, NaN, overflow rules)'),
(code:$D2A20000;code3:       $0;enc:VOP3;name:'v_min3_f32';pfmt:'v0, s0, s0, s0';descr:'D.f = min(S0.f, S1.f, S2.f)'),
(code:$D2A40000;code3:       $0;enc:VOP3;name:'v_min3_i32';pfmt:'v0, s0, s0, s0';descr:'D.i = min(S0.i, S1.i, S2.i)'),
(code:$D2A60000;code3:       $0;enc:VOP3;name:'v_min3_u32';pfmt:'v0, s0, s0, s0';descr:'D.u = min(S0.u, S1.u, S2.u)'),
(code:$D2A80000;code3:       $0;enc:VOP3;name:'v_max3_f32';pfmt:'v0, s0, s0, s0';descr:'D.f = max(S0.f, S1.f, S2.f)'),
(code:$D2AA0000;code3:       $0;enc:VOP3;name:'v_max3_i32';pfmt:'v0, s0, s0, s0';descr:'D.i = max(S0.i, S1.i, S2.i)'),
(code:$D2AC0000;code3:       $0;enc:VOP3;name:'v_max3_u32';pfmt:'v0, s0, s0, s0';descr:'D.u = max(S0.u, S1.u, S2.u)'),
(code:$D2AE0000;code3:       $0;enc:VOP3;name:'v_med3_f32';pfmt:'v0, s0, s0, s0';descr:'D.f = median(S0.f, S1.f, S2.f)'),
(code:$D2B00000;code3:       $0;enc:VOP3;name:'v_med3_i32';pfmt:'v0, s0, s0, s0';descr:'D.i = median(S0.i, S1.i, S2.i)'),
(code:$D2B20000;code3:       $0;enc:VOP3;name:'v_med3_u32';pfmt:'v0, s0, s0, s0';descr:'D.u = median(S0.u, S1.u, S2.u)'),
(code:$D2B40000;code3:       $0;enc:VOP3;name:'v_sad_u8';pfmt:'v0, s0, s0, s0';descr:'D.u = Byte SAD with accum_lo(S0.u, S1.u, S2.u)'),
(code:$D2B60000;code3:       $0;enc:VOP3;name:'v_sad_hi_u8';pfmt:'v0, s0, s0, s0';descr:'D.u = Byte SAD with accum_hi(S0.u, S1.u, S2.u)'),
(code:$D2B80000;code3:       $0;enc:VOP3;name:'v_sad_u16';pfmt:'v0, s0, s0, s0';descr:'D.u = Word SAD with accum(S0.u, S1.u, S2.u)'),
(code:$D2BA0000;code3:       $0;enc:VOP3;name:'v_sad_u32';pfmt:'v0, s0, s0, s0';descr:'D.u = Dword SAD with accum(S0.u, S1.u, S2.u)'),
(code:$D2BC0000;code3:       $0;enc:VOP3;name:'v_cvt_pk_u8_f32';pfmt:'v0, s0, s0, s0';descr:'f32->u8(s0.f), pack into byte(s1.u), of dword(s2)'),
(code:$D2BE0000;code3:       $0;enc:VOP3;name:'v_div_fixup_f32';pfmt:'v0, s0, s0, s0';descr:'D.f = Special case divide fixup and flags(s0.f = Quotient, s1.f = Denominator, s2.f = Numerator)'),
(code:$D2C00000;code3:       $0;enc:VOP3;name:'v_div_fixup_f64';pfmt:'v[0:1], s[0:1], s[0:1], s[0:1]';descr:'D.d = Special case divide fixup and flags(s0.d = Quotient, s1.d = Denominator, s2.d = Numerator)'),
(code:$D2C20000;code3:       $0;enc:VOP3;name:'v_lshl_b64';pfmt:'v[0:1], s[0:1], s0';descr:'D = S0.u << S1.u[4:0]'),
(code:$D2C40000;code3:       $0;enc:VOP3;name:'v_lshr_b64';pfmt:'v[0:1], s[0:1], s0';descr:'D = S0.u >> S1.u[4:0]'),
(code:$D2C60000;code3:       $0;enc:VOP3;name:'v_ashr_i64';pfmt:'v[0:1], s[0:1], s0';descr:''),
(code:$D2C80000;code3:       $0;enc:VOP3;name:'v_add_f64';pfmt:'v[0:1], s[0:1], s[0:1]';descr:'D.d = S0.d + S1.d'),
(code:$D2CA0000;code3:       $0;enc:VOP3;name:'v_mul_f64';pfmt:'v[0:1], s[0:1], s[0:1]';descr:'D.d = S0.d * S1.d'),
(code:$D2CC0000;code3:       $0;enc:VOP3;name:'v_min_f64';pfmt:'v[0:1], s[0:1], s[0:1]';descr:'D.d = min(S0.d, S1.d)'),
(code:$D2CE0000;code3:       $0;enc:VOP3;name:'v_max_f64';pfmt:'v[0:1], s[0:1], s[0:1]';descr:'D.d = max(S0.d, S1.d)'),
(code:$D2D00000;code3:       $0;enc:VOP3;name:'v_ldexp_f64';pfmt:'v[0:1], s[0:1], s0';descr:'D.d = pow(S0.d, S1.i[31:0])'),
(code:$D2D20000;code3:       $0;enc:VOP3;name:'v_mul_lo_u32';pfmt:'v0, s0, s0';descr:'D.u = S0.u * S1.u'),
(code:$D2D40000;code3:       $0;enc:VOP3;name:'v_mul_hi_u32';pfmt:'v0, s0, s0';descr:'D.u = (S0.u * S1.u)>>32'),
(code:$D2D60000;code3:       $0;enc:VOP3;name:'v_mul_lo_i32';pfmt:'v0, s0, s0';descr:'D.i = S0.i * S1.i'),
(code:$D2D80000;code3:       $0;enc:VOP3;name:'v_mul_hi_i32';pfmt:'v0, s0, s0';descr:'D.i = (S0.i * S1.i)>>32'),
(code:$D2DA0000;code3:       $0;enc:VOP3;name:'v_div_scale_f32';pfmt:'v0, s[0:1], s0, s0, s0';descr:'D.f = Special case divide preop and flags(s0.f = Quotient, s1.f = Denominator, s2.f = Numerator) s0 must equal s1 or s2'),
(code:$D2DC0000;code3:       $0;enc:VOP3;name:'v_div_scale_f64';pfmt:'v[0:1], s[0:1], s[0:1], s[0:1], s[0:1]';descr:'D.d = Special case divide preop and flags(s0.d = Quotient, s1.d = Denominator, s2.d = Numerator) s0 must equal s1 or s2'),
(code:$D2DE0000;code3:       $0;enc:VOP3;name:'v_div_fmas_f32';pfmt:'v0, s0, s0, s0';descr:'D.f = Special case divide FMA with scale and flags(s0.f = Quotient, s1.f = Denominator, s2.f = Numerator)'),
(code:$D2E00000;code3:       $0;enc:VOP3;name:'v_div_fmas_f64';pfmt:'v[0:1], s[0:1], s[0:1], s[0:1]';descr:'D.d = Special case divide FMA with scale and flags(s0.d = Quotient, s1.d = Denominator, s2.d = Numerator)'),
(code:$D2E20000;code3:       $0;enc:VOP3;name:'v_msad_u8';pfmt:'v0, s0, s0, s0';descr:'D.u = Masked Byte SAD with accum_lo(S0.u, S1.u, S2.u)'),
(code:$D2E40000;code3:       $0;enc:VOP3;name:'v_qsad_u8';pfmt:'v[0:1], s[0:1], s0, s[0:1]';descr:'D.u = Quad-Byte SAD with accum_lo/hiu(S0.u[63:0], S1.u[31:0], S2.u[63:0])'),
(code:$D2E60000;code3:       $0;enc:VOP3;name:'v_mqsad_u8';pfmt:'v[0:1], s[0:1], s0, s[0:1]';descr:'D.u = Masked Quad-Byte SAD with accum_lo/hi(S0.u[63:0], S1.u[31:0], S2.u[63:0])'),
(code:$D2E80000;code3:       $0;enc:VOP3;name:'v_trig_preop_f64';pfmt:'v[0:1], s[0:1], s0';descr:'D.d = Look Up 2/PI (S0.d) with segment select S1.u[4:0]'),
(code:$D2EA0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_373';pfmt:'v0, s0, s0, s0';descr:''),
(code:$D2EC0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_374';pfmt:'v0, s0, s0, s0';descr:''),
(code:$D2EE0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_375';pfmt:'v0, s0, s0, s0';descr:''),
(code:$D2F00000;code3:       $0;enc:VOP3;name:'VOP3_invalid_376';pfmt:'v0, s0, s0, s0';descr:''),
(code:$D2F20000;code3:       $0;enc:VOP3;name:'VOP3_invalid_377';pfmt:'v0, s0, s0, s0';descr:''),
(code:$D2F40000;code3:       $0;enc:VOP3;name:'VOP3_invalid_378';pfmt:'v0, s0, s0, s0';descr:''),
(code:$D2F60000;code3:       $0;enc:VOP3;name:'VOP3_invalid_379';pfmt:'v0, s0, s0, s0';descr:''),
(code:$D2F80000;code3:       $0;enc:VOP3;name:'VOP3_invalid_380';pfmt:'v0, s0, s0, s0';descr:''),
(code:$D2FA0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_381';pfmt:'v0, s0, s0, s0';descr:''),
(code:$D2FC0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_382';pfmt:'v0, s0, s0, s0';descr:''),
(code:$D2FE0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_383';pfmt:'v0, s0, s0, s0';descr:''),
(code:$D3000000;code3:       $0;enc:VOP3;name:'v_nop';pfmt:'vop3';descr:'do nothing'),
(code:$D3020000;code3:       $0;enc:VOP3;name:'v_mov_b32';pfmt:'v0, s0 vop3';descr:''),
(code:$D3060000;code3:       $0;enc:VOP3;name:'v_cvt_i32_f64';pfmt:'v[0:1], s[0:1] vop3';descr:'D.i = (int)S0.d'),
(code:$D3080000;code3:       $0;enc:VOP3;name:'v_cvt_f64_i32';pfmt:'v[0:1], s0 vop3';descr:'D.f = (float)S0.i'),
(code:$D30A0000;code3:       $0;enc:VOP3;name:'v_cvt_f32_i32';pfmt:'v0, s0 vop3';descr:''),
(code:$D30C0000;code3:       $0;enc:VOP3;name:'v_cvt_f32_u32';pfmt:'v0, s0 vop3';descr:'D.f = (float)S0.u'),
(code:$D30E0000;code3:       $0;enc:VOP3;name:'v_cvt_u32_f32';pfmt:'v0, s0 vop3';descr:'D.u = (unsigned)S0.f'),
(code:$D3100000;code3:       $0;enc:VOP3;name:'v_cvt_i32_f32';pfmt:'v0, s0 vop3';descr:'D.i = (int)S0.f'),
(code:$D3120000;code3:       $0;enc:VOP3;name:'v_mov_fed_b32';pfmt:'v0, s0 vop3';descr:'D.u = S0.u, introduce edc double error upon write to dest vgpr without causing an exception'),
(code:$D3140000;code3:       $0;enc:VOP3;name:'v_cvt_f16_f32';pfmt:'v0, s0 vop3';descr:'D.f16 = flt32_to_flt16(S0.f)'),
(code:$D3160000;code3:       $0;enc:VOP3;name:'v_cvt_f32_f16';pfmt:'v0, s0 vop3';descr:'D.f = flt16_to_flt32(S0.f16)'),
(code:$D3180000;code3:       $0;enc:VOP3;name:'v_cvt_rpi_i32_f32';pfmt:'v0, s0 vop3';descr:'D.i = (int)floor(S0.f + 0.5)'),
(code:$D31A0000;code3:       $0;enc:VOP3;name:'v_cvt_flr_i32_f32';pfmt:'v0, s0 vop3';descr:'D.i = (int)floor(S0.f)'),
(code:$D31C0000;code3:       $0;enc:VOP3;name:'v_cvt_off_f32_i4';pfmt:'v0, s0 vop3';descr:'4-bit signed int to 32-bit float. For interpolation in shader.'),
(code:$D31E0000;code3:       $0;enc:VOP3;name:'v_cvt_f32_f64';pfmt:'v0, s[0:1] vop3';descr:'D.f = (float)S0.d'),
(code:$D3200000;code3:       $0;enc:VOP3;name:'v_cvt_f64_f32';pfmt:'v[0:1], s0 vop3';descr:'D.d = (double)S0.f'),
(code:$D3220000;code3:       $0;enc:VOP3;name:'v_cvt_f32_ubyte0';pfmt:'v0, s0 vop3';descr:'D.f = UINT2FLT(S0.u[7:0])'),
(code:$D3240000;code3:       $0;enc:VOP3;name:'v_cvt_f32_ubyte1';pfmt:'v0, s0 vop3';descr:'D.f = UINT2FLT(S0.u[15:8])'),
(code:$D3260000;code3:       $0;enc:VOP3;name:'v_cvt_f32_ubyte2';pfmt:'v0, s0 vop3';descr:'D.f = UINT2FLT(S0.u[23:16])'),
(code:$D3280000;code3:       $0;enc:VOP3;name:'v_cvt_f32_ubyte3';pfmt:'v0, s0 vop3';descr:'D.f = UINT2FLT(S0.u[31:24])'),
(code:$D32A0000;code3:       $0;enc:VOP3;name:'v_cvt_u32_f64';pfmt:'v[0:1], s[0:1] vop3';descr:'D.u = (uint)S0.d'),
(code:$D32C0000;code3:       $0;enc:VOP3;name:'v_cvt_f64_u32';pfmt:'v[0:1], s[0:1] vop3';descr:'D.d = (double)S0.u'),
(code:$D32E0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_23';pfmt:'v0, s0 vop3';descr:''),
(code:$D3300000;code3:       $0;enc:VOP3;name:'VOP3_invalid_24';pfmt:'v0, s0 vop3';descr:''),
(code:$D3320000;code3:       $0;enc:VOP3;name:'VOP3_invalid_25';pfmt:'v0, s0 vop3';descr:''),
(code:$D3340000;code3:       $0;enc:VOP3;name:'VOP3_invalid_26';pfmt:'v0, s0 vop3';descr:''),
(code:$D3360000;code3:       $0;enc:VOP3;name:'VOP3_invalid_27';pfmt:'v0, s0 vop3';descr:''),
(code:$D3380000;code3:       $0;enc:VOP3;name:'VOP3_invalid_28';pfmt:'v0, s0 vop3';descr:''),
(code:$D33A0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_29';pfmt:'v0, s0 vop3';descr:''),
(code:$D33C0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_30';pfmt:'v0, s0 vop3';descr:''),
(code:$D33E0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_31';pfmt:'v0, s0 vop3';descr:''),
(code:$D3400000;code3:       $0;enc:VOP3;name:'v_fract_f32';pfmt:'v0, s0 vop3';descr:'D.f = S0.f - floor(S0.f)'),
(code:$D3420000;code3:       $0;enc:VOP3;name:'v_trunc_f32';pfmt:'v0, s0 vop3';descr:'D.f = trunc(S0.f), return integer part of S0'),
(code:$D3440000;code3:       $0;enc:VOP3;name:'v_ceil_f32';pfmt:'v0, s0 vop3';descr:'D.f = ceil(S0.f).  Implemented as: D.f = trunc(S0.f); if (S0 > 0.0 && S0 != D), D += 1.0'),
(code:$D3460000;code3:       $0;enc:VOP3;name:'v_rndne_f32';pfmt:'v0, s0 vop3';descr:'D.f = round_nearest_even(S0.f)'),
(code:$D3480000;code3:       $0;enc:VOP3;name:'v_floor_f32';pfmt:'v0, s0 vop3';descr:'D.f = trunc(S0); if ((S0 < 0.0) && (S0 != D)) D += -1.0'),
(code:$D34A0000;code3:       $0;enc:VOP3;name:'v_exp_f32';pfmt:'v0, s0 vop3';descr:'D.f = pow(2.0, S0.f)'),
(code:$D34C0000;code3:       $0;enc:VOP3;name:'v_log_clamp_f32';pfmt:'v0, s0 vop3';descr:'D.f = log2(S0.f), clamp -infinity to -max_float'),
(code:$D34E0000;code3:       $0;enc:VOP3;name:'v_log_f32';pfmt:'v0, s0 vop3';descr:'D.f = log2(S0.f)'),
(code:$D3500000;code3:       $0;enc:VOP3;name:'v_rcp_clamp_f32';pfmt:'v0, s0 vop3';descr:'D.f = 1.0 / S0.f, result clamped to +-max_float'),
(code:$D3520000;code3:       $0;enc:VOP3;name:'v_rcp_legacy_f32';pfmt:'v0, s0 vop3';descr:'D.f = 1.0 / S0.f, +-infinity result clamped to +-0.0'),
(code:$D3540000;code3:       $0;enc:VOP3;name:'v_rcp_f32';pfmt:'v0, s0 vop3';descr:'D.f = 1.0 / S0.f'),
(code:$D3560000;code3:       $0;enc:VOP3;name:'v_rcp_iflag_f32';pfmt:'v0, s0 vop3';descr:'D.f = 1.0 / S0.f, only integer div_by_zero flag can be raised'),
(code:$D3580000;code3:       $0;enc:VOP3;name:'v_rsq_clamp_f32';pfmt:'v0, s0 vop3';descr:'D.f = 1.0 / sqrt(S0.f), result clamped to +-max_float'),
(code:$D35A0000;code3:       $0;enc:VOP3;name:'v_rsq_legacy_f32';pfmt:'v0, s0 vop3';descr:'D.f = 1.0 / sqrt(S0.f)'),
(code:$D35C0000;code3:       $0;enc:VOP3;name:'v_rsq_f32';pfmt:'v0, s0 vop3';descr:''),
(code:$D35E0000;code3:       $0;enc:VOP3;name:'v_rcp_f64';pfmt:'v[0:1], s[0:1] vop3';descr:'D.d = 1.0 / (S0.d)'),
(code:$D3600000;code3:       $0;enc:VOP3;name:'v_rcp_clamp_f64';pfmt:'v[0:1], s[0:1] vop3';descr:'D.f = 1.0 / (S0.f), result clamped to +-max_float'),
(code:$D3620000;code3:       $0;enc:VOP3;name:'v_rsq_f64';pfmt:'v[0:1], s[0:1] vop3';descr:''),
(code:$D3640000;code3:       $0;enc:VOP3;name:'v_rsq_clamp_f64';pfmt:'v[0:1], s[0:1] vop3';descr:'D.d = 1.0 / sqrt(S0.d), result clamped to +-max_float'),
(code:$D3660000;code3:       $0;enc:VOP3;name:'v_sqrt_f32';pfmt:'v0, s0 vop3';descr:'D.f = sqrt(S0.f)'),
(code:$D3680000;code3:       $0;enc:VOP3;name:'v_sqrt_f64';pfmt:'v[0:1], s[0:1] vop3';descr:'D.d = sqrt(S0.d)'),
(code:$D36A0000;code3:       $0;enc:VOP3;name:'v_sin_f32';pfmt:'v0, s0 vop3';descr:'D.f = sin(S0.f)'),
(code:$D36C0000;code3:       $0;enc:VOP3;name:'v_cos_f32';pfmt:'v0, s0 vop3';descr:'D.f = cos(S0.f)'),
(code:$D36E0000;code3:       $0;enc:VOP3;name:'v_not_b32';pfmt:'v0, s0 vop3';descr:'D.u = ~S0.u'),
(code:$D3700000;code3:       $0;enc:VOP3;name:'v_bfrev_b32';pfmt:'v0, s0 vop3';descr:'D.u[31:0] = S0.u[0:31], bitfield reverse'),
(code:$D3720000;code3:       $0;enc:VOP3;name:'v_ffbh_u32';pfmt:'v0, s0 vop3';descr:'D.u = position of first 1 in S0 from MSB; D=0xffffffff if S0==0'),
(code:$D3740000;code3:       $0;enc:VOP3;name:'v_ffbl_b32';pfmt:'v0, s0 vop3';descr:'D.u = position of first 1 in S0 from LSB; D=0xffffffff if S0==0'),
(code:$D3760000;code3:       $0;enc:VOP3;name:'v_ffbh_i32';pfmt:'v0, s0 vop3';descr:'D.u = position of first bit different from sign bit in S0 from MSB; D=0xffffffff if S0==0 or 0xffffffff'),
(code:$D3780000;code3:       $0;enc:VOP3;name:'v_frexp_exp_i32_f64';pfmt:'v[0:1], s[0:1] vop3';descr:'xxx'),
(code:$D37A0000;code3:       $0;enc:VOP3;name:'v_frexp_mant_f64';pfmt:'v[0:1], s[0:1] vop3';descr:''),
(code:$D37C0000;code3:       $0;enc:VOP3;name:'v_fract_f64';pfmt:'v[0:1], s[0:1] vop3';descr:''),
(code:$D37E0000;code3:       $0;enc:VOP3;name:'v_frexp_exp_i32_f32';pfmt:'v0, s0 vop3';descr:''),
(code:$D3800000;code3:       $0;enc:VOP3;name:'v_frexp_mant_f32';pfmt:'v0, s0 vop3';descr:''),
(code:$D3820000;code3:       $0;enc:VOP3;name:'v_clrexcp';pfmt:'vop3';descr:'Clear wave''s exception state in SIMD(SP)'),
(code:$D3840000;code3:       $0;enc:VOP3;name:'v_movreld_b32';pfmt:'v0, s0 vop3';descr:'VGPR[D.u + M0.u] = VGPR[S0.u]  SQ translates to V_MOV_B32'),
(code:$D3860000;code3:       $0;enc:VOP3;name:'v_movrels_b32';pfmt:'v0, s0 vop3';descr:'VGPR[D.u] = VGPR[S0.u + M0.u]  SQ translates to V_MOV_B32'),
(code:$D3880000;code3:       $0;enc:VOP3;name:'v_movrelsd_b32';pfmt:'v0, s0 vop3';descr:'VGPR[D.u + M0.u] = VGPR[S0.u + M0.u]  SQ translates to V_MOV_B32'),
(code:$D38A0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_69';pfmt:'v0, s0 vop3';descr:''),
(code:$D38C0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_70';pfmt:'v0, s0 vop3';descr:''),
(code:$D38E0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_71';pfmt:'v0, s0 vop3';descr:''),
(code:$D3900000;code3:       $0;enc:VOP3;name:'VOP3_invalid_72';pfmt:'v0, s0 vop3';descr:''),
(code:$D3920000;code3:       $0;enc:VOP3;name:'VOP3_invalid_73';pfmt:'v0, s0 vop3';descr:''),
(code:$D3940000;code3:       $0;enc:VOP3;name:'VOP3_invalid_74';pfmt:'v0, s0 vop3';descr:''),
(code:$D3960000;code3:       $0;enc:VOP3;name:'VOP3_invalid_75';pfmt:'v0, s0 vop3';descr:''),
(code:$D3980000;code3:       $0;enc:VOP3;name:'VOP3_invalid_76';pfmt:'v0, s0 vop3';descr:''),
(code:$D39A0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_77';pfmt:'v0, s0 vop3';descr:''),
(code:$D39C0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_78';pfmt:'v0, s0 vop3';descr:''),
(code:$D39E0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_79';pfmt:'v0, s0 vop3';descr:''),
(code:$D3A00000;code3:       $0;enc:VOP3;name:'VOP3_invalid_80';pfmt:'v0, s0 vop3';descr:''),
(code:$D3A20000;code3:       $0;enc:VOP3;name:'VOP3_invalid_81';pfmt:'v0, s0 vop3';descr:''),
(code:$D3A40000;code3:       $0;enc:VOP3;name:'VOP3_invalid_82';pfmt:'v0, s0 vop3';descr:''),
(code:$D3A60000;code3:       $0;enc:VOP3;name:'VOP3_invalid_83';pfmt:'v0, s0 vop3';descr:''),
(code:$D3A80000;code3:       $0;enc:VOP3;name:'VOP3_invalid_84';pfmt:'v0, s0 vop3';descr:''),
(code:$D3AA0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_85';pfmt:'v0, s0 vop3';descr:''),
(code:$D3AC0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_86';pfmt:'v0, s0 vop3';descr:''),
(code:$D3AE0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_87';pfmt:'v0, s0 vop3';descr:''),
(code:$D3B00000;code3:       $0;enc:VOP3;name:'VOP3_invalid_88';pfmt:'v0, s0 vop3';descr:''),
(code:$D3B20000;code3:       $0;enc:VOP3;name:'VOP3_invalid_89';pfmt:'v0, s0 vop3';descr:''),
(code:$D3B40000;code3:       $0;enc:VOP3;name:'VOP3_invalid_90';pfmt:'v0, s0 vop3';descr:''),
(code:$D3B60000;code3:       $0;enc:VOP3;name:'VOP3_invalid_91';pfmt:'v0, s0 vop3';descr:''),
(code:$D3B80000;code3:       $0;enc:VOP3;name:'VOP3_invalid_92';pfmt:'v0, s0 vop3';descr:''),
(code:$D3BA0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_93';pfmt:'v0, s0 vop3';descr:''),
(code:$D3BC0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_94';pfmt:'v0, s0 vop3';descr:''),
(code:$D3BE0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_95';pfmt:'v0, s0 vop3';descr:''),
(code:$D3C00000;code3:       $0;enc:VOP3;name:'VOP3_invalid_96';pfmt:'v0, s0 vop3';descr:''),
(code:$D3C20000;code3:       $0;enc:VOP3;name:'VOP3_invalid_97';pfmt:'v0, s0 vop3';descr:''),
(code:$D3C40000;code3:       $0;enc:VOP3;name:'VOP3_invalid_98';pfmt:'v0, s0 vop3';descr:''),
(code:$D3C60000;code3:       $0;enc:VOP3;name:'VOP3_invalid_99';pfmt:'v0, s0 vop3';descr:''),
(code:$D3C80000;code3:       $0;enc:VOP3;name:'VOP3_invalid_100';pfmt:'v0, s0 vop3';descr:''),
(code:$D3CA0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_101';pfmt:'v0, s0 vop3';descr:''),
(code:$D3CC0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_102';pfmt:'v0, s0 vop3';descr:''),
(code:$D3CE0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_103';pfmt:'v0, s0 vop3';descr:''),
(code:$D3D00000;code3:       $0;enc:VOP3;name:'VOP3_invalid_104';pfmt:'v0, s0 vop3';descr:''),
(code:$D3D20000;code3:       $0;enc:VOP3;name:'VOP3_invalid_105';pfmt:'v0, s0 vop3';descr:''),
(code:$D3D40000;code3:       $0;enc:VOP3;name:'VOP3_invalid_106';pfmt:'v0, s0 vop3';descr:''),
(code:$D3D60000;code3:       $0;enc:VOP3;name:'VOP3_invalid_107';pfmt:'v0, s0 vop3';descr:''),
(code:$D3D80000;code3:       $0;enc:VOP3;name:'VOP3_invalid_108';pfmt:'v0, s0 vop3';descr:''),
(code:$D3DA0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_109';pfmt:'v0, s0 vop3';descr:''),
(code:$D3DC0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_110';pfmt:'v0, s0 vop3';descr:''),
(code:$D3DE0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_111';pfmt:'v0, s0 vop3';descr:''),
(code:$D3E00000;code3:       $0;enc:VOP3;name:'VOP3_invalid_112';pfmt:'v0, s0 vop3';descr:''),
(code:$D3E20000;code3:       $0;enc:VOP3;name:'VOP3_invalid_113';pfmt:'v0, s0 vop3';descr:''),
(code:$D3E40000;code3:       $0;enc:VOP3;name:'VOP3_invalid_114';pfmt:'v0, s0 vop3';descr:''),
(code:$D3E60000;code3:       $0;enc:VOP3;name:'VOP3_invalid_115';pfmt:'v0, s0 vop3';descr:''),
(code:$D3E80000;code3:       $0;enc:VOP3;name:'VOP3_invalid_116';pfmt:'v0, s0 vop3';descr:''),
(code:$D3EA0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_117';pfmt:'v0, s0 vop3';descr:''),
(code:$D3EC0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_118';pfmt:'v0, s0 vop3';descr:''),
(code:$D3EE0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_119';pfmt:'v0, s0 vop3';descr:''),
(code:$D3F00000;code3:       $0;enc:VOP3;name:'VOP3_invalid_120';pfmt:'v0, s0 vop3';descr:''),
(code:$D3F20000;code3:       $0;enc:VOP3;name:'VOP3_invalid_121';pfmt:'v0, s0 vop3';descr:''),
(code:$D3F40000;code3:       $0;enc:VOP3;name:'VOP3_invalid_122';pfmt:'v0, s0 vop3';descr:''),
(code:$D3F60000;code3:       $0;enc:VOP3;name:'VOP3_invalid_123';pfmt:'v0, s0 vop3';descr:''),
(code:$D3F80000;code3:       $0;enc:VOP3;name:'VOP3_invalid_124';pfmt:'v0, s0 vop3';descr:''),
(code:$D3FA0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_125';pfmt:'v0, s0 vop3';descr:''),
(code:$D3FC0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_126';pfmt:'v0, s0 vop3';descr:''),
(code:$D3FE0000;code3:       $0;enc:VOP3;name:'VOP3_invalid_127';pfmt:'v0, s0 vop3';descr:''),
(code:$C8000000;code3:       $0;enc:VINTRP;name:'v_interp_p1_f32';pfmt:'v0, v0, attr0.x';descr:'D = P10 * S + P0; parameter interpolation (SQ translates to V_MAD_F32 for SP)'),
(code:$C8010000;code3:       $0;enc:VINTRP;name:'v_interp_p2_f32';pfmt:'v0, v0, attr0.x';descr:'D = P20 * S + D; parameter interpolation (SQ translates to V_MAD_F32 for SP)'),
(code:$C8020000;code3:       $0;enc:VINTRP;name:'v_interp_mov_f32';pfmt:'v0, p10, attr0.x';descr:'D = {P10,P20,P0}[S]; parameter load'),
(code:$C8030000;code3:       $0;enc:VINTRP;name:'VINTRP_invalid_3';pfmt:'v0, v0, attr0.x';descr:''),
(code:$D8000000;code3:       $0;enc:DS;name:'ds_add_u32';pfmt:'v0, v2';descr:'DS[A] = DS[A] + D0; uint add'),
(code:$D8040000;code3:       $0;enc:DS;name:'ds_sub_u32';pfmt:'v0, v2';descr:'DS[A] = DS[A] - D0; uint subtract'),
(code:$D8080000;code3:       $0;enc:DS;name:'ds_rsub_u32';pfmt:'v0, v2';descr:'DS[A] = D0 - DS[A]; uint reverse subtract'),
(code:$D80C0000;code3:       $0;enc:DS;name:'ds_inc_u32';pfmt:'v0, v2';descr:'DS[A] = (DS[A] >= D0 ? 0 : DS[A] + 1); uint increment'),
(code:$D8100000;code3:       $0;enc:DS;name:'ds_dec_u32';pfmt:'v0, v2';descr:'DS[A] = (DS[A] == 0 || DS[A] > D0 ? D0 : DS[A] - 1); uint decrement'),
(code:$D8140000;code3:       $0;enc:DS;name:'ds_min_i32';pfmt:'v0, v2';descr:'DS[A] = min(DS[A], D0); int min'),
(code:$D8180000;code3:       $0;enc:DS;name:'ds_max_i32';pfmt:'v0, v2';descr:'DS[A] = max(DS[A], D0); int max'),
(code:$D81C0000;code3:       $0;enc:DS;name:'ds_min_u32';pfmt:'v0, v2';descr:'DS[A] = min(DS[A], D0); uint min'),
(code:$D8200000;code3:       $0;enc:DS;name:'ds_max_u32';pfmt:'v0, v2';descr:'DS[A] = max(DS[A], D0); uint max'),
(code:$D8240000;code3:       $0;enc:DS;name:'ds_and_b32';pfmt:'v0, v2';descr:'DS[A] = DS[A] & D0; dword AND'),
(code:$D8280000;code3:       $0;enc:DS;name:'ds_or_b32';pfmt:'v0, v2';descr:'DS[A] = DS[A] | D0; dword OR'),
(code:$D82C0000;code3:       $0;enc:DS;name:'ds_xor_b32';pfmt:'v0, v2';descr:'DS[A] = DS[A] ^ D0; dword XOR'),
(code:$D8300000;code3:       $0;enc:DS;name:'ds_mskor_b32';pfmt:'v0, v2, v0';descr:'DS[A] = (DS[A] ^ ~D0) | D1; masked dword OR'),
(code:$D8340000;code3:       $0;enc:DS;name:'ds_write_b32';pfmt:'v0, v2';descr:'DS[A] = D0; write dword.'),
(code:$D8380000;code3:       $0;enc:DS;name:'ds_write2_b32';pfmt:'v0, v2, v0';descr:'DS[ADDR+offset0*4] = D0; DS[ADDR+offset1*4] = D1; write 2 dwords.'),
(code:$D83C0000;code3:       $0;enc:DS;name:'ds_write2st64_b32';pfmt:'v0, v2, v0';descr:'DS[ADDR+offset0*4*64] = D0; DS[ADDR+offset1*4*64] = D1; write 2 dwords.'),
(code:$D8400000;code3:       $0;enc:DS;name:'ds_cmpst_b32';pfmt:'v0, v2, v0';descr:'DS[A] = (DS[A] == D0 ? D1 : DS[A]); compare store'),
(code:$D8440000;code3:       $0;enc:DS;name:'ds_cmpst_f32';pfmt:'v0, v2, v0';descr:'DS[A] = (DS[A] == D0 ? D1 : DS[A]); compare store with float rules'),
(code:$D8480000;code3:       $0;enc:DS;name:'ds_min_f32';pfmt:'v0, v2';descr:'DS[A] = (DS[A] < D1) ? D0 : DS[A]; float compare swap (handles NaN/INF/denorm)'),
(code:$D84C0000;code3:       $0;enc:DS;name:'ds_max_f32';pfmt:'v0, v2';descr:'DS[A] = (D0 > DS[A]) ? D0 : DS[A]; float, handles NaN/INF/denorm'),
(code:$D8500000;code3:       $0;enc:DS;name:'ds_invalid_20';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D8540000;code3:       $0;enc:DS;name:'ds_invalid_21';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D8580000;code3:       $0;enc:DS;name:'ds_invalid_22';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D85C0000;code3:       $0;enc:DS;name:'ds_invalid_23';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D8600000;code3:       $0;enc:DS;name:'ds_invalid_24';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D8640000;code3:       $0;enc:DS;name:'ds_gws_init';pfmt:'v0';descr:'GDS Only.'),
(code:$D8680000;code3:       $0;enc:DS;name:'ds_gws_sema_v';pfmt:'v0';descr:''),
(code:$D86C0000;code3:       $0;enc:DS;name:'ds_gws_sema_br';pfmt:'v0';descr:''),
(code:$D8700000;code3:       $0;enc:DS;name:'ds_gws_sema_p';pfmt:'v0';descr:''),
(code:$D8740000;code3:       $0;enc:DS;name:'ds_gws_barrier';pfmt:'v0';descr:''),
(code:$D8780000;code3:       $0;enc:DS;name:'ds_write_b8';pfmt:'v0, v2';descr:'DS[A] = D0[7:0]; byte write'),
(code:$D87C0000;code3:       $0;enc:DS;name:'ds_write_b16';pfmt:'v0, v2';descr:'DS[A] = D0[15:0]; short write'),
(code:$D8800000;code3:       $0;enc:DS;name:'ds_add_rtn_u32';pfmt:'v0, v0, v2';descr:'uint add'),
(code:$D8840000;code3:       $0;enc:DS;name:'ds_sub_rtn_u32';pfmt:'v0, v0, v2';descr:'uint subtract'),
(code:$D8880000;code3:       $0;enc:DS;name:'ds_rsub_rtn_u32';pfmt:'v0, v0, v2';descr:'uint reverse subtract'),
(code:$D88C0000;code3:       $0;enc:DS;name:'ds_inc_rtn_u32';pfmt:'v0, v0, v2';descr:'uint increment'),
(code:$D8900000;code3:       $0;enc:DS;name:'ds_dec_rtn_u32';pfmt:'v0, v0, v2';descr:'uint decrement'),
(code:$D8940000;code3:       $0;enc:DS;name:'ds_min_rtn_i32';pfmt:'v0, v0, v2';descr:'int min'),
(code:$D8980000;code3:       $0;enc:DS;name:'ds_max_rtn_i32';pfmt:'v0, v0, v2';descr:'int max'),
(code:$D89C0000;code3:       $0;enc:DS;name:'ds_min_rtn_u32';pfmt:'v0, v0, v2';descr:'uint min'),
(code:$D8A00000;code3:       $0;enc:DS;name:'ds_max_rtn_u32';pfmt:'v0, v0, v2';descr:'uint max'),
(code:$D8A40000;code3:       $0;enc:DS;name:'ds_and_rtn_b32';pfmt:'v0, v0, v2';descr:'dword AND'),
(code:$D8A80000;code3:       $0;enc:DS;name:'ds_or_rtn_b32';pfmt:'v0, v0, v2';descr:'dword OR'),
(code:$D8AC0000;code3:       $0;enc:DS;name:'ds_xor_rtn_b32';pfmt:'v0, v0, v2';descr:'dword XOR'),
(code:$D8B00000;code3:       $0;enc:DS;name:'ds_mskor_rtn_b32';pfmt:'v0, v0, v2, v0';descr:'masked dword OR'),
(code:$D8B40000;code3:       $0;enc:DS;name:'ds_wrxchg_rtn_b32';pfmt:'v0, v0, v2';descr:'write exchange. Offset = {offset1,offset0}. A = ADDR+offset. D=DS[Addr]. DS[Addr]=D0.'),
(code:$D8B80000;code3:       $0;enc:DS;name:'ds_wrxchg2_rtn_b32';pfmt:'v[0:1], v0, v2, v0';descr:'write exchange 2 separate dwords'),
(code:$D8BC0000;code3:       $0;enc:DS;name:'ds_wrxchg2st64_rtn_b32';pfmt:'v[0:1], v0, v2, v0';descr:'write echange 2 dwords, stride 64'),
(code:$D8C00000;code3:       $0;enc:DS;name:'ds_cmpst_rtn_b32';pfmt:'v0, v0, v2, v0';descr:'compare store'),
(code:$D8C40000;code3:       $0;enc:DS;name:'ds_cmpst_rtn_f32';pfmt:'v0, v0, v2, v0';descr:'compare store with float rules'),
(code:$D8C80000;code3:       $0;enc:DS;name:'ds_min_rtn_f32';pfmt:'v0, v0, v2';descr:''),
(code:$D8CC0000;code3:       $0;enc:DS;name:'ds_max_rtn_f32';pfmt:'v0, v0, v2';descr:''),
(code:$D8D00000;code3:       $0;enc:DS;name:'ds_invalid_52';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D8D40000;code3:       $0;enc:DS;name:'ds_swizzle_b32';pfmt:'v0, v0';descr:'R = swizzle(Data(vgpr), offset1:offset0). dword swizzle. no data is written to LDS. see ds_opcodes.docx for details.'),
(code:$D8D80000;code3:       $0;enc:DS;name:'ds_read_b32';pfmt:'v0, v0';descr:'R = DS[A]; dword read'),
(code:$D8DC0000;code3:       $0;enc:DS;name:'ds_read2_b32';pfmt:'v[0:1], v0';descr:'R = DS[ADDR+offset0*4], R+1 = DS[ADDR+offset1*4].  Read 2 dwords'),
(code:$D8E00000;code3:       $0;enc:DS;name:'ds_read2st64_b32';pfmt:'v[0:1], v0';descr:'R = DS[ADDR+offset0*4*64], R+1 = DS[ADDR+offset1*4*64].  Read 2 dwords'),
(code:$D8E40000;code3:       $0;enc:DS;name:'ds_read_i8';pfmt:'v0, v0';descr:'R = signext(DS[A][7:0]}; signed byte read'),
(code:$D8E80000;code3:       $0;enc:DS;name:'ds_read_u8';pfmt:'v0, v0';descr:'R = {24''h0,DS[A][7:0]}; unsigned byte read'),
(code:$D8EC0000;code3:       $0;enc:DS;name:'ds_read_i16';pfmt:'v0, v0';descr:'R = signext(DS[A][15:0]}; signed short read'),
(code:$D8F00000;code3:       $0;enc:DS;name:'ds_read_u16';pfmt:'v0, v0';descr:'R = {16''h0,DS[A][15:0]}; unsigned short read'),
(code:$D8F40000;code3:       $0;enc:DS;name:'ds_consume';pfmt:'v0';descr:''),
(code:$D8F80000;code3:       $0;enc:DS;name:'ds_append';pfmt:'v0';descr:''),
(code:$D8FC0000;code3:       $0;enc:DS;name:'ds_ordered_count';pfmt:'v0, v0';descr:''),
(code:$D9000000;code3:       $0;enc:DS;name:'ds_add_u64';pfmt:'v0, v[2:3]';descr:''),
(code:$D9040000;code3:       $0;enc:DS;name:'ds_sub_u64';pfmt:'v0, v[2:3]';descr:''),
(code:$D9080000;code3:       $0;enc:DS;name:'ds_rsub_u64';pfmt:'v0, v[2:3]';descr:''),
(code:$D90C0000;code3:       $0;enc:DS;name:'ds_inc_u64';pfmt:'v0, v[2:3]';descr:''),
(code:$D9100000;code3:       $0;enc:DS;name:'ds_dec_u64';pfmt:'v0, v[2:3]';descr:''),
(code:$D9140000;code3:       $0;enc:DS;name:'ds_min_i64';pfmt:'v0, v[2:3]';descr:''),
(code:$D9180000;code3:       $0;enc:DS;name:'ds_max_i64';pfmt:'v0, v[2:3]';descr:''),
(code:$D91C0000;code3:       $0;enc:DS;name:'ds_min_u64';pfmt:'v0, v[2:3]';descr:''),
(code:$D9200000;code3:       $0;enc:DS;name:'ds_max_u64';pfmt:'v0, v[2:3]';descr:''),
(code:$D9240000;code3:       $0;enc:DS;name:'ds_and_b64';pfmt:'v0, v[2:3]';descr:''),
(code:$D9280000;code3:       $0;enc:DS;name:'ds_or_b64';pfmt:'v0, v[2:3]';descr:''),
(code:$D92C0000;code3:       $0;enc:DS;name:'ds_xor_b64';pfmt:'v0, v[2:3]';descr:''),
(code:$D9300000;code3:       $0;enc:DS;name:'ds_mskor_b64';pfmt:'v0, v[2:3], v[0:1]';descr:'masked dword XOR'),
(code:$D9340000;code3:       $0;enc:DS;name:'ds_write_b64';pfmt:'v0, v[2:3]';descr:'write'),
(code:$D9380000;code3:       $0;enc:DS;name:'ds_write2_b64';pfmt:'v0, v[2:3], v[0:1]';descr:'DS[ADDR+offset0*8] = D0; DS[ADDR+offset1*8] = D1; write 2 dwords.'),
(code:$D93C0000;code3:       $0;enc:DS;name:'ds_write2st64_b64';pfmt:'v0, v[2:3], v[0:1]';descr:'DS[ADDR+offset0*8*64] = D0; DS[ADDR+offset1*8*64] = D1; write 2 dwords.'),
(code:$D9400000;code3:       $0;enc:DS;name:'ds_cmpst_b64';pfmt:'v0, v[2:3], v[0:1]';descr:''),
(code:$D9440000;code3:       $0;enc:DS;name:'ds_cmpst_f64';pfmt:'v0, v[2:3], v[0:1]';descr:''),
(code:$D9480000;code3:       $0;enc:DS;name:'ds_min_f64';pfmt:'v0, v[2:3]';descr:'DS[A] = (D0 < DS[A]) ? D0 : DS[A]; float, handles NaN/INF/denorm'),
(code:$D94C0000;code3:       $0;enc:DS;name:'ds_max_f64';pfmt:'v0, v[2:3]';descr:''),
(code:$D9500000;code3:       $0;enc:DS;name:'ds_invalid_84';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D9540000;code3:       $0;enc:DS;name:'ds_invalid_85';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D9580000;code3:       $0;enc:DS;name:'ds_invalid_86';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D95C0000;code3:       $0;enc:DS;name:'ds_invalid_87';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D9600000;code3:       $0;enc:DS;name:'ds_invalid_88';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D9640000;code3:       $0;enc:DS;name:'ds_invalid_89';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D9680000;code3:       $0;enc:DS;name:'ds_invalid_90';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D96C0000;code3:       $0;enc:DS;name:'ds_invalid_91';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D9700000;code3:       $0;enc:DS;name:'ds_invalid_92';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D9740000;code3:       $0;enc:DS;name:'ds_invalid_93';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D9780000;code3:       $0;enc:DS;name:'ds_invalid_94';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D97C0000;code3:       $0;enc:DS;name:'ds_invalid_95';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D9800000;code3:       $0;enc:DS;name:'ds_add_rtn_u64';pfmt:'v[0:1], v0, v[2:3]';descr:''),
(code:$D9840000;code3:       $0;enc:DS;name:'ds_sub_rtn_u64';pfmt:'v[0:1], v0, v[2:3]';descr:''),
(code:$D9880000;code3:       $0;enc:DS;name:'ds_rsub_rtn_u64';pfmt:'v[0:1], v0, v[2:3]';descr:''),
(code:$D98C0000;code3:       $0;enc:DS;name:'ds_inc_rtn_u64';pfmt:'v[0:1], v0, v[2:3]';descr:''),
(code:$D9900000;code3:       $0;enc:DS;name:'ds_dec_rtn_u64';pfmt:'v[0:1], v0, v[2:3]';descr:''),
(code:$D9940000;code3:       $0;enc:DS;name:'ds_min_rtn_i64';pfmt:'v[0:1], v0, v[2:3]';descr:''),
(code:$D9980000;code3:       $0;enc:DS;name:'ds_max_rtn_i64';pfmt:'v[0:1], v0, v[2:3]';descr:''),
(code:$D99C0000;code3:       $0;enc:DS;name:'ds_min_rtn_u64';pfmt:'v[0:1], v0, v[2:3]';descr:''),
(code:$D9A00000;code3:       $0;enc:DS;name:'ds_max_rtn_u64';pfmt:'v[0:1], v0, v[2:3]';descr:''),
(code:$D9A40000;code3:       $0;enc:DS;name:'ds_and_rtn_b64';pfmt:'v[0:1], v0, v[2:3]';descr:'dword AND'),
(code:$D9A80000;code3:       $0;enc:DS;name:'ds_or_rtn_b64';pfmt:'v[0:1], v0, v[2:3]';descr:'dword OR'),
(code:$D9AC0000;code3:       $0;enc:DS;name:'ds_xor_rtn_b64';pfmt:'v[0:1], v0, v[2:3]';descr:''),
(code:$D9B00000;code3:       $0;enc:DS;name:'ds_mskor_rtn_b64';pfmt:'v[0:1], v0, v[2:3], v[0:1]';descr:''),
(code:$D9B40000;code3:       $0;enc:DS;name:'ds_wrxchg_rtn_b64';pfmt:'v[0:1], v0, v[2:3]';descr:'write exchange'),
(code:$D9B80000;code3:       $0;enc:DS;name:'ds_wrxchg2_rtn_b64';pfmt:'v[0:3], v0, v[2:3], v[0:1]';descr:'write exchange relative'),
(code:$D9BC0000;code3:       $0;enc:DS;name:'ds_wrxchg2st64_rtn_b64';pfmt:'v[0:3], v0, v[2:3], v[0:1]';descr:'write echange 2 dwords'),
(code:$D9C00000;code3:       $0;enc:DS;name:'ds_cmpst_rtn_b64';pfmt:'v[0:1], v0, v[2:3], v[0:1]';descr:''),
(code:$D9C40000;code3:       $0;enc:DS;name:'ds_cmpst_rtn_f64';pfmt:'v[0:1], v0, v[2:3], v[0:1]';descr:''),
(code:$D9C80000;code3:       $0;enc:DS;name:'ds_min_rtn_f64';pfmt:'v[0:1], v0, v[2:3]';descr:''),
(code:$D9CC0000;code3:       $0;enc:DS;name:'ds_max_rtn_f64';pfmt:'v[0:1], v0, v[2:3]';descr:''),
(code:$D9D00000;code3:       $0;enc:DS;name:'ds_invalid_116';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D9D40000;code3:       $0;enc:DS;name:'ds_invalid_117';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D9D80000;code3:       $0;enc:DS;name:'ds_read_b64';pfmt:'v[0:1], v0';descr:'dword read'),
(code:$D9DC0000;code3:       $0;enc:DS;name:'ds_read2_b64';pfmt:'v[0:3], v0';descr:'R = DS[ADDR+offset0*8], R+1 = DS[ADDR+offset1*8].  Read 2 dwords'),
(code:$D9E00000;code3:       $0;enc:DS;name:'ds_read2st64_b64';pfmt:'v[0:3], v0';descr:'R = DS[ADDR+offset0*8*64], R+1 = DS[ADDR+offset1*8*64].  Read 2 dwords'),
(code:$D9E40000;code3:       $0;enc:DS;name:'ds_invalid_121';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D9E80000;code3:       $0;enc:DS;name:'ds_invalid_122';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D9EC0000;code3:       $0;enc:DS;name:'ds_invalid_123';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D9F00000;code3:       $0;enc:DS;name:'ds_invalid_124';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D9F40000;code3:       $0;enc:DS;name:'ds_invalid_125';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D9F80000;code3:       $0;enc:DS;name:'ds_invalid_126';pfmt:'v0, v0, v2, v0';descr:''),
(code:$D9FC0000;code3:       $0;enc:DS;name:'ds_invalid_127';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA000000;code3:       $0;enc:DS;name:'ds_add_src2_u32';pfmt:'v0';descr:'B = A + 4*(offset1[7] ? {A[31],A[31:17]} : {offset1[6],offset1[6:0],offset0}).  DS[A] = DS[A] + DS[B]; uint add'),
(code:$DA040000;code3:       $0;enc:DS;name:'ds_sub_src2_u32';pfmt:'v0';descr:'B = A + 4*(offset1[7] ? {A[31],A[31:17]} : {offset1[6],offset1[6:0],offset0}).  DS[A] = DS[A] - DS[B]; uint subtract'),
(code:$DA080000;code3:       $0;enc:DS;name:'ds_rsub_src2_u32';pfmt:'v0';descr:'B = A + 4*(offset1[7] ? {A[31],A[31:17]} : {offset1[6],offset1[6:0],offset0}).  DS[A] = DS[B] - DS[A]; uint reverse subtract'),
(code:$DA0C0000;code3:       $0;enc:DS;name:'ds_inc_src2_u32';pfmt:'v0';descr:'B = A + 4*(offset1[7] ? {A[31],A[31:17]} : {offset1[6],offset1[6:0],offset0}).  DS[A] = (DS[A] >= DS[B] ? 0 : DS[A] + 1); uint increment'),
(code:$DA100000;code3:       $0;enc:DS;name:'ds_dec_src2_u32';pfmt:'v0';descr:'B = A + 4*(offset1[7] ? {A[31],A[31:17]} : {offset1[6],offset1[6:0],offset0}).  DS[A] = (DS[A] == 0 || DS[A] > DS[B] ? DS[B] : DS[A] - 1); uint decrement'),
(code:$DA140000;code3:       $0;enc:DS;name:'ds_min_src2_i32';pfmt:'v0';descr:'B = A + 4*(offset1[7] ? {A[31],A[31:17]} : {offset1[6],offset1[6:0],offset0}).  DS[A] = min(DS[A], DS[B]); int min'),
(code:$DA180000;code3:       $0;enc:DS;name:'ds_max_src2_i32';pfmt:'v0';descr:'B = A + 4*(offset1[7] ? {A[31],A[31:17]} : {offset1[6],offset1[6:0],offset0}).  DS[A] = max(DS[A], DS[B]); int max'),
(code:$DA1C0000;code3:       $0;enc:DS;name:'ds_min_src2_u32';pfmt:'v0';descr:'B = A + 4*(offset1[7] ? {A[31],A[31:17]} : {offset1[6],offset1[6:0],offset0}).  DS[A] = min(DS[A], DS[B]); uint min'),
(code:$DA200000;code3:       $0;enc:DS;name:'ds_max_src2_u32';pfmt:'v0';descr:'B = A + 4*(offset1[7] ? {A[31],A[31:17]} : {offset1[6],offset1[6:0],offset0}).  DS[A] = max(DS[A], DS[B]); uint max'),
(code:$DA240000;code3:       $0;enc:DS;name:'ds_and_src2_b32';pfmt:'v0';descr:'B = A + 4*(offset1[7] ? {A[31],A[31:17]} : {offset1[6],offset1[6:0],offset0}).  DS[A] = DS[A] & DS[B]; dword AND'),
(code:$DA280000;code3:       $0;enc:DS;name:'ds_or_src2_b32';pfmt:'v0';descr:'B = A + 4*(offset1[7] ? {A[31],A[31:17]} : {offset1[6],offset1[6:0],offset0}).  DS[A] = DS[A] | DS[B]; dword OR'),
(code:$DA2C0000;code3:       $0;enc:DS;name:'ds_xor_src2_b32';pfmt:'v0';descr:'B = A + 4*(offset1[7] ? {A[31],A[31:17]} : {offset1[6],offset1[6:0],offset0}).  DS[A] = DS[A] ^ DS[B]; dword XOR'),
(code:$DA300000;code3:       $0;enc:DS;name:'ds_invalid_140';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA340000;code3:       $0;enc:DS;name:'ds_write_src2_b32';pfmt:'v0';descr:'B = A + 4*(offset1[7] ? {A[31],A[31:17]} : {offset1[6],offset1[6:0],offset0}).  DS[A] = DS[B]; write dword'),
(code:$DA380000;code3:       $0;enc:DS;name:'ds_invalid_142';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA3C0000;code3:       $0;enc:DS;name:'ds_invalid_143';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA400000;code3:       $0;enc:DS;name:'ds_invalid_144';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA440000;code3:       $0;enc:DS;name:'ds_invalid_145';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA480000;code3:       $0;enc:DS;name:'ds_min_src2_f32';pfmt:'v0';descr:'B = A + 4*(offset1[7] ? {A[31],A[31:17]} : {offset1[6],offset1[6:0],offset0}).  DS[A] = (DS[B] < DS[A]) ? DS[B] : DS[A]; float, handles NaN/INF/denorm'),
(code:$DA4C0000;code3:       $0;enc:DS;name:'ds_max_src2_f32';pfmt:'v0';descr:'B = A + 4*(offset1[7] ? {A[31],A[31:17]} : {offset1[6],offset1[6:0],offset0}).  DS[A] = (DS[B] > DS[A]) ? DS[B] : DS[A]; float, handles NaN/INF/denorm'),
(code:$DA500000;code3:       $0;enc:DS;name:'ds_invalid_148';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA540000;code3:       $0;enc:DS;name:'ds_invalid_149';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA580000;code3:       $0;enc:DS;name:'ds_invalid_150';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA5C0000;code3:       $0;enc:DS;name:'ds_invalid_151';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA600000;code3:       $0;enc:DS;name:'ds_invalid_152';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA640000;code3:       $0;enc:DS;name:'ds_invalid_153';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA680000;code3:       $0;enc:DS;name:'ds_invalid_154';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA6C0000;code3:       $0;enc:DS;name:'ds_invalid_155';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA700000;code3:       $0;enc:DS;name:'ds_invalid_156';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA740000;code3:       $0;enc:DS;name:'ds_invalid_157';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA780000;code3:       $0;enc:DS;name:'ds_invalid_158';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA7C0000;code3:       $0;enc:DS;name:'ds_invalid_159';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA800000;code3:       $0;enc:DS;name:'ds_invalid_160';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA840000;code3:       $0;enc:DS;name:'ds_invalid_161';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA880000;code3:       $0;enc:DS;name:'ds_invalid_162';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA8C0000;code3:       $0;enc:DS;name:'ds_invalid_163';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA900000;code3:       $0;enc:DS;name:'ds_invalid_164';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA940000;code3:       $0;enc:DS;name:'ds_invalid_165';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA980000;code3:       $0;enc:DS;name:'ds_invalid_166';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DA9C0000;code3:       $0;enc:DS;name:'ds_invalid_167';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAA00000;code3:       $0;enc:DS;name:'ds_invalid_168';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAA40000;code3:       $0;enc:DS;name:'ds_invalid_169';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAA80000;code3:       $0;enc:DS;name:'ds_invalid_170';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAAC0000;code3:       $0;enc:DS;name:'ds_invalid_171';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAB00000;code3:       $0;enc:DS;name:'ds_invalid_172';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAB40000;code3:       $0;enc:DS;name:'ds_invalid_173';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAB80000;code3:       $0;enc:DS;name:'ds_invalid_174';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DABC0000;code3:       $0;enc:DS;name:'ds_invalid_175';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAC00000;code3:       $0;enc:DS;name:'ds_invalid_176';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAC40000;code3:       $0;enc:DS;name:'ds_invalid_177';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAC80000;code3:       $0;enc:DS;name:'ds_invalid_178';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DACC0000;code3:       $0;enc:DS;name:'ds_invalid_179';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAD00000;code3:       $0;enc:DS;name:'ds_invalid_180';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAD40000;code3:       $0;enc:DS;name:'ds_invalid_181';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAD80000;code3:       $0;enc:DS;name:'ds_invalid_182';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DADC0000;code3:       $0;enc:DS;name:'ds_invalid_183';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAE00000;code3:       $0;enc:DS;name:'ds_invalid_184';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAE40000;code3:       $0;enc:DS;name:'ds_invalid_185';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAE80000;code3:       $0;enc:DS;name:'ds_invalid_186';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAEC0000;code3:       $0;enc:DS;name:'ds_invalid_187';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAF00000;code3:       $0;enc:DS;name:'ds_invalid_188';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAF40000;code3:       $0;enc:DS;name:'ds_invalid_189';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAF80000;code3:       $0;enc:DS;name:'ds_invalid_190';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DAFC0000;code3:       $0;enc:DS;name:'ds_invalid_191';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB000000;code3:       $0;enc:DS;name:'ds_add_src2_u64';pfmt:'v0';descr:''),
(code:$DB040000;code3:       $0;enc:DS;name:'ds_sub_src2_u64';pfmt:'v0';descr:''),
(code:$DB080000;code3:       $0;enc:DS;name:'ds_rsub_src2_u64';pfmt:'v0';descr:''),
(code:$DB0C0000;code3:       $0;enc:DS;name:'ds_inc_src2_u64';pfmt:'v0';descr:''),
(code:$DB100000;code3:       $0;enc:DS;name:'ds_dec_src2_u64';pfmt:'v0';descr:''),
(code:$DB140000;code3:       $0;enc:DS;name:'ds_min_src2_i64';pfmt:'v0';descr:''),
(code:$DB180000;code3:       $0;enc:DS;name:'ds_max_src2_i64';pfmt:'v0';descr:''),
(code:$DB1C0000;code3:       $0;enc:DS;name:'ds_min_src2_u64';pfmt:'v0';descr:''),
(code:$DB200000;code3:       $0;enc:DS;name:'ds_max_src2_u64';pfmt:'v0';descr:''),
(code:$DB240000;code3:       $0;enc:DS;name:'ds_and_src2_b64';pfmt:'v0';descr:''),
(code:$DB280000;code3:       $0;enc:DS;name:'ds_or_src2_b64';pfmt:'v0';descr:''),
(code:$DB2C0000;code3:       $0;enc:DS;name:'ds_xor_src2_b64';pfmt:'v0';descr:''),
(code:$DB300000;code3:       $0;enc:DS;name:'ds_invalid_204';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB340000;code3:       $0;enc:DS;name:'ds_write_src2_b64';pfmt:'v0';descr:'B = A + 4*(offset1[7] ? {A[31],A[31:17]} : {offset1[6],offset1[6:0],offset0}).  DS[A] = DS[B]; write qword'),
(code:$DB380000;code3:       $0;enc:DS;name:'ds_invalid_206';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB3C0000;code3:       $0;enc:DS;name:'ds_invalid_207';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB400000;code3:       $0;enc:DS;name:'ds_invalid_208';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB440000;code3:       $0;enc:DS;name:'ds_invalid_209';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB480000;code3:       $0;enc:DS;name:'ds_min_src2_f64';pfmt:'v0';descr:'B = A + 4*(offset1[7] ? {A[31],A[31:17]} : {offset1[6],offset1[6:0],offset0}).  [A] = (D0 < DS[A]) ? D0 : DS[A]; float, handles NaN/INF/denorm'),
(code:$DB4C0000;code3:       $0;enc:DS;name:'ds_max_src2_f64';pfmt:'v0';descr:'B = A + 4*(offset1[7] ? {A[31],A[31:17]} : {offset1[6],offset1[6:0],offset0}).  [A] = (D0 > DS[A]) ? D0 : DS[A]; float, handles NaN/INF/denorm'),
(code:$DB500000;code3:       $0;enc:DS;name:'ds_invalid_212';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB540000;code3:       $0;enc:DS;name:'ds_invalid_213';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB580000;code3:       $0;enc:DS;name:'ds_invalid_214';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB5C0000;code3:       $0;enc:DS;name:'ds_invalid_215';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB600000;code3:       $0;enc:DS;name:'ds_invalid_216';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB640000;code3:       $0;enc:DS;name:'ds_invalid_217';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB680000;code3:       $0;enc:DS;name:'ds_invalid_218';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB6C0000;code3:       $0;enc:DS;name:'ds_invalid_219';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB700000;code3:       $0;enc:DS;name:'ds_invalid_220';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB740000;code3:       $0;enc:DS;name:'ds_invalid_221';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB780000;code3:       $0;enc:DS;name:'ds_invalid_222';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB7C0000;code3:       $0;enc:DS;name:'ds_invalid_223';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB800000;code3:       $0;enc:DS;name:'ds_invalid_224';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB840000;code3:       $0;enc:DS;name:'ds_invalid_225';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB880000;code3:       $0;enc:DS;name:'ds_invalid_226';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB8C0000;code3:       $0;enc:DS;name:'ds_invalid_227';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB900000;code3:       $0;enc:DS;name:'ds_invalid_228';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB940000;code3:       $0;enc:DS;name:'ds_invalid_229';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB980000;code3:       $0;enc:DS;name:'ds_invalid_230';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DB9C0000;code3:       $0;enc:DS;name:'ds_invalid_231';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBA00000;code3:       $0;enc:DS;name:'ds_invalid_232';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBA40000;code3:       $0;enc:DS;name:'ds_invalid_233';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBA80000;code3:       $0;enc:DS;name:'ds_invalid_234';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBAC0000;code3:       $0;enc:DS;name:'ds_invalid_235';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBB00000;code3:       $0;enc:DS;name:'ds_invalid_236';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBB40000;code3:       $0;enc:DS;name:'ds_invalid_237';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBB80000;code3:       $0;enc:DS;name:'ds_invalid_238';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBBC0000;code3:       $0;enc:DS;name:'ds_invalid_239';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBC00000;code3:       $0;enc:DS;name:'ds_invalid_240';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBC40000;code3:       $0;enc:DS;name:'ds_invalid_241';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBC80000;code3:       $0;enc:DS;name:'ds_invalid_242';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBCC0000;code3:       $0;enc:DS;name:'ds_invalid_243';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBD00000;code3:       $0;enc:DS;name:'ds_invalid_244';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBD40000;code3:       $0;enc:DS;name:'ds_invalid_245';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBD80000;code3:       $0;enc:DS;name:'ds_invalid_246';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBDC0000;code3:       $0;enc:DS;name:'ds_invalid_247';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBE00000;code3:       $0;enc:DS;name:'ds_invalid_248';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBE40000;code3:       $0;enc:DS;name:'ds_invalid_249';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBE80000;code3:       $0;enc:DS;name:'ds_invalid_250';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBEC0000;code3:       $0;enc:DS;name:'ds_invalid_251';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBF00000;code3:       $0;enc:DS;name:'ds_invalid_252';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBF40000;code3:       $0;enc:DS;name:'ds_invalid_253';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBF80000;code3:       $0;enc:DS;name:'ds_invalid_254';pfmt:'v0, v0, v2, v0';descr:''),
(code:$DBFC0000;code3:       $0;enc:DS;name:'ds_invalid_255';pfmt:'v0, v0, v2, v0';descr:''),
(code:$F8000000;code3:       $0;enc:EXP;name:'exp';pfmt:'mrt0, off, off, off, off';descr:''),
(code:$E0000000;code3:       $0;enc:MUBUF;name:'buffer_load_format_x';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E0080000;code3:       $0;enc:MUBUF;name:'buffer_load_format_xyz';pfmt:'v[0:2], v0, s[0:3], s0';descr:''),
(code:$E0100000;code3:       $0;enc:MUBUF;name:'buffer_store_format_x';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E0180000;code3:       $0;enc:MUBUF;name:'buffer_store_format_xyz';pfmt:'v[0:2], v0, s[0:3], s0';descr:''),
(code:$E0200000;code3:       $0;enc:MUBUF;name:'buffer_load_ubyte';pfmt:'v0, v0, s[0:3], s0';descr:'Untyped buffer load unsigned byte'),
(code:$E0280000;code3:       $0;enc:MUBUF;name:'buffer_load_ushort';pfmt:'v0, v0, s[0:3], s0';descr:'Untyped buffer load unsigned short'),
(code:$E0300000;code3:       $0;enc:MUBUF;name:'buffer_load_dword';pfmt:'v0, v0, s[0:3], s0';descr:'Untyped buffer load dword'),
(code:$E0380000;code3:       $0;enc:MUBUF;name:'buffer_load_dwordx4';pfmt:'v[0:3], v0, s[0:3], s0';descr:'Untyped buffer load 4 dwords'),
(code:$E0400000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_16';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E0480000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_18';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E0500000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_20';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E0580000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_22';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E0600000;code3:       $0;enc:MUBUF;name:'buffer_store_byte';pfmt:'v0, v0, s[0:3], s0';descr:'Untyped buffer store byte'),
(code:$E0680000;code3:       $0;enc:MUBUF;name:'buffer_store_short';pfmt:'v0, v0, s[0:3], s0';descr:'Untyped buffer store short'),
(code:$E0700000;code3:       $0;enc:MUBUF;name:'buffer_store_dword';pfmt:'v0, v0, s[0:3], s0';descr:'Untyped buffer store dword'),
(code:$E0780000;code3:       $0;enc:MUBUF;name:'buffer_store_dwordx4';pfmt:'v[0:3], v0, s[0:3], s0';descr:'Untyped buffer store 4 dwords'),
(code:$E0800000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_32';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E0880000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_34';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E0900000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_36';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E0980000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_38';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E0A00000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_40';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E0A80000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_42';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E0B00000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_44';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E0B80000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_46';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E0C00000;code3:       $0;enc:MUBUF;name:'buffer_atomic_swap';pfmt:'v0, v0, s[0:3], s0';descr:'32b. dst=src, returns previous value if glc==1'),
(code:$E0C80000;code3:       $0;enc:MUBUF;name:'buffer_atomic_add';pfmt:'v0, v0, s[0:3], s0';descr:'32b, dst += src. returns previous value if glc==1'),
(code:$E0D00000;code3:       $0;enc:MUBUF;name:'buffer_atomic_rsub';pfmt:'v0, v0, s[0:3], s0';descr:'32b, dst = src-dst. returns previous value if glc==1'),
(code:$E0D80000;code3:       $0;enc:MUBUF;name:'buffer_atomic_umin';pfmt:'v0, v0, s[0:3], s0';descr:'32b, dst = (src < dst) ? src : dst (unsigned). returns previous value if glc==1'),
(code:$E0E00000;code3:       $0;enc:MUBUF;name:'buffer_atomic_umax';pfmt:'v0, v0, s[0:3], s0';descr:'32b, dst = (src > dst) ? src : dst (unsigned). returns previous value if glc==1'),
(code:$E0E80000;code3:       $0;enc:MUBUF;name:'buffer_atomic_or';pfmt:'v0, v0, s[0:3], s0';descr:'32b, dst |= src. returns previous value if glc==1'),
(code:$E0F00000;code3:       $0;enc:MUBUF;name:'buffer_atomic_inc';pfmt:'v0, v0, s[0:3], s0';descr:'32b, dst = (dst >= src) ? 0 : dst+1. returns previous value if glc==1'),
(code:$E0F80000;code3:       $0;enc:MUBUF;name:'buffer_atomic_fcmpswap';pfmt:'v[0:1], v0, s[0:3], s0';descr:'32b , dst = (dst == cmp) ? src : dst, returns previous value if glc==1. float compare swap (handles NaN/INF/denorm). src comes from the first data-vgpr, cmp from the second.'),
(code:$E1000000;code3:       $0;enc:MUBUF;name:'buffer_atomic_fmax';pfmt:'v0, v0, s[0:3], s0';descr:'32b , dst = (src > dst) ? src : dst, returns previous value if glc==1. float, handles NaN/INF/denorm'),
(code:$E1080000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_66';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E1100000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_68';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E1180000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_70';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E1200000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_72';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E1280000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_74';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E1300000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_76';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E1380000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_78';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E1400000;code3:       $0;enc:MUBUF;name:'buffer_atomic_swap_x2';pfmt:'v[0:1], v0, s[0:3], s0';descr:'64b. dst=src, returns previous value if glc==1'),
(code:$E1480000;code3:       $0;enc:MUBUF;name:'buffer_atomic_add_x2';pfmt:'v[0:1], v0, s[0:3], s0';descr:'64b, dst += src. returns previous value if glc==1'),
(code:$E1500000;code3:       $0;enc:MUBUF;name:'buffer_atomic_rsub_x2';pfmt:'v[0:1], v0, s[0:3], s0';descr:'64b, dst = src-dst. returns previous value if glc==1'),
(code:$E1580000;code3:       $0;enc:MUBUF;name:'buffer_atomic_umin_x2';pfmt:'v[0:1], v0, s[0:3], s0';descr:'64b, dst = (src < dst) ? src : dst (unsigned). returns previous value if glc==1'),
(code:$E1600000;code3:       $0;enc:MUBUF;name:'buffer_atomic_umax_x2';pfmt:'v[0:1], v0, s[0:3], s0';descr:'64b, dst = (src > dst) ? src : dst (unsigned). returns previous value if glc==1'),
(code:$E1680000;code3:       $0;enc:MUBUF;name:'buffer_atomic_or_x2';pfmt:'v[0:1], v0, s[0:3], s0';descr:'64b, dst |= src. returns previous value if glc==1'),
(code:$E1700000;code3:       $0;enc:MUBUF;name:'buffer_atomic_inc_x2';pfmt:'v[0:1], v0, s[0:3], s0';descr:'64b, dst = (dst >= src) ? 0 : dst+1. returns previous value if glc==1'),
(code:$E1780000;code3:       $0;enc:MUBUF;name:'buffer_atomic_fcmpswap_x2';pfmt:'v[0:3], v0, s[0:3], s0';descr:'64b , dst = (dst == cmp) ? src : dst, returns previous value if glc==1. double compare swap (handles NaN/INF/denorm). src comes from the first two data-vgprs, cmp from the second two.'),
(code:$E1800000;code3:       $0;enc:MUBUF;name:'buffer_atomic_fmax_x2';pfmt:'v[0:1], v0, s[0:3], s0';descr:'64b , dst = (src > dst) ? src : dst, returns previous value if glc==1.  double, handles NaN/INF/denorm'),
(code:$E1880000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_98';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E1900000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_100';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E1980000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_102';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E1A00000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_104';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E1A80000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_106';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E1B00000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_108';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E1B80000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_110';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E1C00000;code3:       $0;enc:MUBUF;name:'buffer_wbinvl1_sc';pfmt:'';descr:'write back and invalidate the shader L1 only for lines of MTYPE SC and GC. Always returns ACK to shader.'),
(code:$E1C80000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_114';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E1D00000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_116';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E1D80000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_118';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E1E00000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_120';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E1E80000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_122';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E1F00000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_124';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E1F80000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_126';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E2000000;code3:       $0;enc:MUBUF;name:'buffer_load_format_x';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E2080000;code3:       $0;enc:MUBUF;name:'buffer_load_format_xyz';pfmt:'v[0:2], v0, s[0:3], s0';descr:''),
(code:$E2100000;code3:       $0;enc:MUBUF;name:'buffer_store_format_x';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E2180000;code3:       $0;enc:MUBUF;name:'buffer_store_format_xyz';pfmt:'v[0:2], v0, s[0:3], s0';descr:''),
(code:$E2200000;code3:       $0;enc:MUBUF;name:'buffer_load_ubyte';pfmt:'v0, v0, s[0:3], s0';descr:'Untyped buffer load unsigned byte'),
(code:$E2280000;code3:       $0;enc:MUBUF;name:'buffer_load_ushort';pfmt:'v0, v0, s[0:3], s0';descr:'Untyped buffer load unsigned short'),
(code:$E2300000;code3:       $0;enc:MUBUF;name:'buffer_load_dword';pfmt:'v0, v0, s[0:3], s0';descr:'Untyped buffer load dword'),
(code:$E2380000;code3:       $0;enc:MUBUF;name:'buffer_load_dwordx4';pfmt:'v[0:3], v0, s[0:3], s0';descr:'Untyped buffer load 4 dwords'),
(code:$E2400000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_16';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E2480000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_18';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E2500000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_20';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E2580000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_22';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E2600000;code3:       $0;enc:MUBUF;name:'buffer_store_byte';pfmt:'v0, v0, s[0:3], s0';descr:'Untyped buffer store byte'),
(code:$E2680000;code3:       $0;enc:MUBUF;name:'buffer_store_short';pfmt:'v0, v0, s[0:3], s0';descr:'Untyped buffer store short'),
(code:$E2700000;code3:       $0;enc:MUBUF;name:'buffer_store_dword';pfmt:'v0, v0, s[0:3], s0';descr:'Untyped buffer store dword'),
(code:$E2780000;code3:       $0;enc:MUBUF;name:'buffer_store_dwordx4';pfmt:'v[0:3], v0, s[0:3], s0';descr:'Untyped buffer store 4 dwords'),
(code:$E2800000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_32';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E2880000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_34';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E2900000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_36';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E2980000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_38';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E2A00000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_40';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E2A80000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_42';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E2B00000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_44';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E2B80000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_46';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E2C00000;code3:       $0;enc:MUBUF;name:'buffer_atomic_swap';pfmt:'v0, v0, s[0:3], s0';descr:'32b. dst=src, returns previous value if glc==1'),
(code:$E2C80000;code3:       $0;enc:MUBUF;name:'buffer_atomic_add';pfmt:'v0, v0, s[0:3], s0';descr:'32b, dst += src. returns previous value if glc==1'),
(code:$E2D00000;code3:       $0;enc:MUBUF;name:'buffer_atomic_rsub';pfmt:'v0, v0, s[0:3], s0';descr:'32b, dst = src-dst. returns previous value if glc==1'),
(code:$E2D80000;code3:       $0;enc:MUBUF;name:'buffer_atomic_umin';pfmt:'v0, v0, s[0:3], s0';descr:'32b, dst = (src < dst) ? src : dst (unsigned). returns previous value if glc==1'),
(code:$E2E00000;code3:       $0;enc:MUBUF;name:'buffer_atomic_umax';pfmt:'v0, v0, s[0:3], s0';descr:'32b, dst = (src > dst) ? src : dst (unsigned). returns previous value if glc==1'),
(code:$E2E80000;code3:       $0;enc:MUBUF;name:'buffer_atomic_or';pfmt:'v0, v0, s[0:3], s0';descr:'32b, dst |= src. returns previous value if glc==1'),
(code:$E2F00000;code3:       $0;enc:MUBUF;name:'buffer_atomic_inc';pfmt:'v0, v0, s[0:3], s0';descr:'32b, dst = (dst >= src) ? 0 : dst+1. returns previous value if glc==1'),
(code:$E2F80000;code3:       $0;enc:MUBUF;name:'buffer_atomic_fcmpswap';pfmt:'v[0:1], v0, s[0:3], s0';descr:'32b , dst = (dst == cmp) ? src : dst, returns previous value if glc==1. float compare swap (handles NaN/INF/denorm). src comes from the first data-vgpr, cmp from the second.'),
(code:$E3000000;code3:       $0;enc:MUBUF;name:'buffer_atomic_fmax';pfmt:'v0, v0, s[0:3], s0';descr:'32b , dst = (src > dst) ? src : dst, returns previous value if glc==1. float, handles NaN/INF/denorm'),
(code:$E3080000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_66';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E3100000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_68';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E3180000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_70';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E3200000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_72';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E3280000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_74';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E3300000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_76';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E3380000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_78';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E3400000;code3:       $0;enc:MUBUF;name:'buffer_atomic_swap_x2';pfmt:'v[0:1], v0, s[0:3], s0';descr:'64b. dst=src, returns previous value if glc==1'),
(code:$E3480000;code3:       $0;enc:MUBUF;name:'buffer_atomic_add_x2';pfmt:'v[0:1], v0, s[0:3], s0';descr:'64b, dst += src. returns previous value if glc==1'),
(code:$E3500000;code3:       $0;enc:MUBUF;name:'buffer_atomic_rsub_x2';pfmt:'v[0:1], v0, s[0:3], s0';descr:'64b, dst = src-dst. returns previous value if glc==1'),
(code:$E3580000;code3:       $0;enc:MUBUF;name:'buffer_atomic_umin_x2';pfmt:'v[0:1], v0, s[0:3], s0';descr:'64b, dst = (src < dst) ? src : dst (unsigned). returns previous value if glc==1'),
(code:$E3600000;code3:       $0;enc:MUBUF;name:'buffer_atomic_umax_x2';pfmt:'v[0:1], v0, s[0:3], s0';descr:'64b, dst = (src > dst) ? src : dst (unsigned). returns previous value if glc==1'),
(code:$E3680000;code3:       $0;enc:MUBUF;name:'buffer_atomic_or_x2';pfmt:'v[0:1], v0, s[0:3], s0';descr:'64b, dst |= src. returns previous value if glc==1'),
(code:$E3700000;code3:       $0;enc:MUBUF;name:'buffer_atomic_inc_x2';pfmt:'v[0:1], v0, s[0:3], s0';descr:'64b, dst = (dst >= src) ? 0 : dst+1. returns previous value if glc==1'),
(code:$E3780000;code3:       $0;enc:MUBUF;name:'buffer_atomic_fcmpswap_x2';pfmt:'v[0:3], v0, s[0:3], s0';descr:'64b , dst = (dst == cmp) ? src : dst, returns previous value if glc==1. double compare swap (handles NaN/INF/denorm). src comes from the first two data-vgprs, cmp from the second two.'),
(code:$E3800000;code3:       $0;enc:MUBUF;name:'buffer_atomic_fmax_x2';pfmt:'v[0:1], v0, s[0:3], s0';descr:'64b , dst = (src > dst) ? src : dst, returns previous value if glc==1.  double, handles NaN/INF/denorm'),
(code:$E3880000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_98';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E3900000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_100';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E3980000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_102';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E3A00000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_104';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E3A80000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_106';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E3B00000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_108';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E3B80000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_110';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E3C00000;code3:       $0;enc:MUBUF;name:'buffer_wbinvl1_sc';pfmt:'';descr:'write back and invalidate the shader L1 only for lines of MTYPE SC and GC. Always returns ACK to shader.'),
(code:$E3C80000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_114';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E3D00000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_116';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E3D80000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_118';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E3E00000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_120';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E3E80000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_122';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E3F00000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_124';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E3F80000;code3:       $0;enc:MUBUF;name:'MUBUF_invalid_126';pfmt:'v0, v0, s[0:3], s0';descr:''),
(code:$E8000000;code3:       $0;enc:MTBUF;name:'tbuffer_load_format_x';pfmt:'v0, v0, s[0:3], s0 format:[BUF_DATA_FORMAT_INVALID]';descr:'Untyped buffer load 1 dword with format conversion'),
(code:$E8010000;code3:       $0;enc:MTBUF;name:'tbuffer_load_format_xy';pfmt:'v[0:1], v0, s[0:3], s0 format:[BUF_DATA_FORMAT_INVALID]';descr:'Untyped buffer load 2 dwords with format conversion'),
(code:$E8020000;code3:       $0;enc:MTBUF;name:'tbuffer_load_format_xyz';pfmt:'v[0:2], v0, s[0:3], s0 format:[BUF_DATA_FORMAT_INVALID]';descr:'Untyped buffer load 3 dwords with format conversion'),
(code:$E8030000;code3:       $0;enc:MTBUF;name:'tbuffer_load_format_xyzw';pfmt:'v[0:3], v0, s[0:3], s0 format:[BUF_DATA_FORMAT_INVALID]';descr:'Untyped buffer load 4 dwords with format conversion'),
(code:$E8040000;code3:       $0;enc:MTBUF;name:'tbuffer_store_format_x';pfmt:'v0, v0, s[0:3], s0 format:[BUF_DATA_FORMAT_INVALID]';descr:'Untyped buffer store 1 dword with format conversion'),
(code:$E8050000;code3:       $0;enc:MTBUF;name:'tbuffer_store_format_xy';pfmt:'v[0:1], v0, s[0:3], s0 format:[BUF_DATA_FORMAT_INVALID]';descr:'Untyped buffer store 2 dwords with format conversion'),
(code:$E8060000;code3:       $0;enc:MTBUF;name:'tbuffer_store_format_xyz';pfmt:'v[0:2], v0, s[0:3], s0 format:[BUF_DATA_FORMAT_INVALID]';descr:'Untyped buffer store 3 dwords with format conversion'),
(code:$E8070000;code3:       $0;enc:MTBUF;name:'tbuffer_store_format_xyzw';pfmt:'v[0:3], v0, s[0:3], s0 format:[BUF_DATA_FORMAT_INVALID]';descr:'Untyped buffer store 4 dwords with format conversion'),
(code:$F0000000;code3:       $0;enc:MIMG;name:'image_load';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:'Image memory load with format conversion specified in T#. no sampler.'),
(code:$F0080000;code3:       $0;enc:MIMG;name:'image_load_pck';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:'Image memory load with no format conversion. no sampler.'),
(code:$F0100000;code3:       $0;enc:MIMG;name:'image_load_mip_pck';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:'Image memory load with user-supplied mip level, no format conversion. no sampler.'),
(code:$F0180000;code3:       $0;enc:MIMG;name:'MIMG_invalid_6';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:''),
(code:$F0200000;code3:       $0;enc:MIMG;name:'image_store';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:'Image memory store with format conversion specified in T#. no sampler.'),
(code:$F0280000;code3:       $0;enc:MIMG;name:'image_store_pck';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:'Image memory store of packed data without format conversion . no sampler.'),
(code:$F0300000;code3:       $0;enc:MIMG;name:'MIMG_invalid_12';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:''),
(code:$F0380000;code3:       $0;enc:MIMG;name:'image_get_resinfo';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:'return resource info. no sampler.'),
(code:$F0400000;code3:       $0;enc:MIMG;name:'image_atomic_cmpswap';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:'dst = (dst==cmp) ? src : dst. returns previous value if glc==1'),
(code:$F0480000;code3:       $0;enc:MIMG;name:'image_atomic_sub';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:'dst -= src. returns previous value if glc==1'),
(code:$F0500000;code3:       $0;enc:MIMG;name:'image_atomic_smin';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:'dst = (src < dst) ? src : dst (signed). returns previous value if glc==1'),
(code:$F0580000;code3:       $0;enc:MIMG;name:'image_atomic_smax';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:'dst = (src > dst) ? src : dst (signed). returns previous value if glc==1'),
(code:$F0600000;code3:       $0;enc:MIMG;name:'image_atomic_and';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:'dst &= src. returns previous value if glc==1'),
(code:$F0680000;code3:       $0;enc:MIMG;name:'image_atomic_xor';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:'dst ^= src. returns previous value if glc==1'),
(code:$F0700000;code3:       $0;enc:MIMG;name:'image_atomic_dec';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:'dst = ((dst==0 || (dst > src)) ? src : dst-1. returns previous value if glc==1'),
(code:$F0780000;code3:       $0;enc:MIMG;name:'image_atomic_fmin';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:'dst = (src < dst) ? src : dst, returns previous value of dst if glc==1 -      double and  float atomic min (handles NaN/INF/denorm)'),
(code:$F0800000;code3:       $0;enc:MIMG;name:'image_sample';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'sample texture map.'),
(code:$F0880000;code3:       $0;enc:MIMG;name:'image_sample_d';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'sample texture map, with user derivatives'),
(code:$F0900000;code3:       $0;enc:MIMG;name:'image_sample_l';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'sample texture map, with user LOD.'),
(code:$F0980000;code3:       $0;enc:MIMG;name:'image_sample_b_cl';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'sample texture map, with LOD clamp specified in shader, with lod bias.'),
(code:$F0A00000;code3:       $0;enc:MIMG;name:'image_sample_c';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'sample texture map, with PCF.'),
(code:$F0A80000;code3:       $0;enc:MIMG;name:'image_sample_c_d';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'SAMPLE_C, with user derivatives.'),
(code:$F0B00000;code3:       $0;enc:MIMG;name:'image_sample_c_l';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'SAMPLE_C, with user LOD.'),
(code:$F0B80000;code3:       $0;enc:MIMG;name:'image_sample_c_b_cl';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'SAMPLE_C, with LOD clamp specified in shader, with lod bias.'),
(code:$F0C00000;code3:       $0;enc:MIMG;name:'image_sample_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'sample texture map, with user offsets.'),
(code:$F0C80000;code3:       $0;enc:MIMG;name:'image_sample_d_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'SAMPLE_O, with user derivatives.'),
(code:$F0D00000;code3:       $0;enc:MIMG;name:'image_sample_l_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'SAMPLE_O, with user LOD.'),
(code:$F0D80000;code3:       $0;enc:MIMG;name:'image_sample_b_cl_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'SAMPLE_O, with LOD clamp specified in shader, with lod bias.'),
(code:$F0E00000;code3:       $0;enc:MIMG;name:'image_sample_c_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'SAMPLE_C with user specified offsets.'),
(code:$F0E80000;code3:       $0;enc:MIMG;name:'image_sample_c_d_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'SAMPLE_C_O, with user derivatives.'),
(code:$F0F00000;code3:       $0;enc:MIMG;name:'image_sample_c_l_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'SAMPLE_C_O, with user LOD.'),
(code:$F0F80000;code3:       $0;enc:MIMG;name:'image_sample_c_b_cl_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'SAMPLE_C_O, with LOD clamp specified in shader, with lod bias.'),
(code:$F1000000;code3:       $0;enc:MIMG;name:'image_gather4';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'gather 4 single component elements (2x2).'),
(code:$F1080000;code3:       $0;enc:MIMG;name:'MIMG_invalid_66';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:''),
(code:$F1100000;code3:       $0;enc:MIMG;name:'image_gather4_l';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'gather 4 single component elements (2x2) with user LOD.'),
(code:$F1180000;code3:       $0;enc:MIMG;name:'image_gather4_b_cl';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'gather 4 single component elements (2x2) with user bias and clamp.'),
(code:$F1200000;code3:       $0;enc:MIMG;name:'image_gather4_c';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'gather 4 single component elements (2x2) with PCF.'),
(code:$F1280000;code3:       $0;enc:MIMG;name:'MIMG_invalid_74';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:''),
(code:$F1300000;code3:       $0;enc:MIMG;name:'image_gather4_c_l';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'gather 4 single component elements (2x2) with user LOD and PCF.'),
(code:$F1380000;code3:       $0;enc:MIMG;name:'image_gather4_c_b_cl';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'gather 4 single component elements (2x2) with user bias, clamp and PCF.'),
(code:$F1400000;code3:       $0;enc:MIMG;name:'image_gather4_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'GATHER4, with user offsets.'),
(code:$F1480000;code3:       $0;enc:MIMG;name:'MIMG_invalid_82';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:''),
(code:$F1500000;code3:       $0;enc:MIMG;name:'image_gather4_l_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'GATHER4_L, with user offsets.'),
(code:$F1580000;code3:       $0;enc:MIMG;name:'image_gather4_b_cl_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'GATHER4_B_CL, with user offsets.'),
(code:$F1600000;code3:       $0;enc:MIMG;name:'image_gather4_c_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'GATHER4_C, with user offsets.'),
(code:$F1680000;code3:       $0;enc:MIMG;name:'MIMG_invalid_90';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:''),
(code:$F1700000;code3:       $0;enc:MIMG;name:'image_gather4_c_l_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'GATHER4_C_L, with user offsets.'),
(code:$F1780000;code3:       $0;enc:MIMG;name:'image_gather4_c_b_cl_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:''),
(code:$F1800000;code3:       $0;enc:MIMG;name:'image_get_lod';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'Return calculated LOD.'),
(code:$F1880000;code3:       $0;enc:MIMG;name:'MIMG_invalid_98';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:''),
(code:$F1900000;code3:       $0;enc:MIMG;name:'MIMG_invalid_100';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:''),
(code:$F1980000;code3:       $0;enc:MIMG;name:'MIMG_invalid_102';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:''),
(code:$F1A00000;code3:       $0;enc:MIMG;name:'image_sample_cd';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'sample texture map, with user derivatives (LOD per quad)'),
(code:$F1A80000;code3:       $0;enc:MIMG;name:'image_sample_c_cd';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'SAMPLE_C, with user derivatives (LOD per quad).'),
(code:$F1B00000;code3:       $0;enc:MIMG;name:'image_sample_cd_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'SAMPLE_O, with user derivatives (LOD per quad).'),
(code:$F1B80000;code3:       $0;enc:MIMG;name:'image_sample_c_cd_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0';descr:'SAMPLE_C_O, with user derivatives (LOD per quad).'),
(code:$F1C00000;code3:       $0;enc:MIMG;name:'MIMG_invalid_112';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:''),
(code:$F1C80000;code3:       $0;enc:MIMG;name:'MIMG_invalid_114';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:''),
(code:$F1D00000;code3:       $0;enc:MIMG;name:'MIMG_invalid_116';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:''),
(code:$F1D80000;code3:       $0;enc:MIMG;name:'MIMG_invalid_118';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:''),
(code:$F1E00000;code3:       $0;enc:MIMG;name:'MIMG_invalid_120';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:''),
(code:$F1E80000;code3:       $0;enc:MIMG;name:'MIMG_invalid_122';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:''),
(code:$F1F00000;code3:       $0;enc:MIMG;name:'MIMG_invalid_124';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:''),
(code:$F1F80000;code3:       $0;enc:MIMG;name:'image_rsrc256';pfmt:'v0, v[0:3], s[0:7] dmask:0x0';descr:'DO NOT USE - for sq_ta_cmd bus only.'),
(code:$F2000000;code3:       $0;enc:MIMG;name:'image_load';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:'Image memory load with format conversion specified in T#. no sampler.'),
(code:$F2080000;code3:       $0;enc:MIMG;name:'image_load_pck';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:'Image memory load with no format conversion. no sampler.'),
(code:$F2100000;code3:       $0;enc:MIMG;name:'image_load_mip_pck';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:'Image memory load with user-supplied mip level, no format conversion. no sampler.'),
(code:$F2180000;code3:       $0;enc:MIMG;name:'MIMG_invalid_6';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:''),
(code:$F2200000;code3:       $0;enc:MIMG;name:'image_store';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:'Image memory store with format conversion specified in T#. no sampler.'),
(code:$F2280000;code3:       $0;enc:MIMG;name:'image_store_pck';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:'Image memory store of packed data without format conversion . no sampler.'),
(code:$F2300000;code3:       $0;enc:MIMG;name:'MIMG_invalid_12';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:''),
(code:$F2380000;code3:       $0;enc:MIMG;name:'image_get_resinfo';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:'return resource info. no sampler.'),
(code:$F2400000;code3:       $0;enc:MIMG;name:'image_atomic_cmpswap';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:'dst = (dst==cmp) ? src : dst. returns previous value if glc==1'),
(code:$F2480000;code3:       $0;enc:MIMG;name:'image_atomic_sub';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:'dst -= src. returns previous value if glc==1'),
(code:$F2500000;code3:       $0;enc:MIMG;name:'image_atomic_smin';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:'dst = (src < dst) ? src : dst (signed). returns previous value if glc==1'),
(code:$F2580000;code3:       $0;enc:MIMG;name:'image_atomic_smax';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:'dst = (src > dst) ? src : dst (signed). returns previous value if glc==1'),
(code:$F2600000;code3:       $0;enc:MIMG;name:'image_atomic_and';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:'dst &= src. returns previous value if glc==1'),
(code:$F2680000;code3:       $0;enc:MIMG;name:'image_atomic_xor';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:'dst ^= src. returns previous value if glc==1'),
(code:$F2700000;code3:       $0;enc:MIMG;name:'image_atomic_dec';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:'dst = ((dst==0 || (dst > src)) ? src : dst-1. returns previous value if glc==1'),
(code:$F2780000;code3:       $0;enc:MIMG;name:'image_atomic_fmin';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:'dst = (src < dst) ? src : dst, returns previous value of dst if glc==1 -      double and  float atomic min (handles NaN/INF/denorm)'),
(code:$F2800000;code3:       $0;enc:MIMG;name:'image_sample';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'sample texture map.'),
(code:$F2880000;code3:       $0;enc:MIMG;name:'image_sample_d';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'sample texture map, with user derivatives'),
(code:$F2900000;code3:       $0;enc:MIMG;name:'image_sample_l';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'sample texture map, with user LOD.'),
(code:$F2980000;code3:       $0;enc:MIMG;name:'image_sample_b_cl';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'sample texture map, with LOD clamp specified in shader, with lod bias.'),
(code:$F2A00000;code3:       $0;enc:MIMG;name:'image_sample_c';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'sample texture map, with PCF.'),
(code:$F2A80000;code3:       $0;enc:MIMG;name:'image_sample_c_d';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'SAMPLE_C, with user derivatives.'),
(code:$F2B00000;code3:       $0;enc:MIMG;name:'image_sample_c_l';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'SAMPLE_C, with user LOD.'),
(code:$F2B80000;code3:       $0;enc:MIMG;name:'image_sample_c_b_cl';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'SAMPLE_C, with LOD clamp specified in shader, with lod bias.'),
(code:$F2C00000;code3:       $0;enc:MIMG;name:'image_sample_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'sample texture map, with user offsets.'),
(code:$F2C80000;code3:       $0;enc:MIMG;name:'image_sample_d_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'SAMPLE_O, with user derivatives.'),
(code:$F2D00000;code3:       $0;enc:MIMG;name:'image_sample_l_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'SAMPLE_O, with user LOD.'),
(code:$F2D80000;code3:       $0;enc:MIMG;name:'image_sample_b_cl_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'SAMPLE_O, with LOD clamp specified in shader, with lod bias.'),
(code:$F2E00000;code3:       $0;enc:MIMG;name:'image_sample_c_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'SAMPLE_C with user specified offsets.'),
(code:$F2E80000;code3:       $0;enc:MIMG;name:'image_sample_c_d_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'SAMPLE_C_O, with user derivatives.'),
(code:$F2F00000;code3:       $0;enc:MIMG;name:'image_sample_c_l_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'SAMPLE_C_O, with user LOD.'),
(code:$F2F80000;code3:       $0;enc:MIMG;name:'image_sample_c_b_cl_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'SAMPLE_C_O, with LOD clamp specified in shader, with lod bias.'),
(code:$F3000000;code3:       $0;enc:MIMG;name:'image_gather4';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'gather 4 single component elements (2x2).'),
(code:$F3080000;code3:       $0;enc:MIMG;name:'MIMG_invalid_66';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:''),
(code:$F3100000;code3:       $0;enc:MIMG;name:'image_gather4_l';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'gather 4 single component elements (2x2) with user LOD.'),
(code:$F3180000;code3:       $0;enc:MIMG;name:'image_gather4_b_cl';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'gather 4 single component elements (2x2) with user bias and clamp.'),
(code:$F3200000;code3:       $0;enc:MIMG;name:'image_gather4_c';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'gather 4 single component elements (2x2) with PCF.'),
(code:$F3280000;code3:       $0;enc:MIMG;name:'MIMG_invalid_74';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:''),
(code:$F3300000;code3:       $0;enc:MIMG;name:'image_gather4_c_l';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'gather 4 single component elements (2x2) with user LOD and PCF.'),
(code:$F3380000;code3:       $0;enc:MIMG;name:'image_gather4_c_b_cl';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'gather 4 single component elements (2x2) with user bias, clamp and PCF.'),
(code:$F3400000;code3:       $0;enc:MIMG;name:'image_gather4_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'GATHER4, with user offsets.'),
(code:$F3480000;code3:       $0;enc:MIMG;name:'MIMG_invalid_82';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:''),
(code:$F3500000;code3:       $0;enc:MIMG;name:'image_gather4_l_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'GATHER4_L, with user offsets.'),
(code:$F3580000;code3:       $0;enc:MIMG;name:'image_gather4_b_cl_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'GATHER4_B_CL, with user offsets.'),
(code:$F3600000;code3:       $0;enc:MIMG;name:'image_gather4_c_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'GATHER4_C, with user offsets.'),
(code:$F3680000;code3:       $0;enc:MIMG;name:'MIMG_invalid_90';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:''),
(code:$F3700000;code3:       $0;enc:MIMG;name:'image_gather4_c_l_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'GATHER4_C_L, with user offsets.'),
(code:$F3780000;code3:       $0;enc:MIMG;name:'image_gather4_c_b_cl_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:''),
(code:$F3800000;code3:       $0;enc:MIMG;name:'image_get_lod';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'Return calculated LOD.'),
(code:$F3880000;code3:       $0;enc:MIMG;name:'MIMG_invalid_98';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:''),
(code:$F3900000;code3:       $0;enc:MIMG;name:'MIMG_invalid_100';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:''),
(code:$F3980000;code3:       $0;enc:MIMG;name:'MIMG_invalid_102';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:''),
(code:$F3A00000;code3:       $0;enc:MIMG;name:'image_sample_cd';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'sample texture map, with user derivatives (LOD per quad)'),
(code:$F3A80000;code3:       $0;enc:MIMG;name:'image_sample_c_cd';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'SAMPLE_C, with user derivatives (LOD per quad).'),
(code:$F3B00000;code3:       $0;enc:MIMG;name:'image_sample_cd_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'SAMPLE_O, with user derivatives (LOD per quad).'),
(code:$F3B80000;code3:       $0;enc:MIMG;name:'image_sample_c_cd_o';pfmt:'v0, v[0:3], s[0:7], s[0:3] dmask:0x0 slc';descr:'SAMPLE_C_O, with user derivatives (LOD per quad).'),
(code:$F3C00000;code3:       $0;enc:MIMG;name:'MIMG_invalid_112';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:''),
(code:$F3C80000;code3:       $0;enc:MIMG;name:'MIMG_invalid_114';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:''),
(code:$F3D00000;code3:       $0;enc:MIMG;name:'MIMG_invalid_116';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:''),
(code:$F3D80000;code3:       $0;enc:MIMG;name:'MIMG_invalid_118';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:''),
(code:$F3E00000;code3:       $0;enc:MIMG;name:'MIMG_invalid_120';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:''),
(code:$F3E80000;code3:       $0;enc:MIMG;name:'MIMG_invalid_122';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:''),
(code:$F3F00000;code3:       $0;enc:MIMG;name:'MIMG_invalid_124';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:''),
(code:$F3F80000;code3:       $0;enc:MIMG;name:'image_rsrc256';pfmt:'v0, v[0:3], s[0:7] dmask:0x0 slc';descr:'DO NOT USE - for sq_ta_cmd bus only.'),

//extras:
//renamed i32->u32. Both supported ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
(code:$4A000000;code3:       $0;enc:VOP2;name:'v_add_u32';pfmt:'v0, vcc, s0, v0';descr:'D.u = S0.u + S1.u; VCC=carry-out (VOP3:sgpr=carry-out)'),
(code:$4C000000;code3:       $0;enc:VOP2;name:'v_sub_u32';pfmt:'v0, vcc, s0, v0';descr:'D.u = S0.u - S1.u; VCC=carry-out (VOP3:sgpr=carry-out).'),
(code:$4E000000;code3:       $0;enc:VOP2;name:'v_subrev_u32';pfmt:'v0, vcc, s0, v0';descr:'D.u = S1.u - S0.u; VCC=carry-out (VOP3:sgpr=carry-out). SQ translates to V_SUB_I32'),
(code:$D24A0000;code3:       $0;enc:VOP3;name:'v_add_u32';pfmt:'v0, s[0:1], s0, s0';descr:'D.u = S0.u + S1.u; VCC=carry-out (VOP3:sgpr=carry-out)'),
(code:$D24C0000;code3:       $0;enc:VOP3;name:'v_sub_u32';pfmt:'v0, s[0:1], s0, s0';descr:'D.u = S0.u - S1.u; VCC=carry-out (VOP3:sgpr=carry-out).'),
(code:$D24E0000;code3:       $0;enc:VOP3;name:'v_subrev_u32';pfmt:'v0, s[0:1], s0, s0';descr:'D.u = S1.u - S0.u; VCC=carry-out (VOP3:sgpr=carry-out). SQ translates to V_SUB_I32'),

//not equal = less or greater
(code:$7D0A0000;code3:       $0;enc:VOPC;name:'v_cmp_lg_i32';pfmt:'vcc, s0, v0';descr:'D(sgpr).u = (S0 <> S1); D = VCC in VOPC'),
(code:$D10A0000;code3:       $0;enc:VOP3;name:'v_cmp_lg_i32';pfmt:'s[0:1], s0, s0';descr:'D(sgpr).u = (S0 <> S1); D = VCC in VOPC'),
(code:$7D8A0000;code3:       $0;enc:VOPC;name:'v_cmp_lg_u32';pfmt:'vcc, s0, v0';descr:''),
(code:$D18A0000;code3:       $0;enc:VOP3;name:'v_cmp_lg_u32';pfmt:'s[0:1], s0, s0';descr:'')

//buffer_xxxx_dwordx2
//(code:$E0740000;code3:       $0;enc:MUBUF;name:'buffer_store_dwordx2';pfmt:'v[0:3], v0, s[0:3], s0';descr:'Untyped buffer store 2 dwords'),
//(code:$E0340000;code3:       $0;enc:MUBUF;name:'buffer_load_dwordx2';pfmt:'v[0:3], v0, s[0:3], s0';descr:'Untyped buffer load 2 dwords')

);

const
  ISAHWRegNames:array[1..12]of ansistring=(  //1based on purpose
    'HW_REG_MODE', 'HW_REG_STATUS', 'HW_REG_TRAPSTS', 'HW_REG_HW_ID',
    'HW_REG_GPR_ALLOC', 'HW_REG_LDS_ALLOC', 'HW_REG_IB_STS', 'HW_REG_PC_LO',
    'HW_REG_PC_HI', 'HW_REG_INST_DW0', 'HW_REG_INST_DW1', 'HW_REG_IB_DBG0');

var
  ISA_BUF_DATA_FORMATS,
  ISA_BUF_NUM_FORMATS,
  ISAOptionNames,
  ISAKeywordList:TArray<ansistring>;
  ISAInstrHashList:TArray<integer>;

implementation

function ILModifierByName(const name:ansistring):TILModifierEnum;
var idx:integer;
    found:boolean;
begin
  found:=RawFindBinary(ILModifierList,length(ILModifierList),sizeof(TILModifierRec),0,
    function(const d):integer begin result:=Cmp(name,AnsiString(d))end,idx);

  if not found then idx:=-1;
  result:=TILModifierEnum(idx);
end;

function ILInstrByName(const name:ansistring):PILInstrRec;
var idx:integer;
    found:boolean;
begin
  found:=RawFindBinary(ILInstrList[0].name,length(ILInstrList),sizeof(ILInstrList[0]),0,
    function(const d):integer begin result:=Cmp(name,AnsiString(d))end,idx);

  if found then result:=@ILInstrList[idx]
           else result:=nil;
end;

function ILInstrExists(const NameHash:integer):boolean;
begin
  result:=FindBinIntArray(ILInstrHashList,NameHash)>=0;
end;

procedure InitILTables;
var i,j:integer;
    t:TILInstrRec;
    s:ansistring;
    m:TILModifierEnum;
begin
  //fucking excel cant sort '_'
  for i:=0 to high(ILInstrList)-1do for j:=i+1 to high(ILInstrList)do
    if cmp(ILInstrList[i].name,ILInstrList[j].name)>0 then begin
      t:=ILInstrList[i];ILInstrList[i]:=ILInstrList[j];ILInstrList[j]:=t end;

  //modifierNameList/OptionNameList  //for syntax highlight/code insight
  for m:=Low(TILModifierEnum)to high(TILModifierEnum)do with ILModifierList[m]do begin
    if multiMod='' then AddStrArrayNoCheck(ILModifierNameList,name)
                   else for s in ListSplit(multiMod,',')do AddStrArrayNoCheck(ILModifierNameList,s);
    for s in ListSplit(optionFmt,',')do if charn(s,1)in['a'..'z','A'..'Z']then AddStrArray(ILOptionNameList,s);
  end;
  SortStrArray(ILModifierNameList);
  SortStrArray(ILOptionNameList);

  //full keywordlist //for code insight
  for i:=0 to high(ILInstrList)do AddStrArrayNoCheck(ILKeywordList,ILInstrList[i].name);
  for s in ILModifierNameList do AddStrArrayNoCheck(ILKeywordList,s);
  for s in ILOptionNameList do if Length(s)>1 then AddStrArrayNoCheck(ILKeywordList,s);
  for i:=0 to high(ILRegisterList)do begin
    s:=ILRegisterList[i].name;
    //if lc(s[length(s)])in['a'..'z']then AddStrArrayNoCheck(ILKeywordList,s+'0');//vAbsTidFlat0 is valid //not in code insight!!
    replace('*','',s,[roAll]);
    replace('[]','',s,[roAll]);
    if length(s)>1 then
      AddStrArrayNoCheck(ILKeywordList,s);
  end;
  SortStrArray(ILKeywordList);

  //ILInstrHashList
  for i:=0 to high(ILInstrList)do AddIntArrayNoCheck(ILInstrHashList,crc32UC(ILInstrList[i].name));
  SortIntArray(ILInstrHashList);
end;

function ISAVLIW_INSTR_OP2_name(const ACode:integer):ansistring;
var i:integer;
begin
  for i:=0 to high(ISAVLIW_INSTR_OP2_list)do with ISAVLIW_INSTR_OP2_list[i]do
    if ACode=Code then exit(copy(Name,10));
  result:='unknown INSTR_OP2('+toStr(ACode)+')';
end;

function ISAVLIW_INSTR_OP3_name(const ACode:integer):ansistring;
var i:integer;
begin
  for i:=0 to high(ISAVLIW_INSTR_OP3_list)do with ISAVLIW_INSTR_OP3_list[i]do
    if ACode=Code then exit(copy(Name,10));
  result:='unknown INSTR_OP3('+tostr(ACode)+')';
end;

procedure InitISATables;
  const
    Dprefix:ansistring='BUF_DATA_FORMAT_';
    DFormats:array[0..15]of ansistring=(
      'INVALID'         ,''             ,'16'           ,'8_8',
      '32'              ,'16_16'        ,'10_11_11'     ,'11_11_10',
      '10_10_10_2'      ,'2_10_10_10'   ,'8_8_8_8'      ,'32_32',
      '16_16_16_16'     ,'32_32_32'     ,'32_32_32_32'  ,'RESERVED_15');

    Nprefix:ansistring='BUF_NUM_FORMAT_';
    NFormats:array[0..7]of ansistring=(
      ''        ,'SNORM'        ,'USCALED'      ,'SSCALED',
      'UINT'    ,'SINT'         ,'SNORM_OGL'    ,'FLOAT');

  procedure AddKV(const s:ansistring);
  begin
    AddStrArrayNoCheck(ISAKeywordList,s);
  end;

var i,j:integer;
    t:TISAInstrRec;
    s:ansistring;
begin
  //lowercase
  for i:=0 to high(ISAInstrList)do with ISAInstrList[i]do begin
    name:=lc(name);
    addkv(name);
  end;

  //sort
  for i:=0 to high(ISAInstrList)-1do for j:=i+1 to high(ISAInstrList)do
    if cmp(ISAInstrList[i].name,ISAInstrList[j].name)>0 then begin
      t:=ISAInstrList[i];ISAInstrList[i]:=ISAInstrList[j];ISAInstrList[j]:=t end;

  ISAOptionNames:=listsplit('lgkmcnt,vmcnt,expcnt,offset,offset0,offset1,gds,offen,idxen,glc,adr64,format,tfe,lds,ls,slc,vop3,mul,div,clamp,neg,abs,align,ofsbyte,ofsdword',',');
  for s in ISAOptionNames do AddKV(s);                                                                                           //neg es abs az sajat, csak hogy vilagitson

  setlength(ISA_BUF_DATA_FORMATS,length(DFormats));
  for i:=0 to high(ISA_BUF_DATA_FORMATS)do if DFormats[i]<>'' then begin
    s:=DPrefix+DFormats[i];
    ISA_BUF_DATA_FORMATS[i]:=s;
    addkv(s);
    AddStrArray(ISAOptionNames,s);
  end;

  setlength(ISA_BUF_NUM_FORMATS,length(NFormats));
  for i:=0 to high(ISA_BUF_NUM_FORMATS)do if NFormats[i]<>'' then begin
    s:=NPrefix+NFormats[i];
    ISA_BUF_NUM_FORMATS[i]:=s;
    addkv(s);
    AddStrArray(ISAOptionNames,s);
  end;

  //add regnames to keywords
  for s in listsplit('vcc,vcc_lo,vcc_hi,scc,exec,exec_lo,exec_hi,tba,tba_lo,tba_hi,tma,tma_lo,tma_hi,m0,ttmp,src_vccz,src_execz,src_scc,src_lds_direct',',')do
    AddKV(s);

  //add hardware regs to keywords
  for s in ISAHWRegNames do AddKV(s);

  //sort
  SortStrArray(ISAKeywordList);
  SortStrArray(ISAOptionNames);

  //ISAInstrHashList
  for i:=0 to high(ISAInstrList)do AddIntArrayNoCheck(ISAInstrHashList,crc32UC(ISAInstrList[i].name));
  SortIntArray(ISAInstrHashList);

end;

function ISAInstrByName(const AName:ansistring):TArray<PISAInstrRec>;
var found:boolean;
    i,st,en:integer;

begin
  result:=nil;
  found:=RawFindBinary(ISAInstrList,length(ISAInstrList),sizeof(TISAInstrRec),0,
    function(const d):integer begin result:=Cmp(AName,TISAInstrRec(d).name)end,st);
  if not found then exit;

  en:=st;
  while(st>0)and(Cmp(AName,ISAInstrList[st-1].name)=0)do dec(st);
  while(en<high(ISAInstrList))and(Cmp(AName,ISAInstrList[en+1].name)=0)do inc(en);
  setlength(result,en-st+1);
  for i:=0 to high(result)do
    result[i]:=@ISAInstrList[i+st];
end;

function ISAInstrExists(const NameHash:integer):boolean;
begin
  result:=FindBinIntArray(ISAInstrHashList,NameHash)>=0;
end;

////////////////////////////////////////////////////////////////////////////////
///  GCN3                                                                    ///
////////////////////////////////////////////////////////////////////////////////

procedure G3_error(s:string);
begin
  raise Exception.Create('GCN3 instruction patcing error: '+s);
end;

function G3_find(const instr:ansistring;const enc:TIsaInstrEncoding):PISAInstrRec;
var ir:PISAInstrRec;
    i:integer;
begin
  for i:=0 to high(ISAInstrList)do begin
    ir:=@ISAInstrList[i];
     if(ir.enc=enc)and(ir.name=instr)then exit(ir);
  end;
  result:=nil;
end;

procedure G3_add(instr:ansistring; const enc:TIsaInstrEncoding; code:integer);
var ir:PISAInstrRec;
begin
  ir:=G3_find(instr, enc);
  if ir=nil then G3_error('Cant find: instr:"'+instr+'", enc:'+ToStr(ord(enc)));
  if ir.code3<>0 then G3_error('code3=0 expected. Possibly redefined. "'+instr+'", end'+tostr(ord(enc)));

  ir.code3:=code; //patch it
end;

procedure G3_SMEM  (op:integer;       instr:ansistring); begin G3_add(instr, SMRD , $C0000000+cardinal(op )shl 18); end;
procedure G3_MUBUF (op:integer;       instr:ansistring); begin G3_add(instr, MUBUF, $E0000000+cardinal(op )shl 18); end;
procedure G3_SOPP  (op:integer;       instr:ansistring); begin G3_add(instr, SOPP , $BF800000+cardinal(op )shl 16); end;
procedure G3_SOPK  (op:integer;       instr:ansistring); begin G3_add(instr, SOPK , $B0000000+cardinal(op )shl 23); end;
procedure G3_SOP1  (op:integer;       instr:ansistring); begin G3_add(instr, SOP1 , $BE800000+cardinal(op )shl  8); end;
procedure G3_SOP2  (op:integer;       instr:ansistring); begin G3_add(instr, SOP2 , $80000000+cardinal(op )shl 23); end;
procedure G3_VOP3  (op:integer;       instr:ansistring); begin G3_add(instr, VOP3 , $D0000000+cardinal(op )shl 16); end;
procedure G3_VOP13a(op1, op3:integer; instr:ansistring); begin G3_add(instr, VOP1 , $7E000000+cardinal(op1)shl  9); G3_VOP3(op3, instr); end;
procedure G3_VOP23a(op2, op3:integer; instr:ansistring); begin G3_add(instr, VOP2 , $00000000+cardinal(op2)shl 25); G3_VOP3(op3, instr); end;
procedure G3_VOPC3a(opc:integer;      instr:ansistring); begin G3_add(instr, VOPC , $7C000000+cardinal(opc)shl 17); G3_VOP3(opc, instr); end;

procedure PatchIn_GCN3;
begin
  G3_SMEM( 8, 's_buffer_load_dword');
  G3_SMEM(10, 's_buffer_load_dwordx4');

////////////////////////////////////////////////////////////////////////////////
///   Instruction listing created by: matszpk@interia.pl                     ///
///     CLRadeonExtender  http://clrx.nativeboinc.org/                       ///
////////////////////////////////////////////////////////////////////////////////

(*
    { "s_load_dword",        GCNENC_SMRD,   GCN_MEMOP_MX1|GCN_MLOAD,  0,    ARCH_GCN_ALL  },
    { "s_load_dwordx2",      GCNENC_SMRD,   GCN_MEMOP_MX2|GCN_MLOAD,  1,    ARCH_GCN_ALL  },
    { "s_load_dwordx4",      GCNENC_SMRD,   GCN_MEMOP_MX4|GCN_MLOAD,  2,    ARCH_GCN_ALL  },
    { "s_load_dwordx8",      GCNENC_SMRD,   GCN_MEMOP_MX8|GCN_MLOAD,  3,    ARCH_GCN_ALL  },
    { "s_load_dwordx16",     GCNENC_SMRD,   GCN_MEMOP_MX16|GCN_MLOAD, 4,    ARCH_GCN_ALL  },
//    { "s_buffer_load_dword", GCNENC_SMRD,   GCN_MEMOP_MX1|GCN_SBASE4|GCN_MLOAD,   8,    ARCH_GCN_ALL  },
    { "s_buffer_load_dwordx2",GCNENC_SMRD,   GCN_MEMOP_MX2|GCN_SBASE4|GCN_MLOAD,        9,    ARCH_GCN_ALL  },
//    { "s_buffer_load_dwordx4",GCNENC_SMRD,   GCN_MEMOP_MX4|GCN_SBASE4|GCN_MLOAD,        10,   ARCH_GCN_ALL  },
    { "s_buffer_load_dwordx8",GCNENC_SMRD,   GCN_MEMOP_MX8|GCN_SBASE4|GCN_MLOAD,        11,   ARCH_GCN_ALL },
    { "s_buffer_load_dwordx16",GCNENC_SMRD,   GCN_MEMOP_MX16|GCN_SBASE4|GCN_MLOAD,        12,   ARCH_GCN_ALL  },
    { "s_dcache_inv_vol",    GCNENC_SMRD,   GCN_ARG_NONE,             29,   ARCH_RX2X0     },
    { "s_store_dword",       GCNENC_SMRD,   GCN_MEMOP_MX1,            16,   ARCH_RX3X0  },
    { "s_store_dwordx2",     GCNENC_SMRD,   GCN_MEMOP_MX2,            17,   ARCH_RX3X0  },
    { "s_store_dwordx4",     GCNENC_SMRD,   GCN_MEMOP_MX4,            18,   ARCH_RX3X0  },
    { "s_buffer_store_dword", GCNENC_SMRD,   GCN_MEMOP_MX1|GCN_SBASE4,  24,   ARCH_RX3X0  },
    { "s_buffer_store_dwordx2",GCNENC_SMRD,   GCN_MEMOP_MX2|GCN_SBASE4, 25,   ARCH_RX3X0  },
    { "s_buffer_store_dwordx4",GCNENC_SMRD,   GCN_MEMOP_MX4|GCN_SBASE4, 26,   ARCH_RX3X0  },
    { "s_dcache_inv",        GCNENC_SMRD,   GCN_ARG_NONE,             32,   ARCH_RX3X0  },
    { "s_dcache_wb",         GCNENC_SMRD,   GCN_ARG_NONE,             33,   ARCH_RX3X0  },
    { "s_dcache_inv_vol",    GCNENC_SMRD,   GCN_ARG_NONE,             34,   ARCH_RX3X0  },
    { "s_dcache_wb_vol",     GCNENC_SMRD,   GCN_ARG_NONE,             35,   ARCH_RX3X0  },
    { "s_memtime",           GCNENC_SMRD,   GCN_SMRD_ONLYDST|GCN_MLOAD|GCN_REG_DST_64,        36,   ARCH_RX3X0  },
    { "s_memrealtime",       GCNENC_SMRD,   GCN_SMRD_ONLYDST|GCN_MLOAD|GCN_REG_DST_64,        37,   ARCH_RX3X0  },
    { "s_atc_probe",         GCNENC_SMRD,   GCN_MEMOP_MX1|GCN_SMEM_SDATA_IMM, 38,    ARCH_RX3X0  },
    { "s_atc_probe_buffer",  GCNENC_SMRD,   GCN_MEMOP_MX1|GCN_SBASE4|GCN_SMEM_SDATA_IMM, 39,    ARCH_RX3X0  },
*)

  G3_MUBUF(20, 'buffer_load_dword');
//  G3_MUBUF(21, 'buffer_load_dwordx2');
  G3_MUBUF(23, 'buffer_load_dwordx4');
  G3_MUBUF(28, 'buffer_store_dword');
//  G3_MUBUF(29, 'buffer_store_dwordx2');
  G3_MUBUF(31, 'buffer_store_dwordx4');
  G3_MUBUF(66, 'buffer_atomic_add');

(*
    { "buffer_load_format_x", GCNENC_MUBUF,  GCN_MUBUF_X|GCN_MLOAD,   0,    ARCH_GCN_ALL  },
    { "buffer_load_format_xy", GCNENC_MUBUF,  GCN_MUBUF_XY|GCN_MLOAD, 1,    ARCH_GCN_ALL  },
    { "buffer_load_format_xyz", GCNENC_MUBUF,  GCN_MUBUF_XYZ|GCN_MLOAD, 2,    ARCH_GCN_ALL  },
    { "buffer_load_format_xyzw", GCNENC_MUBUF,  GCN_MUBUF_XYZW|GCN_MLOAD, 3,    ARCH_GCN_ALL  },
    { "buffer_store_format_x", GCNENC_MUBUF,  GCN_MUBUF_X,            4,    ARCH_GCN_ALL  },
    { "buffer_store_format_xy", GCNENC_MUBUF,  GCN_MUBUF_XY,          5,    ARCH_GCN_ALL  },
    { "buffer_store_format_xyz", GCNENC_MUBUF,  GCN_MUBUF_XYZ,        6,    ARCH_GCN_ALL  },
    { "buffer_store_format_xyzw", GCNENC_MUBUF,  GCN_MUBUF_XYZW,      7,    ARCH_GCN_ALL  },
    { "buffer_load_dwordx3", GCNENC_MUBUF,  GCN_MUBUF_MX3|GCN_MLOAD,  15,   ARCH_RX2X0    },
    { "buffer_store_byte",   GCNENC_MUBUF,  GCN_MUBUF_MX1,            24,   ARCH_GCN_ALL  },
    { "buffer_store_short",  GCNENC_MUBUF,  GCN_MUBUF_MX1,            26,   ARCH_GCN_ALL  },
//    { "buffer_store_dword",  GCNENC_MUBUF,  GCN_MUBUF_MX1,            28,   ARCH_GCN_ALL  },
//    { "buffer_store_dwordx2", GCNENC_MUBUF,  GCN_MUBUF_MX2,           29,   ARCH_GCN_ALL  },
    { "buffer_store_dwordx3", GCNENC_MUBUF,  GCN_MUBUF_MX3,           31,   ARCH_RX2X0    },
    { "buffer_store_dwordx3", GCNENC_MUBUF,  GCN_MUBUF_MX3,           30,   ARCH_RX3X0  },
//    { "buffer_store_dwordx4", GCNENC_MUBUF,  GCN_MUBUF_MX4,           31,   ARCH_RX3X0  },
    { "buffer_load_format_d16_x", GCNENC_MUBUF,  GCN_MUBUF_X|GCN_MLOAD, 8,    ARCH_RX3X0  },
    { "buffer_load_format_d16_xy", GCNENC_MUBUF,  GCN_MUBUF_XY|GCN_MLOAD, 9,    ARCH_RX3X0  },
    { "buffer_load_format_d16_xyz", GCNENC_MUBUF,  GCN_MUBUF_XYZ|GCN_MLOAD, 10,   ARCH_RX3X0  },
    { "buffer_load_format_d16_xyzw", GCNENC_MUBUF,  GCN_MUBUF_XYZW|GCN_MLOAD, 11,   ARCH_RX3X0  },
    { "buffer_store_format_d16_x", GCNENC_MUBUF,  GCN_MUBUF_X,        12,   ARCH_RX3X0  },
    { "buffer_store_format_d16_xy", GCNENC_MUBUF,  GCN_MUBUF_XY,      13,   ARCH_RX3X0  },
    { "buffer_store_format_d16_xyz", GCNENC_MUBUF,  GCN_MUBUF_XYZ,    14,   ARCH_RX3X0  },
    { "buffer_store_format_d16_xyzw", GCNENC_MUBUF,  GCN_MUBUF_XYZW,  15,   ARCH_RX3X0  },
    { "buffer_load_ubyte",   GCNENC_MUBUF,  GCN_MUBUF_MX1|GCN_MLOAD,  16,   ARCH_RX3X0  },
    { "buffer_load_sbyte",   GCNENC_MUBUF,  GCN_MUBUF_MX1|GCN_MLOAD,  17,   ARCH_RX3X0  },
    { "buffer_load_ushort",  GCNENC_MUBUF,  GCN_MUBUF_MX1|GCN_MLOAD,  18,   ARCH_RX3X0  },
    { "buffer_load_sshort",  GCNENC_MUBUF,  GCN_MUBUF_MX1|GCN_MLOAD,  19,   ARCH_RX3X0  },
//    { "buffer_load_dword",   GCNENC_MUBUF,  GCN_MUBUF_MX1|GCN_MLOAD,  20,   ARCH_RX3X0  },
//    { "buffer_load_dwordx2", GCNENC_MUBUF,  GCN_MUBUF_MX2|GCN_MLOAD,  21,   ARCH_RX3X0  },
    { "buffer_load_dwordx3", GCNENC_MUBUF,  GCN_MUBUF_MX3|GCN_MLOAD,  22,   ARCH_RX3X0  },
//    { "buffer_load_dwordx4", GCNENC_MUBUF,  GCN_MUBUF_MX4|GCN_MLOAD,  23,   ARCH_RX3X0  },
    { "buffer_store_lds_dword", GCNENC_MUBUF,  GCN_MUBUF_NOVAD,       61,   ARCH_RX3X0  },
    { "buffer_wbinvl1",      GCNENC_MUBUF,  GCN_MUBUF_X|GCN_ARG_NONE, 62,   ARCH_RX3X0  },
    { "buffer_wbinvl1_vol",  GCNENC_MUBUF,  GCN_MUBUF_X|GCN_ARG_NONE, 63,   ARCH_RX3X0  },
    { "buffer_atomic_swap",  GCNENC_MUBUF,  GCN_MUBUF_MX1|GCN_MATOMIC, 64,   ARCH_RX3X0  },
    { "buffer_atomic_cmpswap", GCNENC_MUBUF,  GCN_MUBUF_MX2|GCN_MATOMIC, 65,   ARCH_RX3X0  },
    { "buffer_atomic_add",   GCNENC_MUBUF,  GCN_MUBUF_MX1|GCN_MATOMIC, 66,   ARCH_RX3X0  },
    { "buffer_atomic_sub",   GCNENC_MUBUF,  GCN_MUBUF_MX1|GCN_MATOMIC, 67,   ARCH_RX3X0  },
    { "buffer_atomic_smin",  GCNENC_MUBUF,  GCN_MUBUF_MX1|GCN_MATOMIC, 68,   ARCH_RX3X0  },
    { "buffer_atomic_umin",  GCNENC_MUBUF,  GCN_MUBUF_MX1|GCN_MATOMIC, 69,   ARCH_RX3X0  },
    { "buffer_atomic_smax",  GCNENC_MUBUF,  GCN_MUBUF_MX1|GCN_MATOMIC, 70,   ARCH_RX3X0  },
    { "buffer_atomic_umax",  GCNENC_MUBUF,  GCN_MUBUF_MX1|GCN_MATOMIC, 71,   ARCH_RX3X0  },
    { "buffer_atomic_and",   GCNENC_MUBUF,  GCN_MUBUF_MX1|GCN_MATOMIC, 72,   ARCH_RX3X0  },
    { "buffer_atomic_or",    GCNENC_MUBUF,  GCN_MUBUF_MX1|GCN_MATOMIC, 73,   ARCH_RX3X0  },
    { "buffer_atomic_xor",   GCNENC_MUBUF,  GCN_MUBUF_MX1|GCN_MATOMIC, 74,   ARCH_RX3X0  },
    { "buffer_atomic_inc",   GCNENC_MUBUF,  GCN_MUBUF_MX1|GCN_MATOMIC, 75,   ARCH_RX3X0  },
    { "buffer_atomic_dec",   GCNENC_MUBUF,  GCN_MUBUF_MX1|GCN_MATOMIC, 76,   ARCH_RX3X0  },
    { "buffer_atomic_swap_x2", GCNENC_MUBUF,  GCN_MUBUF_MX2|GCN_MATOMIC, 96,   ARCH_RX3X0  },
    { "buffer_atomic_cmpswap_x2", GCNENC_MUBUF,  GCN_MUBUF_MX4|GCN_MATOMIC, 97,   ARCH_RX3X0  },
    { "buffer_atomic_add_x2", GCNENC_MUBUF,  GCN_MUBUF_MX2|GCN_MATOMIC, 98,   ARCH_RX3X0  },
    { "buffer_atomic_sub_x2", GCNENC_MUBUF,  GCN_MUBUF_MX2|GCN_MATOMIC, 99,   ARCH_RX3X0  },
    { "buffer_atomic_smin_x2", GCNENC_MUBUF,  GCN_MUBUF_MX2|GCN_MATOMIC, 100,  ARCH_RX3X0  },
    { "buffer_atomic_umin_x2", GCNENC_MUBUF,  GCN_MUBUF_MX2|GCN_MATOMIC, 101,  ARCH_RX3X0  },
    { "buffer_atomic_smax_x2", GCNENC_MUBUF,  GCN_MUBUF_MX2|GCN_MATOMIC, 102,  ARCH_RX3X0  },
    { "buffer_atomic_umax_x2", GCNENC_MUBUF,  GCN_MUBUF_MX2|GCN_MATOMIC, 103,  ARCH_RX3X0  },
    { "buffer_atomic_and_x2", GCNENC_MUBUF,  GCN_MUBUF_MX2|GCN_MATOMIC, 104,  ARCH_RX3X0  },
    { "buffer_atomic_or_x2", GCNENC_MUBUF,  GCN_MUBUF_MX2|GCN_MATOMIC, 105,  ARCH_RX3X0  },
    { "buffer_atomic_xor_x2", GCNENC_MUBUF,  GCN_MUBUF_MX2|GCN_MATOMIC, 106,  ARCH_RX3X0  },
    { "buffer_atomic_inc_x2", GCNENC_MUBUF,  GCN_MUBUF_MX2|GCN_MATOMIC, 107,  ARCH_RX3X0  },
    { "buffer_atomic_dec_x2", GCNENC_MUBUF,  GCN_MUBUF_MX2|GCN_MATOMIC, 108,  ARCH_RX3X0  },
*)

  G3_SOPP( 1, 's_endpgm');
  G3_SOPP( 2, 's_branch');
  G3_SOPP( 4, 's_cbranch_scc0');
  G3_SOPP( 5, 's_cbranch_scc1');
  G3_SOPP( 6, 's_cbranch_vccz');
  G3_SOPP( 7, 's_cbranch_vccnz');
  G3_SOPP( 8, 's_cbranch_execz');
  G3_SOPP( 9, 's_cbranch_execnz');
  G3_SOPP(12, 's_waitcnt');

(*
    { "s_nop",               GCNENC_SOPP,   GCN_STDMODE,              0,    ARCH_GCN_ALL  },
//    { "s_endpgm",            GCNENC_SOPP,   GCN_IMM_NONE,             1,    ARCH_GCN_ALL  },
//    { "s_branch",            GCNENC_SOPP,   GCN_IMM_REL,              2,    ARCH_GCN_ALL  },
    { "s_wakeup",            GCNENC_SOPP,   GCN_IMM_NONE,             3,    ARCH_RX3X0  },
//    { "s_cbranch_scc0",      GCNENC_SOPP,   GCN_IMM_REL,              4,    ARCH_GCN_ALL  },
//    { "s_cbranch_scc1",      GCNENC_SOPP,   GCN_IMM_REL,              5,    ARCH_GCN_ALL  },
//    { "s_cbranch_vccz",      GCNENC_SOPP,   GCN_IMM_REL,              6,    ARCH_GCN_ALL  },
//    { "s_cbranch_vccnz",     GCNENC_SOPP,   GCN_IMM_REL,              7,    ARCH_GCN_ALL  },
//    { "s_cbranch_execz",     GCNENC_SOPP,   GCN_IMM_REL,              8,    ARCH_GCN_ALL  },
//    { "s_cbranch_execnz",    GCNENC_SOPP,   GCN_IMM_REL,              9,    ARCH_GCN_ALL  },
    { "s_barrier",           GCNENC_SOPP,   GCN_IMM_NONE,             10,   ARCH_GCN_ALL  },
    { "s_setkill",           GCNENC_SOPP,   GCN_STDMODE,              11,   ARCH_GCN_1_1_2  },
//    { "s_waitcnt",           GCNENC_SOPP,   GCN_IMM_LOCKS,            12,   ARCH_GCN_ALL  },
    { "s_sethalt",           GCNENC_SOPP,   GCN_STDMODE,              13,   ARCH_GCN_ALL  },
    { "s_sleep",             GCNENC_SOPP,   GCN_STDMODE,              14,   ARCH_GCN_ALL  },
    { "s_setprio",           GCNENC_SOPP,   GCN_STDMODE,              15,   ARCH_GCN_ALL  },
    { "s_sendmsg",           GCNENC_SOPP,   GCN_IMM_MSGS,             16,   ARCH_GCN_ALL  },
    { "s_sendmsghalt",       GCNENC_SOPP,   GCN_IMM_MSGS,             17,   ARCH_GCN_ALL  },
    { "s_trap",              GCNENC_SOPP,   GCN_STDMODE,              18,   ARCH_GCN_ALL  },
    { "s_icache_inv",        GCNENC_SOPP,   GCN_IMM_NONE,             19,   ARCH_GCN_ALL  },
    { "s_incperflevel",      GCNENC_SOPP,   GCN_STDMODE,              20,   ARCH_GCN_ALL  },
    { "s_decperflevel",      GCNENC_SOPP,   GCN_STDMODE,              21,   ARCH_GCN_ALL  },
    { "s_ttracedata",        GCNENC_SOPP,   GCN_IMM_NONE,             22,   ARCH_GCN_ALL  },
    { "s_cbranch_cdbgsys",   GCNENC_SOPP,   GCN_IMM_REL,              23,   ARCH_GCN_1_1_2  },
    { "s_cbranch_cdbguser",  GCNENC_SOPP,   GCN_IMM_REL,              24,   ARCH_GCN_1_1_2  },
    { "s_cbranch_cdbgsys_or_user",GCNENC_SOPP,   GCN_IMM_REL,              25,   ARCH_GCN_1_1_2  },
    { "s_cbranch_cdbgsys_and_user",GCNENC_SOPP,   GCN_IMM_REL,              26,   ARCH_GCN_1_1_2  },
    { "s_endpgm_saved",      GCNENC_SOPP,   GCN_IMM_NONE,             27,   ARCH_RX3X0  },
    { "s_set_gpr_idx_off",   GCNENC_SOPP,   GCN_IMM_NONE,             28,   ARCH_RX3X0  },
    { "s_set_gpr_idx_mode",  GCNENC_SOPP,   GCN_STDMODE,              29,   ARCH_RX3X0  },
*)

  G3_SOPK( 0, 's_movk_i32');

(*
    { "s_movk_i32",          GCNENC_SOPK,   GCN_STDMODE,              0,    ARCH_GCN_ALL  },
    { "s_cmovk_i32",         GCNENC_SOPK,   GCN_STDMODE,              1,    ARCH_RX3X0  },
    { "s_cmpk_eq_i32",       GCNENC_SOPK,   GCN_STDMODE,              2,    ARCH_RX3X0  },
    { "s_cmpk_lg_i32",       GCNENC_SOPK,   GCN_STDMODE,              3,    ARCH_RX3X0  },
    { "s_cmpk_gt_i32",       GCNENC_SOPK,   GCN_STDMODE,              4,    ARCH_RX3X0  },
    { "s_cmpk_ge_i32",       GCNENC_SOPK,   GCN_STDMODE,              5,    ARCH_RX3X0  },
    { "s_cmpk_lt_i32",       GCNENC_SOPK,   GCN_STDMODE,              6,    ARCH_RX3X0  },
    { "s_cmpk_le_i32",       GCNENC_SOPK,   GCN_STDMODE,              7,    ARCH_RX3X0  },
    { "s_cmpk_eq_u32",       GCNENC_SOPK,   GCN_STDMODE,              8,    ARCH_RX3X0  },
    { "s_cmpk_lg_u32",       GCNENC_SOPK,   GCN_STDMODE,              9,    ARCH_RX3X0  },
    { "s_cmpk_gt_u32",       GCNENC_SOPK,   GCN_STDMODE,              10,   ARCH_RX3X0  },
    { "s_cmpk_ge_u32",       GCNENC_SOPK,   GCN_STDMODE,              11,   ARCH_RX3X0  },
    { "s_cmpk_lt_u32",       GCNENC_SOPK,   GCN_STDMODE,              12,   ARCH_RX3X0  },
    { "s_cmpk_le_u32",       GCNENC_SOPK,   GCN_STDMODE,              13,   ARCH_RX3X0  },
    { "s_addk_i32",          GCNENC_SOPK,   GCN_STDMODE,              14,   ARCH_RX3X0  },
    { "s_mulk_i32",          GCNENC_SOPK,   GCN_STDMODE,              15,   ARCH_RX3X0  },
    { "s_cbranch_i_fork",    GCNENC_SOPK,   GCN_REG_DST_64|GCN_IMM_REL,16,   ARCH_RX3X0  },
    { "s_getreg_b32",        GCNENC_SOPK,   GCN_IMM_SREG,             17,   ARCH_RX3X0  },
    { "s_setreg_b32",        GCNENC_SOPK,   GCN_IMM_SREG|GCN_IMM_DST, 18,   ARCH_RX3X0  },
    { "s_getreg_regrd_b32",  GCNENC_SOPK,   GCN_IMM_SREG,             19,   ARCH_RX3X0  },
    { "s_setreg_imm32_b32",  GCNENC_SOPK,   GCN_IMM_SREG|GCN_SOPK_SRIMM32, 20,   ARCH_RX3X0  },
*)

  G3_SOP1( 0, 's_mov_b32');
  G3_SOP1( 1, 's_mov_b64');
  G3_SOP1(28, 's_getpc_b64');
  G3_SOP1(29, 's_setpc_b64');
  G3_SOP1(30, 's_swappc_b64');
  G3_SOP1(32, 's_and_saveexec_b64');

(*
//    { "s_mov_b32",           GCNENC_SOP1,   GCN_STDMODE,              0,    ARCH_RX3X0  },
//    { "s_mov_b64",           GCNENC_SOP1,   GCN_REG_ALL_64,           1,    ARCH_RX3X0  },
    { "s_cmov_b32",          GCNENC_SOP1,   GCN_STDMODE,              2,    ARCH_RX3X0  },
    { "s_cmov_b64",          GCNENC_SOP1,   GCN_REG_ALL_64,           3,    ARCH_RX3X0  },
    { "s_not_b32",           GCNENC_SOP1,   GCN_STDMODE,              4,    ARCH_RX3X0  },
    { "s_not_b64",           GCNENC_SOP1,   GCN_REG_ALL_64,           5,    ARCH_RX3X0  },
    { "s_wqm_b32",           GCNENC_SOP1,   GCN_STDMODE,              6,    ARCH_RX3X0  },
    { "s_wqm_b64",           GCNENC_SOP1,   GCN_REG_ALL_64,           7,    ARCH_RX3X0  },
    { "s_brev_b32",          GCNENC_SOP1,   GCN_STDMODE,              8,    ARCH_RX3X0  },
    { "s_brev_b64",          GCNENC_SOP1,   GCN_REG_ALL_64,           9,    ARCH_RX3X0  },
    { "s_bcnt0_i32_b32",     GCNENC_SOP1,   GCN_STDMODE,              10,   ARCH_RX3X0  },
    { "s_bcnt0_i32_b64",     GCNENC_SOP1,   GCN_REG_SRC0_64,          11,   ARCH_RX3X0  },
    { "s_bcnt1_i32_b32",     GCNENC_SOP1,   GCN_STDMODE,              12,   ARCH_RX3X0  },
    { "s_bcnt1_i32_b64",     GCNENC_SOP1,   GCN_REG_SRC0_64,          13,   ARCH_RX3X0  },
    { "s_ff0_i32_b32",       GCNENC_SOP1,   GCN_STDMODE,              14,   ARCH_RX3X0  },
    { "s_ff0_i32_b64",       GCNENC_SOP1,   GCN_REG_SRC0_64,          15,   ARCH_RX3X0  },
    { "s_ff1_i32_b32",       GCNENC_SOP1,   GCN_STDMODE,              16,   ARCH_RX3X0  },
    { "s_ff1_i32_b64",       GCNENC_SOP1,   GCN_REG_SRC0_64,          17,   ARCH_RX3X0  },
    { "s_flbit_i32_b32",     GCNENC_SOP1,   GCN_STDMODE,              18,   ARCH_RX3X0  },
    { "s_flbit_i32_b64",     GCNENC_SOP1,   GCN_REG_SRC0_64,          19,   ARCH_RX3X0  },
    { "s_flbit_i32",         GCNENC_SOP1,   GCN_STDMODE,              20,   ARCH_RX3X0  },
    { "s_flbit_i32_i64",     GCNENC_SOP1,   GCN_REG_SRC0_64,          21,   ARCH_RX3X0  },
    { "s_sext_i32_i8",       GCNENC_SOP1,   GCN_STDMODE,              22,   ARCH_RX3X0  },
    { "s_sext_i32_i16",      GCNENC_SOP1,   GCN_STDMODE,              23,   ARCH_RX3X0  },
    { "s_bitset0_b32",       GCNENC_SOP1,   GCN_STDMODE,              24,   ARCH_RX3X0  },
    { "s_bitset0_b64",       GCNENC_SOP1,   GCN_REG_DST_64,           25,   ARCH_RX3X0  },
    { "s_bitset1_b32",       GCNENC_SOP1,   GCN_STDMODE,              26,   ARCH_RX3X0  },
    { "s_bitset1_b64",       GCNENC_SOP1,   GCN_REG_DST_64,           27,   ARCH_RX3X0  },
//    { "s_getpc_b64",         GCNENC_SOP1,   GCN_REG_ALL_64|GCN_SRC_NONE, 28,   ARCH_RX3X0  },
//    { "s_setpc_b64",         GCNENC_SOP1,   GCN_REG_ALL_64|GCN_DST_NONE, 29,   ARCH_RX3X0  },
//    { "s_swappc_b64",        GCNENC_SOP1,   GCN_REG_ALL_64,           30,   ARCH_RX3X0  },
    { "s_rfe_b64",           GCNENC_SOP1,   GCN_REG_ALL_64|GCN_DST_NONE, 31,   ARCH_RX3X0  },
//    { "s_and_saveexec_b64",  GCNENC_SOP1,   GCN_REG_ALL_64,           32,   ARCH_RX3X0  },
    { "s_or_saveexec_b64",   GCNENC_SOP1,   GCN_REG_ALL_64,           33,   ARCH_RX3X0  },
    { "s_xor_saveexec_b64",  GCNENC_SOP1,   GCN_REG_ALL_64,           34,   ARCH_RX3X0  },
    { "s_andn2_saveexec_b64",GCNENC_SOP1,   GCN_REG_ALL_64,           35,   ARCH_RX3X0  },
    { "s_orn2_saveexec_b64", GCNENC_SOP1,   GCN_REG_ALL_64,           36,   ARCH_RX3X0  },
    { "s_nand_saveexec_b64", GCNENC_SOP1,   GCN_REG_ALL_64,           37,   ARCH_RX3X0  },
    { "s_nor_saveexec_b64",  GCNENC_SOP1,   GCN_REG_ALL_64,           38,   ARCH_RX3X0  },
    { "s_xnor_saveexec_b64", GCNENC_SOP1,   GCN_REG_ALL_64,           39,   ARCH_RX3X0  },
    { "s_quadmask_b32",      GCNENC_SOP1,   GCN_STDMODE,              40,   ARCH_RX3X0  },
    { "s_quadmask_b64",      GCNENC_SOP1,   GCN_REG_ALL_64,           41,   ARCH_RX3X0  },
    { "s_movrels_b32",       GCNENC_SOP1,   GCN_STDMODE,              42,   ARCH_RX3X0  },
    { "s_movrels_b64",       GCNENC_SOP1,   GCN_REG_ALL_64,           43,   ARCH_RX3X0  },
    { "s_movreld_b32",       GCNENC_SOP1,   GCN_STDMODE,              44,   ARCH_RX3X0  },
    { "s_movreld_b64",       GCNENC_SOP1,   GCN_REG_ALL_64,           45,   ARCH_RX3X0  },
    { "s_cbranch_join",      GCNENC_SOP1,   GCN_STDMODE|GCN_DST_NONE, 46,   ARCH_RX3X0  },
    { "s_mov_regrd_b32",     GCNENC_SOP1,   GCN_STDMODE,              47,   ARCH_RX3X0  },
    { "s_abs_i32",           GCNENC_SOP1,   GCN_STDMODE,              48,   ARCH_RX3X0  },
    { "s_mov_fed_b32",       GCNENC_SOP1,   GCN_STDMODE, /* check for GCN1.2 !*/  49,   ARCH_RX3X0  },
    { "s_set_gpr_idx_idx",   GCNENC_SOP1,   GCN_DST_NONE,              50,   ARCH_RX3X0  },
*)

  G3_SOP2( 0, 's_add_u32');
  G3_SOP2( 1, 's_sub_u32');
  G3_SOP2( 2, 's_add_i32');
  G3_SOP2( 3, 's_sub_i32');
  G3_SOP2( 4, 's_addc_u32');
  G3_SOP2( 5, 's_subb_u32');
  G3_SOP2(12, 's_and_b32');
  G3_SOP2(13, 's_and_b64');
  G3_SOP2(14, 's_or_b32');
  G3_SOP2(15, 's_or_b64');
  G3_SOP2(28, 's_lshl_b32');
  G3_SOP2(36, 's_mul_i32');

(*
//    { "s_add_u32",           GCNENC_SOP2,   GCN_STDMODE,              0,    ARCH_GCN_ALL  },
//    { "s_sub_u32",           GCNENC_SOP2,   GCN_STDMODE,              1,    ARCH_GCN_ALL  },
//    { "s_add_i32",           GCNENC_SOP2,   GCN_STDMODE,              2,    ARCH_GCN_ALL  },
//    { "s_sub_i32",           GCNENC_SOP2,   GCN_STDMODE,              3,    ARCH_GCN_ALL  },
//    { "s_addc_u32",          GCNENC_SOP2,   GCN_STDMODE,              4,    ARCH_GCN_ALL  },
//    { "s_subb_u32",          GCNENC_SOP2,   GCN_STDMODE,              5,    ARCH_GCN_ALL  },
    { "s_min_i32",           GCNENC_SOP2,   GCN_STDMODE,              6,    ARCH_GCN_ALL  },
    { "s_min_u32",           GCNENC_SOP2,   GCN_STDMODE,              7,    ARCH_GCN_ALL  },
    { "s_max_i32",           GCNENC_SOP2,   GCN_STDMODE,              8,    ARCH_GCN_ALL  },
    { "s_max_u32",           GCNENC_SOP2,   GCN_STDMODE,              9,    ARCH_GCN_ALL  },
    { "s_cselect_b32",       GCNENC_SOP2,   GCN_STDMODE,              10,   ARCH_GCN_ALL  },
    { "s_cselect_b64",       GCNENC_SOP2,   GCN_REG_ALL_64,           11,   ARCH_GCN_ALL  },
//    { "s_and_b32",           GCNENC_SOP2,   GCN_STDMODE,              12,   ARCH_RX3X0  },
//    { "s_and_b64",           GCNENC_SOP2,   GCN_REG_ALL_64,           13,   ARCH_RX3X0  },
//    { "s_or_b32",            GCNENC_SOP2,   GCN_STDMODE,              14,   ARCH_RX3X0  },
//    { "s_or_b64",            GCNENC_SOP2,   GCN_REG_ALL_64,           15,   ARCH_RX3X0  },
    { "s_xor_b32",           GCNENC_SOP2,   GCN_STDMODE,              16,   ARCH_RX3X0  },
    { "s_xor_b64",           GCNENC_SOP2,   GCN_REG_ALL_64,           17,   ARCH_RX3X0  },
    { "s_andn2_b32",         GCNENC_SOP2,   GCN_STDMODE,              18,   ARCH_RX3X0  },
    { "s_andn2_b64",         GCNENC_SOP2,   GCN_REG_ALL_64,           19,   ARCH_RX3X0  },
    { "s_orn2_b32",          GCNENC_SOP2,   GCN_STDMODE,              20,   ARCH_RX3X0  },
    { "s_orn2_b64",          GCNENC_SOP2,   GCN_REG_ALL_64,           21,   ARCH_RX3X0  },
    { "s_nand_b32",          GCNENC_SOP2,   GCN_STDMODE,              22,   ARCH_RX3X0  },
    { "s_nand_b64",          GCNENC_SOP2,   GCN_REG_ALL_64,           23,   ARCH_RX3X0  },
    { "s_nor_b32",           GCNENC_SOP2,   GCN_STDMODE,              24,   ARCH_RX3X0  },
    { "s_nor_b64",           GCNENC_SOP2,   GCN_REG_ALL_64,           25,   ARCH_RX3X0  },
    { "s_xnor_b32",          GCNENC_SOP2,   GCN_STDMODE,              26,   ARCH_RX3X0  },
    { "s_xnor_b64",          GCNENC_SOP2,   GCN_REG_ALL_64,           27,   ARCH_RX3X0  },
//    { "s_lshl_b32",          GCNENC_SOP2,   GCN_STDMODE,              28,   ARCH_RX3X0  },
    { "s_lshl_b64",          GCNENC_SOP2,   GCN_REG_DS0_64,           29,   ARCH_RX3X0  },
    { "s_lshr_b32",          GCNENC_SOP2,   GCN_STDMODE,              30,   ARCH_RX3X0  },
    { "s_lshr_b64",          GCNENC_SOP2,   GCN_REG_DS0_64,           31,   ARCH_RX3X0  },
    { "s_ashr_i32",          GCNENC_SOP2,   GCN_STDMODE,              32,   ARCH_RX3X0  },
    { "s_ashr_i64",          GCNENC_SOP2,   GCN_REG_DS0_64,           33,   ARCH_RX3X0  },
    { "s_bfm_b32",           GCNENC_SOP2,   GCN_STDMODE,              34,   ARCH_RX3X0  },
    { "s_bfm_b64",           GCNENC_SOP2,   GCN_REG_DST_64,           35,   ARCH_RX3X0  },
//    { "s_mul_i32",           GCNENC_SOP2,   GCN_STDMODE,              36,   ARCH_RX3X0  },
    { "s_bfe_u32",           GCNENC_SOP2,   GCN_STDMODE,              37,   ARCH_RX3X0  },
    { "s_bfe_i32",           GCNENC_SOP2,   GCN_STDMODE,              38,   ARCH_RX3X0  },
    { "s_bfe_u64",           GCNENC_SOP2,   GCN_REG_DS0_64,           39,   ARCH_RX3X0  },
    { "s_bfe_i64",           GCNENC_SOP2,   GCN_REG_DS0_64,           40,   ARCH_RX3X0  },
    { "s_cbranch_g_fork",    GCNENC_SOP2,   GCN_REG_ALL_64|GCN_DST_NONE,41,   ARCH_RX3X0  },
    { "s_absdiff_i32",       GCNENC_SOP2,   GCN_STDMODE,              42,   ARCH_RX3X0  },
    { "s_rfe_restore_b64",   GCNENC_SOP2,   GCN_REG_SRC0_64|GCN_DST_NONE,43,   ARCH_RX3X0  },
*)

  G3_VOP23a( 1, 257, 'v_add_f32');
  G3_VOP23a(16, 272, 'v_lshrrev_b32');
  G3_VOP23a(17, 273, 'v_ashrrev_i32');
  G3_VOP23a(18, 274, 'v_lshlrev_b32');
  G3_VOP23a(19, 275, 'v_and_b32');
  G3_VOP23a(20, 276, 'v_or_b32');
  G3_VOP23a(21, 277, 'v_xor_b32');
  G3_VOP23a(25, 281, 'v_add_u32');  G3_VOP23a(25, 281, 'v_add_i32');
  G3_VOP23a(26, 282, 'v_sub_u32');  G3_VOP23a(26, 282, 'v_sub_i32');
  G3_VOP23a(28, 284, 'v_addc_u32');
  G3_VOP23a(29, 285, 'v_subb_u32');

(*
    { "v_cndmask_b32",       GCNENC_VOP2,   GCN_SRC2_VCC,             0,    ARCH_GCN_ALL  },
    { "v_cndmask_b32",       GCNENC_VOP3A,  GCN_SRC2_VCC|GCN_VOP3_VOP2, 256,  ARCH_GCN_ALL  },
//    { "v_add_f32",           GCNENC_VOP2,   GCN_FLOATLIT,             1,    ARCH_RX3X0  },
//    { "v_add_f32",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       257,  ARCH_RX3X0  },
    { "v_sub_f32",           GCNENC_VOP2,   GCN_FLOATLIT,             2,    ARCH_RX3X0  },
    { "v_sub_f32",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       258,  ARCH_RX3X0  },
    { "v_subrev_f32",        GCNENC_VOP2,   GCN_FLOATLIT,             3,    ARCH_RX3X0  },
    { "v_subrev_f32",        GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       259,  ARCH_RX3X0  },
    { "v_mul_legacy_f32",    GCNENC_VOP2,   GCN_FLOATLIT,             4,    ARCH_RX3X0  },
    { "v_mul_legacy_f32",    GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       260,  ARCH_RX3X0  },
    { "v_mul_f32",           GCNENC_VOP2,   GCN_FLOATLIT,             5,    ARCH_RX3X0  },
    { "v_mul_f32",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       261,  ARCH_RX3X0  },
    { "v_mul_i32_i24",       GCNENC_VOP2,   GCN_STDMODE,              6,    ARCH_RX3X0  },
    { "v_mul_i32_i24",       GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       262,  ARCH_RX3X0  },
    { "v_mul_hi_i32_i24",    GCNENC_VOP2,   GCN_STDMODE,              7,    ARCH_RX3X0  },
    { "v_mul_hi_i32_i24",    GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       263,  ARCH_RX3X0  },
    { "v_mul_u32_u24",       GCNENC_VOP2,   GCN_STDMODE,              8,    ARCH_RX3X0  },
    { "v_mul_u32_u24",       GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       264,  ARCH_RX3X0  },
    { "v_mul_hi_u32_u24",    GCNENC_VOP2,   GCN_STDMODE,              9,    ARCH_RX3X0  },
    { "v_mul_hi_u32_u24",    GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       265,  ARCH_RX3X0  },
    { "v_min_f32",           GCNENC_VOP2,   GCN_FLOATLIT,             10,   ARCH_RX3X0  },
    { "v_min_f32",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       266,  ARCH_RX3X0  },
    { "v_max_f32",           GCNENC_VOP2,   GCN_FLOATLIT,             11,   ARCH_RX3X0  },
    { "v_max_f32",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       267,  ARCH_RX3X0  },
    { "v_min_i32",           GCNENC_VOP2,   GCN_STDMODE,              12,   ARCH_RX3X0  },
    { "v_min_i32",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       268,  ARCH_RX3X0  },
    { "v_max_i32",           GCNENC_VOP2,   GCN_STDMODE,              13,   ARCH_RX3X0  },
    { "v_max_i32",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       269,  ARCH_RX3X0  },
    { "v_min_u32",           GCNENC_VOP2,   GCN_STDMODE,              14,   ARCH_RX3X0  },
    { "v_min_u32",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       270,  ARCH_RX3X0  },
    { "v_max_u32",           GCNENC_VOP2,   GCN_STDMODE,              15,   ARCH_RX3X0  },
    { "v_max_u32",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       271,  ARCH_RX3X0  },
//    { "v_lshrrev_b32",       GCNENC_VOP2,   GCN_STDMODE,              16,   ARCH_RX3X0  },
//    { "v_lshrrev_b32",       GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       272,  ARCH_RX3X0  },
//    { "v_ashrrev_i32",       GCNENC_VOP2,   GCN_STDMODE,              17,   ARCH_RX3X0  },
//    { "v_ashrrev_i32",       GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       273,  ARCH_RX3X0  },
//    { "v_lshlrev_b32",       GCNENC_VOP2,   GCN_STDMODE,              18,   ARCH_RX3X0  },
//    { "v_lshlrev_b32",       GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       274,  ARCH_RX3X0  },
//    { "v_and_b32",           GCNENC_VOP2,   GCN_STDMODE,              19,   ARCH_RX3X0  },
//    { "v_and_b32",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       275,  ARCH_RX3X0  },
//    { "v_or_b32",            GCNENC_VOP2,   GCN_STDMODE,              20,   ARCH_RX3X0  },
//    { "v_or_b32",            GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       276,  ARCH_RX3X0  },
//    { "v_xor_b32",           GCNENC_VOP2,   GCN_STDMODE,              21,   ARCH_RX3X0  },
//    { "v_xor_b32",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       277,  ARCH_RX3X0  },
    { "v_mac_f32",           GCNENC_VOP2,   GCN_FLOATLIT,             22,   ARCH_RX3X0  },
    { "v_mac_f32",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       278,  ARCH_RX3X0  },
    { "v_madmk_f32",         GCNENC_VOP2,   GCN_FLOATLIT|GCN_ARG1_IMM,23,   ARCH_RX3X0  },
    { "v_madmk_f32",         GCNENC_VOP3A,  GCN_VOP3_VOP2|GCN_ARG1_IMM, 279,  ARCH_RX3X0  },
    { "v_madak_f32",         GCNENC_VOP2,   GCN_FLOATLIT|GCN_ARG2_IMM,24,   ARCH_RX3X0  },
    { "v_madak_f32",         GCNENC_VOP3A,  GCN_VOP3_VOP2|GCN_ARG2_IMM, 280,  ARCH_RX3X0  },
//    { "v_add_u32",           GCNENC_VOP2,   GCN_DST_VCC,              25,   ARCH_RX3X0  },
//    { "v_add_u32",           GCNENC_VOP3B,  GCN_DST_VCC|GCN_VOP3_VOP2, 281,  ARCH_RX3X0  },
//    { "v_sub_u32",           GCNENC_VOP2,   GCN_DST_VCC,              26,   ARCH_RX3X0  },
//    { "v_sub_u32",           GCNENC_VOP3B,  GCN_DST_VCC|GCN_VOP3_VOP2, 282,  ARCH_RX3X0  },
    { "v_subrev_u32",        GCNENC_VOP2,   GCN_DST_VCC,              27,   ARCH_RX3X0  },
    { "v_subrev_u32",        GCNENC_VOP3B,  GCN_DST_VCC|GCN_VOP3_VOP2, 283,  ARCH_RX3X0  },
//    { "v_addc_u32",          GCNENC_VOP2,   GCN_DS2_VCC,              28,   ARCH_RX3X0  },
//    { "v_addc_u32",          GCNENC_VOP3B,  GCN_DS2_VCC|GCN_VOP3_VOP2, 284,  ARCH_RX3X0  },
//    { "v_subb_u32",          GCNENC_VOP2,   GCN_DS2_VCC,              29,   ARCH_RX3X0  },
//    { "v_subb_u32",          GCNENC_VOP3B,  GCN_DS2_VCC|GCN_VOP3_VOP2, 285,  ARCH_RX3X0  },
    { "v_subbrev_u32",       GCNENC_VOP2,   GCN_DS2_VCC,              30,   ARCH_RX3X0  },
    { "v_subbrev_u32",       GCNENC_VOP3B,  GCN_DS2_VCC| GCN_VOP3_VOP2, 286,  ARCH_RX3X0  },
    { "v_add_f16",           GCNENC_VOP2,   GCN_F16LIT,               31,    ARCH_RX3X0  },
    { "v_add_f16",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       287,  ARCH_RX3X0  },
    { "v_sub_f16",           GCNENC_VOP2,   GCN_F16LIT,               32,    ARCH_RX3X0  },
    { "v_sub_f16",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       288,  ARCH_RX3X0  },
    { "v_subrev_f16",        GCNENC_VOP2,   GCN_F16LIT,               33,    ARCH_RX3X0  },
    { "v_subrev_f16",        GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       289,  ARCH_RX3X0  },
    { "v_mul_f16",           GCNENC_VOP2,   GCN_F16LIT,               34,    ARCH_RX3X0  },
    { "v_mul_f16",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       290,  ARCH_RX3X0  },
    { "v_mac_f16",           GCNENC_VOP2,   GCN_F16LIT,               35,    ARCH_RX3X0  },
    { "v_mac_f16",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       291,  ARCH_RX3X0  },
    { "v_madmk_f16",         GCNENC_VOP2,   GCN_F16LIT|GCN_ARG1_IMM,36,   ARCH_RX3X0  },
    { "v_madmk_f16",         GCNENC_VOP3A,  GCN_VOP3_VOP2|GCN_ARG1_IMM, 292,  ARCH_RX3X0  },
    { "v_madak_f16",         GCNENC_VOP2,   GCN_F16LIT|GCN_ARG2_IMM,37,   ARCH_RX3X0  },
    { "v_madak_f16",         GCNENC_VOP3A,  GCN_VOP3_VOP2|GCN_ARG2_IMM, 293,  ARCH_RX3X0  },
    { "v_add_u16",           GCNENC_VOP2,   GCN_STDMODE,              38,   ARCH_RX3X0  },
    { "v_add_u16",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       294,  ARCH_RX3X0  },
    { "v_sub_u16",           GCNENC_VOP2,   GCN_STDMODE,              39,   ARCH_RX3X0  },
    { "v_sub_u16",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       295,  ARCH_RX3X0  },
    { "v_subrev_u16",        GCNENC_VOP2,   GCN_STDMODE,              40,   ARCH_RX3X0  },
    { "v_subrev_u16",        GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       296,  ARCH_RX3X0  },
    { "v_mul_lo_u16",        GCNENC_VOP2,   GCN_STDMODE,              41,   ARCH_RX3X0  },
    { "v_mul_lo_u16",        GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       297,  ARCH_RX3X0  },
    { "v_lshlrev_b16",       GCNENC_VOP2,   GCN_STDMODE,              42,   ARCH_RX3X0  },
    { "v_lshlrev_b16",       GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       298,  ARCH_RX3X0  },
    { "v_lshrrev_b16",       GCNENC_VOP2,   GCN_STDMODE,              43,   ARCH_RX3X0  },
    { "v_lshrrev_b16",       GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       299,  ARCH_RX3X0  },
    { "v_ashrrev_i16",       GCNENC_VOP2,   GCN_STDMODE,              44,   ARCH_RX3X0  },
    { "v_ashrrev_i16",       GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       300,  ARCH_RX3X0  },
    { "v_max_f16",           GCNENC_VOP2,   GCN_F16LIT,               45,   ARCH_RX3X0  },
    { "v_max_f16",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       301,  ARCH_RX3X0  },
    { "v_min_f16",           GCNENC_VOP2,   GCN_F16LIT,               46,   ARCH_RX3X0  },
    { "v_min_f16",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       302,  ARCH_RX3X0  },
    { "v_max_u16",           GCNENC_VOP2,   GCN_STDMODE,              47,   ARCH_RX3X0  },
    { "v_max_u16",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       303,  ARCH_RX3X0  },
    { "v_max_i16",           GCNENC_VOP2,   GCN_STDMODE,              48,   ARCH_RX3X0  },
    { "v_max_i16",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       304,  ARCH_RX3X0  },
    { "v_min_u16",           GCNENC_VOP2,   GCN_STDMODE,              49,   ARCH_RX3X0  },
    { "v_min_u16",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       305,  ARCH_RX3X0  },
    { "v_min_i16",           GCNENC_VOP2,   GCN_STDMODE,              50,   ARCH_RX3X0  },
    { "v_min_i16",           GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       306,  ARCH_RX3X0  },
    { "v_ldexp_f16",         GCNENC_VOP2,   GCN_F16LIT,               51,   ARCH_RX3X0  },
    { "v_ldexp_f16",         GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       307,  ARCH_RX3X0  },
    { "v_cvt_pkaccum_u8_f32",GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       496,  ARCH_RX3X0  },
*)

  G3_VOP13a( 1, 321, 'v_mov_b32');

(*
    { "v_nop",               GCNENC_VOP1,   GCN_VOP_ARG_NONE,         0,    ARCH_GCN_ALL  },
    { "v_nop",               GCNENC_VOP3A,  GCN_VOP_ARG_NONE|GCN_VOP3_VOP1, 320,  ARCH_RX3X0  },
//  { "v_mov_b32",           GCNENC_VOP1,   GCN_STDMODE,              1,    ARCH_GCN_ALL  },
//  { "v_mov_b32",           GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        321,  ARCH_RX3X0  },
    { "v_readfirstlane_b32", GCNENC_VOP1,   GCN_STDMODE|GCN_DST_SGPR, 2,    ARCH_GCN_ALL  },
    { "v_readfirstlane_b32", GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_VOP3_DST_SGPR, 322,  ARCH_RX3X0  },
    { "v_cvt_i32_f64",       GCNENC_VOP1,   GCN_REG_SRC0_64,          3,    ARCH_GCN_ALL  },
    { "v_cvt_i32_f64",       GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_SRC0_64 ,323,  ARCH_RX3X0  },
    { "v_cvt_f64_i32",       GCNENC_VOP1,   GCN_REG_DST_64,           4,    ARCH_GCN_ALL  },
    { "v_cvt_f64_i32",       GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DST_64 ,324,  ARCH_RX3X0  },
    { "v_cvt_f32_i32",       GCNENC_VOP1,   GCN_STDMODE,              5,    ARCH_GCN_ALL  },
    { "v_cvt_f32_i32",       GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        325,  ARCH_RX3X0  },
    { "v_cvt_f32_u32",       GCNENC_VOP1,   GCN_STDMODE,              6,    ARCH_GCN_ALL  },
    { "v_cvt_f32_u32",       GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        326,  ARCH_RX3X0  },
    { "v_cvt_u32_f32",       GCNENC_VOP1,   GCN_FLOATLIT,             7,    ARCH_GCN_ALL  },
    { "v_cvt_u32_f32",       GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        327,  ARCH_RX3X0  },
    { "v_cvt_i32_f32",       GCNENC_VOP1,   GCN_FLOATLIT,             8,    ARCH_GCN_ALL  },
    { "v_cvt_i32_f32",       GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        328,  ARCH_RX3X0  },
    { "v_mov_fed_b32",       GCNENC_VOP1,   GCN_STDMODE,              9,    ARCH_GCN_ALL  },
    { "v_mov_fed_b32",       GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        329,  ARCH_RX3X0  },
    { "v_cvt_f16_f32",       GCNENC_VOP1,   GCN_FLOATLIT,             10,   ARCH_GCN_ALL  },
    { "v_cvt_f16_f32",       GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        330,  ARCH_RX3X0  },
    { "v_cvt_f32_f16",       GCNENC_VOP1,   GCN_F16LIT,               11,   ARCH_GCN_ALL  },
    { "v_cvt_f32_f16",       GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        331,  ARCH_RX3X0  },
    { "v_cvt_rpi_i32_f32",   GCNENC_VOP1,   GCN_FLOATLIT,             12,   ARCH_GCN_ALL  },
    { "v_cvt_rpi_i32_f32",   GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        332,  ARCH_RX3X0  },
    { "v_cvt_flr_i32_f32",   GCNENC_VOP1,   GCN_FLOATLIT,             13,   ARCH_GCN_ALL  },
    { "v_cvt_flr_i32_f32",   GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        333,  ARCH_RX3X0  },
    { "v_cvt_off_f32_i4",    GCNENC_VOP1,   GCN_STDMODE,              14,   ARCH_GCN_ALL  },
    { "v_cvt_off_f32_i4",    GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        334,  ARCH_RX3X0  },
    { "v_cvt_f32_f64",       GCNENC_VOP1,   GCN_REG_SRC0_64,          15,   ARCH_GCN_ALL  },
    { "v_cvt_f32_f64",       GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_SRC0_64,335,  ARCH_RX3X0  },
    { "v_cvt_f64_f32",       GCNENC_VOP1,   GCN_REG_DST_64|GCN_FLOATLIT,16,   ARCH_GCN_ALL  },
    { "v_cvt_f64_f32",       GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DST_64,336,  ARCH_RX3X0  },
    { "v_cvt_f32_ubyte0",    GCNENC_VOP1,   GCN_STDMODE,              17,   ARCH_GCN_ALL  },
    { "v_cvt_f32_ubyte0",    GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        337,  ARCH_RX3X0  },
    { "v_cvt_f32_ubyte1",    GCNENC_VOP1,   GCN_STDMODE,              18,   ARCH_GCN_ALL  },
    { "v_cvt_f32_ubyte1",    GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        338,  ARCH_RX3X0  },
    { "v_cvt_f32_ubyte2",    GCNENC_VOP1,   GCN_STDMODE,              19,   ARCH_GCN_ALL  },
    { "v_cvt_f32_ubyte2",    GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        339,  ARCH_RX3X0  },
    { "v_cvt_f32_ubyte3",    GCNENC_VOP1,   GCN_STDMODE,              20,   ARCH_GCN_ALL  },
    { "v_cvt_f32_ubyte3",    GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        340,  ARCH_RX3X0  },
    { "v_cvt_u32_f64",       GCNENC_VOP1,   GCN_REG_SRC0_64,          21,   ARCH_GCN_ALL  },
    { "v_cvt_u32_f64",       GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_SRC0_64,341,  ARCH_RX3X0  },
    { "v_cvt_f64_u32",       GCNENC_VOP1,   GCN_REG_DST_64,           22,   ARCH_GCN_ALL  },
    { "v_cvt_f64_u32",       GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DST_64,342,  ARCH_RX3X0  },
    { "v_trunc_f64",         GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DS0_64, 343,  ARCH_RX3X0  },
    { "v_trunc_f64",         GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DS0_64, 407,  ARCH_RX2X0  },
    { "v_ceil_f64",          GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DS0_64, 344,  ARCH_RX3X0  },
    { "v_ceil_f64",          GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DS0_64, 408,  ARCH_RX2X0  },
    { "v_rndne_f64",         GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DS0_64, 345,  ARCH_RX3X0  },
    { "v_rndne_f64",         GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DS0_64, 409,  ARCH_RX2X0  },
    { "v_floor_f64",         GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DS0_64, 346,  ARCH_RX3X0  },
    { "v_floor_f64",         GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DS0_64, 410,  ARCH_RX2X0  },
    { "v_rcp_f64",           GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DS0_64,431,  ARCH_GCN_1_0_1  },
    { "v_rcp_clamp_f64",     GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DS0_64,432,  ARCH_GCN_1_0_1  },
    { "v_rsq_f64",           GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DS0_64,433,  ARCH_GCN_1_0_1  },
    { "v_rsq_clamp_f64",     GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DS0_64,434,  ARCH_GCN_1_0_1  },
    { "v_sqrt_f64",          GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DS0_64,436,  ARCH_GCN_1_0_1  },
    { "v_frexp_exp_i32_f64", GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_SRC0_64,444,  ARCH_GCN_1_0_1  },
    { "v_frexp_mant_f64",    GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DS0_64,445,  ARCH_GCN_1_0_1  },
    { "v_fract_f64",         GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DS0_64,446,  ARCH_GCN_1_0_1  },
    { "v_clrexcp",           GCNENC_VOP3A,  GCN_VOP_ARG_NONE|GCN_VOP3_VOP1, 449,  ARCH_GCN_1_0_1  },
    { "v_fract_f32",         GCNENC_VOP1,   GCN_FLOATLIT,             27,   ARCH_RX3X0  },
    { "v_fract_f32",         GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        347,  ARCH_RX3X0  },
    { "v_trunc_f32",         GCNENC_VOP1,   GCN_FLOATLIT,             28,   ARCH_RX3X0  },
    { "v_trunc_f32",         GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        348,  ARCH_RX3X0  },
    { "v_ceil_f32",          GCNENC_VOP1,   GCN_FLOATLIT,             29,   ARCH_RX3X0  },
    { "v_ceil_f32",          GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        349,  ARCH_RX3X0  },
    { "v_rndne_f32",         GCNENC_VOP1,   GCN_FLOATLIT,             30,   ARCH_RX3X0  },
    { "v_rndne_f32",         GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        350,  ARCH_RX3X0  },
    { "v_floor_f32",         GCNENC_VOP1,   GCN_FLOATLIT,             31,   ARCH_RX3X0  },
    { "v_floor_f32",         GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        351,  ARCH_RX3X0  },
    { "v_exp_f32",           GCNENC_VOP1,   GCN_FLOATLIT,             32,   ARCH_RX3X0  },
    { "v_exp_f32",           GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        352,  ARCH_RX3X0  },
    { "v_log_f32",           GCNENC_VOP1,   GCN_FLOATLIT,             33,   ARCH_RX3X0  },
    { "v_log_f32",           GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        353,  ARCH_RX3X0  },
    { "v_rcp_f32",           GCNENC_VOP1,   GCN_FLOATLIT,             34,   ARCH_RX3X0  },
    { "v_rcp_f32",           GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        354,  ARCH_RX3X0  },
    { "v_rcp_iflag_f32",     GCNENC_VOP1,   GCN_FLOATLIT,             35,   ARCH_RX3X0  },
    { "v_rcp_iflag_f32",     GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        355,  ARCH_RX3X0  },
    { "v_rsq_f32",           GCNENC_VOP1,   GCN_FLOATLIT,             36,   ARCH_RX3X0  },
    { "v_rsq_f32",           GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        356,  ARCH_RX3X0  },
    { "v_rcp_f64",           GCNENC_VOP1,   GCN_REG_DS0_64,           37,   ARCH_RX3X0  },
    { "v_rcp_f64",           GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DS0_64,357,  ARCH_RX3X0  },
    { "v_rsq_f64",           GCNENC_VOP1,   GCN_REG_DS0_64,           38,   ARCH_RX3X0  },
    { "v_rsq_f64",           GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DS0_64,358,  ARCH_RX3X0  },
    { "v_sqrt_f32",          GCNENC_VOP1,   GCN_FLOATLIT,             39,   ARCH_RX3X0  },
    { "v_sqrt_f32",          GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        359,  ARCH_RX3X0  },
    { "v_sqrt_f64",          GCNENC_VOP1,   GCN_REG_DS0_64,           40,   ARCH_RX3X0  },
    { "v_sqrt_f64",          GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DS0_64,360,  ARCH_RX3X0  },
    { "v_sin_f32",           GCNENC_VOP1,   GCN_FLOATLIT,             41,   ARCH_RX3X0  },
    { "v_sin_f32",           GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        361,  ARCH_RX3X0  },
    { "v_cos_f32",           GCNENC_VOP1,   GCN_FLOATLIT,             42,   ARCH_RX3X0  },
    { "v_cos_f32",           GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        362,  ARCH_RX3X0  },
    { "v_not_b32",           GCNENC_VOP1,   GCN_STDMODE,              43,   ARCH_RX3X0  },
    { "v_not_b32",           GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        363,  ARCH_RX3X0  },
    { "v_bfrev_b32",         GCNENC_VOP1,   GCN_STDMODE,              44,   ARCH_RX3X0  },
    { "v_bfrev_b32",         GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        364,  ARCH_RX3X0  },
    { "v_ffbh_u32",          GCNENC_VOP1,   GCN_STDMODE,              45,   ARCH_RX3X0  },
    { "v_ffbh_u32",          GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        365,  ARCH_RX3X0  },
    { "v_ffbl_b32",          GCNENC_VOP1,   GCN_STDMODE,              46,   ARCH_RX3X0  },
    { "v_ffbl_b32",          GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        366,  ARCH_RX3X0  },
    { "v_ffbh_i32",          GCNENC_VOP1,   GCN_STDMODE,              47,   ARCH_RX3X0  },
    { "v_ffbh_i32",          GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        367,  ARCH_RX3X0  },
    { "v_frexp_exp_i32_f64", GCNENC_VOP1,   GCN_REG_SRC0_64,          48,   ARCH_RX3X0  },
    { "v_frexp_exp_i32_f64", GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_SRC0_64,368,  ARCH_RX3X0  },
    { "v_frexp_mant_f64",    GCNENC_VOP1,   GCN_REG_DS0_64,           49,   ARCH_RX3X0  },
    { "v_frexp_mant_f64",    GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DS0_64,369,  ARCH_RX3X0  },
    { "v_fract_f64",         GCNENC_VOP1,   GCN_REG_DS0_64,           50,   ARCH_RX3X0  },
    { "v_fract_f64",         GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0|GCN_REG_DS0_64,370,  ARCH_RX3X0  },
    { "v_frexp_exp_i32_f32", GCNENC_VOP1,   GCN_FLOATLIT,             51,   ARCH_RX3X0  },
    { "v_frexp_exp_i32_f32", GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        371,  ARCH_RX3X0  },
    { "v_frexp_mant_f32",    GCNENC_VOP1,   GCN_FLOATLIT,             52,   ARCH_RX3X0  },
    { "v_frexp_mant_f32",    GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        372,  ARCH_RX3X0  },
    { "v_clrexcp",           GCNENC_VOP1,   GCN_VOP_ARG_NONE,         53,   ARCH_RX3X0  },
    { "v_clrexcp",           GCNENC_VOP3A,  GCN_VOP_ARG_NONE|GCN_VOP3_VOP1, 373,  ARCH_RX3X0  },
    { "v_movreld_b32",       GCNENC_VOP1,   GCN_STDMODE,              54,   ARCH_RX3X0  },
    { "v_movreld_b32",       GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        374,  ARCH_RX3X0  },
    { "v_movrels_b32",       GCNENC_VOP1,   GCN_STDMODE,              55,   ARCH_RX3X0  },
    { "v_movrels_b32",       GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        375,  ARCH_RX3X0  },
    { "v_movrelsd_b32",      GCNENC_VOP1,   GCN_STDMODE,              56,   ARCH_RX3X0  },
    { "v_movrelsd_b32",      GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        376,  ARCH_RX3X0  },
    { "v_cvt_f16_u16",       GCNENC_VOP1,   GCN_STDMODE,              57,   ARCH_RX3X0  },
    { "v_cvt_f16_u16",       GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        377,  ARCH_RX3X0  },
    { "v_cvt_f16_i16",       GCNENC_VOP1,   GCN_STDMODE,              58,   ARCH_RX3X0  },
    { "v_cvt_f16_i16",       GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        378,  ARCH_RX3X0  },
    { "v_cvt_u16_f16",       GCNENC_VOP1,   GCN_F16LIT,               59,   ARCH_RX3X0  },
    { "v_cvt_u16_f16",       GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        379,  ARCH_RX3X0  },
    { "v_cvt_i16_f16",       GCNENC_VOP1,   GCN_F16LIT,               60,   ARCH_RX3X0  },
    { "v_cvt_i16_f16",       GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        380,  ARCH_RX3X0  },
    { "v_rcp_f16",           GCNENC_VOP1,   GCN_F16LIT,               61,   ARCH_RX3X0  },
    { "v_rcp_f16",           GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        381,  ARCH_RX3X0  },
    { "v_sqrt_f16",          GCNENC_VOP1,   GCN_F16LIT,               62,   ARCH_RX3X0  },
    { "v_sqrt_f16",          GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        382,  ARCH_RX3X0  },
    { "v_rsq_f16",           GCNENC_VOP1,   GCN_F16LIT,               63,   ARCH_RX3X0  },
    { "v_rsq_f16",           GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        383,  ARCH_RX3X0  },
    { "v_log_f16",           GCNENC_VOP1,   GCN_F16LIT,               64,   ARCH_RX3X0  },
    { "v_log_f16",           GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        384,  ARCH_RX3X0  },
    { "v_exp_f16",           GCNENC_VOP1,   GCN_F16LIT,               65,   ARCH_RX3X0  },
    { "v_exp_f16",           GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        385,  ARCH_RX3X0  },
    { "v_frexp_mant_f16",    GCNENC_VOP1,   GCN_F16LIT,               66,   ARCH_RX3X0  },
    { "v_frexp_mant_f16",    GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        386,  ARCH_RX3X0  },
    { "v_frexp_exp_i16_f16", GCNENC_VOP1,   GCN_F16LIT,               67,   ARCH_RX3X0  },
    { "v_frexp_exp_i16_f16", GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        387,  ARCH_RX3X0  },
    { "v_floor_f16",         GCNENC_VOP1,   GCN_F16LIT,               68,   ARCH_RX3X0  },
    { "v_floor_f16",         GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        388,  ARCH_RX3X0  },
    { "v_ceil_f16",          GCNENC_VOP1,   GCN_F16LIT,               69,   ARCH_RX3X0  },
    { "v_ceil_f16",          GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        389,  ARCH_RX3X0  },
    { "v_trunc_f16",         GCNENC_VOP1,   GCN_F16LIT,               70,   ARCH_RX3X0  },
    { "v_trunc_f16",         GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        390,  ARCH_RX3X0  },
    { "v_rndne_f16",         GCNENC_VOP1,   GCN_F16LIT,               71,   ARCH_RX3X0  },
    { "v_rndne_f16",         GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        391,  ARCH_RX3X0  },
    { "v_fract_f16",         GCNENC_VOP1,   GCN_F16LIT,               72,   ARCH_RX3X0  },
    { "v_fract_f16",         GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        392,  ARCH_RX3X0  },
    { "v_sin_f16",           GCNENC_VOP1,   GCN_F16LIT,               73,   ARCH_RX3X0  },
    { "v_sin_f16",           GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        393,  ARCH_RX3X0  },
    { "v_cos_f16",           GCNENC_VOP1,   GCN_F16LIT,               74,   ARCH_RX3X0  },
    { "v_cos_f16",           GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        394,  ARCH_RX3X0  },
    { "v_exp_legacy_f32",    GCNENC_VOP1,   GCN_FLOATLIT,             75,   ARCH_RX3X0  },
    { "v_exp_legacy_f32",    GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        395,  ARCH_RX3X0  },
    { "v_log_legacy_f32",    GCNENC_VOP1,   GCN_FLOATLIT,             76,   ARCH_RX3X0  },
    { "v_log_legacy_f32",    GCNENC_VOP3A,  GCN_VOP3_VOP1_DS0,        396,  ARCH_RX3X0  },
*)

  G3_VOP3(456, 'v_bfe_u32');
  G3_VOP3(457, 'v_bfe_i32');
  G3_VOP3(458, 'v_bfi_b32');
  G3_VOP3(462, 'v_alignbit_b32');
  G3_VOP3(463, 'v_alignbyte_b32');
  G3_VOP3(645, 'v_mul_lo_u32');
  G3_VOP3(646, 'v_mul_hi_u32');


(*
    { "v_mad_legacy_f32",    GCNENC_VOP3A,  GCN_STDMODE,              448,  ARCH_RX3X0  },
    { "v_mad_f32",           GCNENC_VOP3A,  GCN_STDMODE,              449,  ARCH_RX3X0  },
    { "v_mad_i32_i24",       GCNENC_VOP3A,  GCN_STDMODE,              450,  ARCH_RX3X0  },
    { "v_mad_u32_u24",       GCNENC_VOP3A,  GCN_STDMODE,              451,  ARCH_RX3X0  },
    { "v_cubeid_f32",        GCNENC_VOP3A,  GCN_STDMODE,              452,  ARCH_RX3X0  },
    { "v_cubesc_f32",        GCNENC_VOP3A,  GCN_STDMODE,              453,  ARCH_RX3X0  },
    { "v_cubetc_f32",        GCNENC_VOP3A,  GCN_STDMODE,              454,  ARCH_RX3X0  },
    { "v_cubema_f32",        GCNENC_VOP3A,  GCN_STDMODE,              455,  ARCH_RX3X0  },
//    { "v_bfe_u32",           GCNENC_VOP3A,  GCN_STDMODE,              456,  ARCH_RX3X0  },
//    { "v_bfe_i32",           GCNENC_VOP3A,  GCN_STDMODE,              457,  ARCH_RX3X0  },
//    { "v_bfi_b32",           GCNENC_VOP3A,  GCN_STDMODE,              458,  ARCH_RX3X0  },
    { "v_fma_f32",           GCNENC_VOP3A,  GCN_STDMODE,              459,  ARCH_RX3X0  },
    { "v_fma_f64",           GCNENC_VOP3A,  GCN_REG_ALL_64,           460,  ARCH_RX3X0  },
    { "v_lerp_u8",           GCNENC_VOP3A,  GCN_STDMODE,              461,  ARCH_RX3X0  },
//    { "v_alignbit_b32",      GCNENC_VOP3A,  GCN_STDMODE,              462,  ARCH_RX3X0  },
//    { "v_alignbyte_b32",     GCNENC_VOP3A,  GCN_STDMODE,              463,  ARCH_RX3X0  },
    { "v_min3_f32",          GCNENC_VOP3A,  GCN_STDMODE,              464,  ARCH_RX3X0  },
    { "v_min3_i32",          GCNENC_VOP3A,  GCN_STDMODE,              465,  ARCH_RX3X0  },
    { "v_min3_u32",          GCNENC_VOP3A,  GCN_STDMODE,              466,  ARCH_RX3X0  },
    { "v_max3_f32",          GCNENC_VOP3A,  GCN_STDMODE,              467,  ARCH_RX3X0  },
    { "v_max3_i32",          GCNENC_VOP3A,  GCN_STDMODE,              468,  ARCH_RX3X0  },
    { "v_max3_u32",          GCNENC_VOP3A,  GCN_STDMODE,              469,  ARCH_RX3X0  },
    { "v_med3_f32",          GCNENC_VOP3A,  GCN_STDMODE,              470,  ARCH_RX3X0  },
    { "v_med3_i32",          GCNENC_VOP3A,  GCN_STDMODE,              471,  ARCH_RX3X0  },
    { "v_med3_u32",          GCNENC_VOP3A,  GCN_STDMODE,              472,  ARCH_RX3X0  },
    { "v_sad_u8",            GCNENC_VOP3A,  GCN_STDMODE,              473,  ARCH_RX3X0  },
    { "v_sad_hi_u8",         GCNENC_VOP3A,  GCN_STDMODE,              474,  ARCH_RX3X0  },
    { "v_sad_u16",           GCNENC_VOP3A,  GCN_STDMODE,              475,  ARCH_RX3X0  },
    { "v_sad_u32",           GCNENC_VOP3A,  GCN_STDMODE,              476,  ARCH_RX3X0  },
    { "v_cvt_pk_u8_f32",     GCNENC_VOP3A,  GCN_STDMODE,              477,  ARCH_RX3X0  },
    { "v_div_fixup_f32",     GCNENC_VOP3A,  GCN_STDMODE,              478,  ARCH_RX3X0  },
    { "v_div_fixup_f64",     GCNENC_VOP3A,  GCN_REG_ALL_64,           479,  ARCH_RX3X0  },
    { "v_div_fmas_f32",      GCNENC_VOP3A,  GCN_STDMODE,              482,  ARCH_RX3X0  },
    { "v_div_fmas_f64",      GCNENC_VOP3A,  GCN_REG_ALL_64,           483,  ARCH_RX3X0  },
    { "v_msad_u8",           GCNENC_VOP3A,  GCN_STDMODE,              484,  ARCH_RX3X0  },
    { "v_qsad_pk_u16_u8",    GCNENC_VOP3A,  GCN_REG_DS0_64|GCN_REG_SRC2_64, 485,  ARCH_RX3X0  },
    { "v_mqsad_pk_u16_u8",   GCNENC_VOP3A,  GCN_REG_DS0_64|GCN_REG_SRC2_64, 486,  ARCH_RX3X0  },
    { "v_mqsad_u32_u8",      GCNENC_VOP3A,  GCN_REG_DS0_64|GCN_REG_SRC2_64, 487,  ARCH_RX3X0  },
    { "v_mad_f16",           GCNENC_VOP3A,  GCN_STDMODE,              490,  ARCH_RX3X0  },
    { "v_mad_u16",           GCNENC_VOP3A,  GCN_STDMODE,              491,  ARCH_RX3X0  },
    { "v_mad_i16",           GCNENC_VOP3A,  GCN_STDMODE,              492,  ARCH_RX3X0  },
    { "v_perm_b32",          GCNENC_VOP3A,  GCN_STDMODE,              493,  ARCH_RX3X0  },
    { "v_fma_f16",           GCNENC_VOP3A,  GCN_STDMODE,              494,  ARCH_RX3X0  },
    { "v_div_fixup_f16",     GCNENC_VOP3A,  GCN_STDMODE,              495,  ARCH_RX3X0  },
    { "v_cvt_pkaccum_u8_f32",GCNENC_VOP3A,  GCN_VOP3_VOP2_DS01,       496,  ARCH_RX3X0  },
    { "v_interp_p1_f32",     GCNENC_VOP3A,  GCN_VOP3_VINTRP,          624,  ARCH_RX3X0  },
    { "v_interp_p2_f32",     GCNENC_VOP3A,  GCN_VOP3_VINTRP,          625,  ARCH_RX3X0  },
    { "v_interp_mov_f32",    GCNENC_VOP3A,  GCN_VOP3_VINTRP|GCN_P0_P10_P20, 626,  ARCH_RX3X0  },
    { "v_interp_p1ll_f16",   GCNENC_VOP3A,  GCN_VOP3_VINTRP_NEW,      628,  ARCH_RX3X0  },
    { "v_interp_p1lv_f16",   GCNENC_VOP3A,  GCN_VOP3_VINTRP_NEW|GCN_VINTRP_SRC2, 629,  ARCH_RX3X0  },
    { "v_interp_p2_f16",     GCNENC_VOP3A,  GCN_VOP3_VINTRP_NEW|GCN_VINTRP_SRC2, 630,  ARCH_RX3X0  },
    { "v_add_f64",           GCNENC_VOP3A,  GCN_REG_ALL_64|GCN_SRC2_NONE,640,  ARCH_RX3X0  },
    { "v_mul_f64",           GCNENC_VOP3A,  GCN_REG_ALL_64|GCN_SRC2_NONE,641,  ARCH_RX3X0  },
    { "v_min_f64",           GCNENC_VOP3A,  GCN_REG_ALL_64|GCN_SRC2_NONE,642,  ARCH_RX3X0  },
    { "v_max_f64",           GCNENC_VOP3A,  GCN_REG_ALL_64|GCN_SRC2_NONE,643,  ARCH_RX3X0  },
    { "v_ldexp_f64",         GCNENC_VOP3A,  GCN_REG_DS0_64|GCN_SRC2_NONE,644,  ARCH_RX3X0  },
//    { "v_mul_lo_u32",        GCNENC_VOP3A,  GCN_SRC2_NONE,            645,  ARCH_RX3X0  },
//    { "v_mul_hi_u32",        GCNENC_VOP3A,  GCN_SRC2_NONE,            646,  ARCH_RX3X0  },
    { "v_mul_hi_i32",        GCNENC_VOP3A,  GCN_SRC2_NONE,            647,  ARCH_RX3X0  },
    { "v_ldexp_f32",         GCNENC_VOP3A,  GCN_SRC2_NONE,            648,  ARCH_RX3X0  },
    { "v_readlane_b32",      GCNENC_VOP3A,  GCN_SRC2_NONE|GCN_VOP3_DS1_SGPR, 649,  ARCH_RX3X0  },
    { "v_writelane_b32",     GCNENC_VOP3A,  GCN_SRC2_NONE|GCN_VOP3_SRC1_SGPR, 650,  ARCH_RX3X0  },
    { "v_bcnt_u32_b32",      GCNENC_VOP3A,  GCN_SRC2_NONE,            651,  ARCH_RX3X0  },
    { "v_mbcnt_lo_u32_b32",  GCNENC_VOP3A,  GCN_SRC2_NONE,            652,  ARCH_RX3X0  },
    { "v_mbcnt_hi_u32_b32",  GCNENC_VOP3A,  GCN_SRC2_NONE,            653,  ARCH_RX3X0  },
    { "v_mac_legacy_f32",    GCNENC_VOP3A,  GCN_SRC2_NONE,            654,  ARCH_RX3X0  },
    { "v_lshlrev_b64",       GCNENC_VOP3A,  GCN_REG_DS1_64|GCN_SRC2_NONE,655,  ARCH_RX3X0  },
    { "v_lshrrev_b64",       GCNENC_VOP3A,  GCN_REG_DS1_64|GCN_SRC2_NONE,656,  ARCH_RX3X0  },
    { "v_ashrrev_i64",       GCNENC_VOP3A,  GCN_REG_DS1_64|GCN_SRC2_NONE,657,  ARCH_RX3X0  },
    { "v_trig_preop_f64",    GCNENC_VOP3A,  GCN_REG_DS0_64|GCN_SRC2_NONE, 658,  ARCH_RX3X0  },
    { "v_bfm_b32",           GCNENC_VOP3A,  GCN_SRC2_NONE,            659,     ARCH_RX3X0  },
    { "v_cvt_pknorm_i16_f32",GCNENC_VOP3A,  GCN_SRC2_NONE,            660,  ARCH_RX3X0  },
    { "v_cvt_pknorm_u16_f32",GCNENC_VOP3A,  GCN_SRC2_NONE,            661,  ARCH_RX3X0  },
    { "v_cvt_pkrtz_f16_f32", GCNENC_VOP3A,  GCN_SRC2_NONE,            662,  ARCH_RX3X0  },
    { "v_cvt_pk_u16_u32",    GCNENC_VOP3A,  GCN_SRC2_NONE,            663,  ARCH_RX3X0  },
    { "v_cvt_pk_i16_i32",    GCNENC_VOP3A,  GCN_SRC2_NONE,            664,  ARCH_RX3X0  },
    { "v_mad_u64_u32",       GCNENC_VOP3B,  GCN_REG_DS2_64|GCN_DST_VCC_VSRC2, 488,  ARCH_RX3X0  },
    { "v_mad_i64_i32",       GCNENC_VOP3B,  GCN_REG_DS2_64|GCN_DST_VCC_VSRC2, 489,  ARCH_RX3X0  },
    { "v_div_scale_f32",     GCNENC_VOP3B,  GCN_STDMODE|GCN_S0EQS12,  480,  ARCH_RX3X0  },
    { "v_div_scale_f64",     GCNENC_VOP3B,  GCN_REG_ALL_64|GCN_S0EQS12,481,  ARCH_RX3X0  },
*)

  G3_VOPC3a($C1, 'v_cmp_lt_i32');
  G3_VOPC3a($C2, 'v_cmp_eq_i32');
  G3_VOPC3a($C3, 'v_cmp_le_i32');
  G3_VOPC3a($C4, 'v_cmp_gt_i32');
  G3_VOPC3a($C5, 'v_cmp_ne_i32');  G3_VOPC3a($C5, 'v_cmp_lg_i32');
  G3_VOPC3a($C6, 'v_cmp_ge_i32');

  G3_VOPC3a($C9, 'v_cmp_lt_u32');
  G3_VOPC3a($Ca, 'v_cmp_eq_u32');
  G3_VOPC3a($Cb, 'v_cmp_le_u32');
  G3_VOPC3a($Cc, 'v_cmp_gt_u32');
  G3_VOPC3a($Cd, 'v_cmp_ne_u32');  G3_VOPC3a($Cd, 'v_cmp_lg_u32');
  G3_VOPC3a($Ce, 'v_cmp_ge_u32');

(*
    { "v_cmp_class_f32",     GCNENC_VOPC,   GCN_FLOATLIT,             0x10, ARCH_RX3X0  },
    { "v_cmp_class_f32",     GCNENC_VOP3A,  GCN_STDMODE,              0x10, ARCH_RX3X0  },
    { "v_cmpx_class_f32",    GCNENC_VOPC,   GCN_FLOATLIT,             0x11, ARCH_RX3X0  },
    { "v_cmpx_class_f32",    GCNENC_VOP3A,  GCN_STDMODE,              0x11, ARCH_RX3X0  },
    { "v_cmp_class_f64",     GCNENC_VOPC,   GCN_REG_ALL_64,           0x12, ARCH_RX3X0  },
    { "v_cmp_class_f64",     GCNENC_VOP3A,  GCN_REG_ALL_64,           0x12, ARCH_RX3X0  },
    { "v_cmpx_class_f64",    GCNENC_VOPC,   GCN_REG_ALL_64,           0x13, ARCH_RX3X0  },
    { "v_cmpx_class_f64",    GCNENC_VOP3A,  GCN_REG_ALL_64,           0x13, ARCH_RX3X0  },
    { "v_cmp_class_f16",     GCNENC_VOPC,   GCN_F16LIT,               0x14, ARCH_RX3X0  },
    { "v_cmp_class_f16",     GCNENC_VOP3A,  GCN_STDMODE,              0x14, ARCH_RX3X0  },
    { "v_cmpx_class_f16",    GCNENC_VOPC,   GCN_F16LIT,               0x15, ARCH_RX3X0  },
    { "v_cmpx_class_f16",    GCNENC_VOP3A,  GCN_STDMODE,              0x15, ARCH_RX3X0  },
    { "v_cmp_f_f16",         GCNENC_VOPC,   GCN_F16LIT,               0x20, ARCH_RX3X0  },
    { "v_cmp_f_f16",         GCNENC_VOP3A,  GCN_STDMODE,              0x20, ARCH_RX3X0  },
    { "v_cmp_lt_f16",        GCNENC_VOPC,   GCN_F16LIT,               0x21, ARCH_RX3X0  },
    { "v_cmp_lt_f16",        GCNENC_VOP3A,  GCN_STDMODE,              0x21, ARCH_RX3X0  },
    { "v_cmp_eq_f16",        GCNENC_VOPC,   GCN_F16LIT,               0x22, ARCH_RX3X0  },
    { "v_cmp_eq_f16",        GCNENC_VOP3A,  GCN_STDMODE,              0x22, ARCH_RX3X0  },
    { "v_cmp_le_f16",        GCNENC_VOPC,   GCN_F16LIT,               0x23, ARCH_RX3X0  },
    { "v_cmp_le_f16",        GCNENC_VOP3A,  GCN_STDMODE,              0x23, ARCH_RX3X0  },
    { "v_cmp_gt_f16",        GCNENC_VOPC,   GCN_F16LIT,               0x24, ARCH_RX3X0  },
    { "v_cmp_gt_f16",        GCNENC_VOP3A,  GCN_STDMODE,              0x24, ARCH_RX3X0  },
    { "v_cmp_lg_f16",        GCNENC_VOPC,   GCN_F16LIT,               0x25, ARCH_RX3X0  },
    { "v_cmp_lg_f16",        GCNENC_VOP3A,  GCN_STDMODE,              0x25, ARCH_RX3X0  },
    { "v_cmp_ge_f16",        GCNENC_VOPC,   GCN_F16LIT,               0x26, ARCH_RX3X0  },
    { "v_cmp_ge_f16",        GCNENC_VOP3A,  GCN_STDMODE,              0x26, ARCH_RX3X0  },
    { "v_cmp_o_f16",         GCNENC_VOPC,   GCN_F16LIT,               0x27, ARCH_RX3X0  },
    { "v_cmp_o_f16",         GCNENC_VOP3A,  GCN_STDMODE,              0x27, ARCH_RX3X0  },
    { "v_cmp_u_f16",         GCNENC_VOPC,   GCN_F16LIT,               0x28, ARCH_RX3X0  },
    { "v_cmp_u_f16",         GCNENC_VOP3A,  GCN_STDMODE,              0x28, ARCH_RX3X0  },
    { "v_cmp_nge_f16",       GCNENC_VOPC,   GCN_F16LIT,               0x29, ARCH_RX3X0  },
    { "v_cmp_nge_f16",       GCNENC_VOP3A,  GCN_STDMODE,              0x29, ARCH_RX3X0  },
    { "v_cmp_nlg_f16",       GCNENC_VOPC,   GCN_F16LIT,               0x2a, ARCH_RX3X0  },
    { "v_cmp_nlg_f16",       GCNENC_VOP3A,  GCN_STDMODE,              0x2a, ARCH_RX3X0  },
    { "v_cmp_ngt_f16",       GCNENC_VOPC,   GCN_F16LIT,               0x2b, ARCH_RX3X0  },
    { "v_cmp_ngt_f16",       GCNENC_VOP3A,  GCN_STDMODE,              0x2b, ARCH_RX3X0  },
    { "v_cmp_nle_f16",       GCNENC_VOPC,   GCN_F16LIT,               0x2c, ARCH_RX3X0  },
    { "v_cmp_nle_f16",       GCNENC_VOP3A,  GCN_STDMODE,              0x2c, ARCH_RX3X0  },
    { "v_cmp_neq_f16",       GCNENC_VOPC,   GCN_F16LIT,               0x2d, ARCH_RX3X0  },
    { "v_cmp_neq_f16",       GCNENC_VOP3A,  GCN_STDMODE,              0x2d, ARCH_RX3X0  },
    { "v_cmp_nlt_f16",       GCNENC_VOPC,   GCN_F16LIT,               0x2e, ARCH_RX3X0  },
    { "v_cmp_nlt_f16",       GCNENC_VOP3A,  GCN_STDMODE,              0x2e, ARCH_RX3X0  },
    { "v_cmp_tru_f16",       GCNENC_VOPC,   GCN_F16LIT,               0x2f, ARCH_RX3X0  },
    { "v_cmp_tru_f16",       GCNENC_VOP3A,  GCN_STDMODE,              0x2f, ARCH_RX3X0  },
    { "v_cmp_t_f16",         GCNENC_VOPC,   GCN_F16LIT,               0x2f, ARCH_RX3X0  },
    { "v_cmp_t_f16",         GCNENC_VOP3A,  GCN_STDMODE,              0x2f, ARCH_RX3X0  },
    { "v_cmpx_f_f16",        GCNENC_VOPC,   GCN_F16LIT,               0x30, ARCH_RX3X0  },
    { "v_cmpx_f_f16",        GCNENC_VOP3A,  GCN_STDMODE,              0x30, ARCH_RX3X0  },
    { "v_cmpx_lt_f16",       GCNENC_VOPC,   GCN_F16LIT,               0x31, ARCH_RX3X0  },
    { "v_cmpx_lt_f16",       GCNENC_VOP3A,  GCN_STDMODE,              0x31, ARCH_RX3X0  },
    { "v_cmpx_eq_f16",       GCNENC_VOPC,   GCN_F16LIT,               0x32, ARCH_RX3X0  },
    { "v_cmpx_eq_f16",       GCNENC_VOP3A,  GCN_STDMODE,              0x32, ARCH_RX3X0  },
    { "v_cmpx_le_f16",       GCNENC_VOPC,   GCN_F16LIT,               0x33, ARCH_RX3X0  },
    { "v_cmpx_le_f16",       GCNENC_VOP3A,  GCN_STDMODE,              0x33, ARCH_RX3X0  },
    { "v_cmpx_gt_f16",       GCNENC_VOPC,   GCN_F16LIT,               0x34, ARCH_RX3X0  },
    { "v_cmpx_gt_f16",       GCNENC_VOP3A,  GCN_STDMODE,              0x34, ARCH_RX3X0  },
    { "v_cmpx_lg_f16",       GCNENC_VOPC,   GCN_F16LIT,               0x35, ARCH_RX3X0  },
    { "v_cmpx_lg_f16",       GCNENC_VOP3A,  GCN_STDMODE,              0x35, ARCH_RX3X0  },
    { "v_cmpx_ge_f16",       GCNENC_VOPC,   GCN_F16LIT,               0x36, ARCH_RX3X0  },
    { "v_cmpx_ge_f16",       GCNENC_VOP3A,  GCN_STDMODE,              0x36, ARCH_RX3X0  },
    { "v_cmpx_o_f16",        GCNENC_VOPC,   GCN_F16LIT,               0x37, ARCH_RX3X0  },
    { "v_cmpx_o_f16",        GCNENC_VOP3A,  GCN_STDMODE,              0x37, ARCH_RX3X0  },
    { "v_cmpx_u_f16",        GCNENC_VOPC,   GCN_F16LIT,               0x38, ARCH_RX3X0  },
    { "v_cmpx_u_f16",        GCNENC_VOP3A,  GCN_STDMODE,              0x38, ARCH_RX3X0  },
    { "v_cmpx_nge_f16",      GCNENC_VOPC,   GCN_F16LIT,               0x39, ARCH_RX3X0  },
    { "v_cmpx_nge_f16",      GCNENC_VOP3A,  GCN_STDMODE,              0x39, ARCH_RX3X0  },
    { "v_cmpx_nlg_f16",      GCNENC_VOPC,   GCN_F16LIT,               0x3a, ARCH_RX3X0  },
    { "v_cmpx_nlg_f16",      GCNENC_VOP3A,  GCN_STDMODE,              0x3a, ARCH_RX3X0  },
    { "v_cmpx_ngt_f16",      GCNENC_VOPC,   GCN_F16LIT,               0x3b, ARCH_RX3X0  },
    { "v_cmpx_ngt_f16",      GCNENC_VOP3A,  GCN_STDMODE,              0x3b, ARCH_RX3X0  },
    { "v_cmpx_nle_f16",      GCNENC_VOPC,   GCN_F16LIT,               0x3c, ARCH_RX3X0  },
    { "v_cmpx_nle_f16",      GCNENC_VOP3A,  GCN_STDMODE,              0x3c, ARCH_RX3X0  },
    { "v_cmpx_neq_f16",      GCNENC_VOPC,   GCN_F16LIT,               0x3d, ARCH_RX3X0  },
    { "v_cmpx_neq_f16",      GCNENC_VOP3A,  GCN_STDMODE,              0x3d, ARCH_RX3X0  },
    { "v_cmpx_nlt_f16",      GCNENC_VOPC,   GCN_F16LIT,               0x3e, ARCH_RX3X0  },
    { "v_cmpx_nlt_f16",      GCNENC_VOP3A,  GCN_STDMODE,              0x3e, ARCH_RX3X0  },
    { "v_cmpx_tru_f16",      GCNENC_VOPC,   GCN_F16LIT,               0x3f, ARCH_RX3X0  },
    { "v_cmpx_tru_f16",      GCNENC_VOP3A,  GCN_STDMODE,              0x3f, ARCH_RX3X0  },
    { "v_cmpx_t_f16",        GCNENC_VOPC,   GCN_F16LIT,               0x3f, ARCH_RX3X0  },
    { "v_cmpx_t_f16",        GCNENC_VOP3A,  GCN_STDMODE,              0x3f, ARCH_RX3X0  },
    { "v_cmp_f_f32",         GCNENC_VOPC,   GCN_FLOATLIT,             0x40, ARCH_RX3X0  },
    { "v_cmp_f_f32",         GCNENC_VOP3A,  GCN_STDMODE,              0x40, ARCH_RX3X0  },
    { "v_cmp_lt_f32",        GCNENC_VOPC,   GCN_FLOATLIT,             0x41, ARCH_RX3X0  },
    { "v_cmp_lt_f32",        GCNENC_VOP3A,  GCN_STDMODE,              0x41, ARCH_RX3X0  },
    { "v_cmp_eq_f32",        GCNENC_VOPC,   GCN_FLOATLIT,             0x42, ARCH_RX3X0  },
    { "v_cmp_eq_f32",        GCNENC_VOP3A,  GCN_STDMODE,              0x42, ARCH_RX3X0  },
    { "v_cmp_le_f32",        GCNENC_VOPC,   GCN_FLOATLIT,             0x43, ARCH_RX3X0  },
    { "v_cmp_le_f32",        GCNENC_VOP3A,  GCN_STDMODE,              0x43, ARCH_RX3X0  },
    { "v_cmp_gt_f32",        GCNENC_VOPC,   GCN_FLOATLIT,             0x44, ARCH_RX3X0  },
    { "v_cmp_gt_f32",        GCNENC_VOP3A,  GCN_STDMODE,              0x44, ARCH_RX3X0  },
    { "v_cmp_lg_f32",        GCNENC_VOPC,   GCN_FLOATLIT,             0x45, ARCH_RX3X0  },
    { "v_cmp_lg_f32",        GCNENC_VOP3A,  GCN_STDMODE,              0x45, ARCH_RX3X0  },
    { "v_cmp_ge_f32",        GCNENC_VOPC,   GCN_FLOATLIT,             0x46, ARCH_RX3X0  },
    { "v_cmp_ge_f32",        GCNENC_VOP3A,  GCN_STDMODE,              0x46, ARCH_RX3X0  },
    { "v_cmp_o_f32",         GCNENC_VOPC,   GCN_FLOATLIT,             0x47, ARCH_RX3X0  },
    { "v_cmp_o_f32",         GCNENC_VOP3A,  GCN_STDMODE,              0x47, ARCH_RX3X0  },
    { "v_cmp_u_f32",         GCNENC_VOPC,   GCN_FLOATLIT,             0x48, ARCH_RX3X0  },
    { "v_cmp_u_f32",         GCNENC_VOP3A,  GCN_STDMODE,              0x48, ARCH_RX3X0  },
    { "v_cmp_nge_f32",       GCNENC_VOPC,   GCN_FLOATLIT,             0x49, ARCH_RX3X0  },
    { "v_cmp_nge_f32",       GCNENC_VOP3A,  GCN_STDMODE,              0x49, ARCH_RX3X0  },
    { "v_cmp_nlg_f32",       GCNENC_VOPC,   GCN_FLOATLIT,             0x4a, ARCH_RX3X0  },
    { "v_cmp_nlg_f32",       GCNENC_VOP3A,  GCN_STDMODE,              0x4a, ARCH_RX3X0  },
    { "v_cmp_ngt_f32",       GCNENC_VOPC,   GCN_FLOATLIT,             0x4b, ARCH_RX3X0  },
    { "v_cmp_ngt_f32",       GCNENC_VOP3A,  GCN_STDMODE,              0x4b, ARCH_RX3X0  },
    { "v_cmp_nle_f32",       GCNENC_VOPC,   GCN_FLOATLIT,             0x4c, ARCH_RX3X0  },
    { "v_cmp_nle_f32",       GCNENC_VOP3A,  GCN_STDMODE,              0x4c, ARCH_RX3X0  },
    { "v_cmp_neq_f32",       GCNENC_VOPC,   GCN_FLOATLIT,             0x4d, ARCH_RX3X0  },
    { "v_cmp_neq_f32",       GCNENC_VOP3A,  GCN_STDMODE,              0x4d, ARCH_RX3X0  },
    { "v_cmp_nlt_f32",       GCNENC_VOPC,   GCN_FLOATLIT,             0x4e, ARCH_RX3X0  },
    { "v_cmp_nlt_f32",       GCNENC_VOP3A,  GCN_STDMODE,              0x4e, ARCH_RX3X0  },
    { "v_cmp_tru_f32",       GCNENC_VOPC,   GCN_FLOATLIT,             0x4f, ARCH_RX3X0  },
    { "v_cmp_tru_f32",       GCNENC_VOP3A,  GCN_STDMODE,              0x4f, ARCH_RX3X0  },
    { "v_cmp_t_f32",         GCNENC_VOPC,   GCN_FLOATLIT,             0x4f, ARCH_RX3X0  },
    { "v_cmp_t_f32",         GCNENC_VOP3A,  GCN_STDMODE,              0x4f, ARCH_RX3X0  },
    { "v_cmpx_f_f32",        GCNENC_VOPC,   GCN_FLOATLIT,             0x50, ARCH_RX3X0  },
    { "v_cmpx_f_f32",        GCNENC_VOP3A,  GCN_STDMODE,              0x50, ARCH_RX3X0  },
    { "v_cmpx_lt_f32",       GCNENC_VOPC,   GCN_FLOATLIT,             0x51, ARCH_RX3X0  },
    { "v_cmpx_lt_f32",       GCNENC_VOP3A,  GCN_STDMODE,              0x51, ARCH_RX3X0  },
    { "v_cmpx_eq_f32",       GCNENC_VOPC,   GCN_FLOATLIT,             0x52, ARCH_RX3X0  },
    { "v_cmpx_eq_f32",       GCNENC_VOP3A,  GCN_STDMODE,              0x52, ARCH_RX3X0  },
    { "v_cmpx_le_f32",       GCNENC_VOPC,   GCN_FLOATLIT,             0x53, ARCH_RX3X0  },
    { "v_cmpx_le_f32",       GCNENC_VOP3A,  GCN_STDMODE,              0x53, ARCH_RX3X0  },
    { "v_cmpx_gt_f32",       GCNENC_VOPC,   GCN_FLOATLIT,             0x54, ARCH_RX3X0  },
    { "v_cmpx_gt_f32",       GCNENC_VOP3A,  GCN_STDMODE,              0x54, ARCH_RX3X0  },
    { "v_cmpx_lg_f32",       GCNENC_VOPC,   GCN_FLOATLIT,             0x55, ARCH_RX3X0  },
    { "v_cmpx_lg_f32",       GCNENC_VOP3A,  GCN_STDMODE,              0x55, ARCH_RX3X0  },
    { "v_cmpx_ge_f32",       GCNENC_VOPC,   GCN_FLOATLIT,             0x56, ARCH_RX3X0  },
    { "v_cmpx_ge_f32",       GCNENC_VOP3A,  GCN_STDMODE,              0x56, ARCH_RX3X0  },
    { "v_cmpx_o_f32",        GCNENC_VOPC,   GCN_FLOATLIT,             0x57, ARCH_RX3X0  },
    { "v_cmpx_o_f32",        GCNENC_VOP3A,  GCN_STDMODE,              0x57, ARCH_RX3X0  },
    { "v_cmpx_u_f32",        GCNENC_VOPC,   GCN_FLOATLIT,             0x58, ARCH_RX3X0  },
    { "v_cmpx_u_f32",        GCNENC_VOP3A,  GCN_STDMODE,              0x58, ARCH_RX3X0  },
    { "v_cmpx_nge_f32",      GCNENC_VOPC,   GCN_FLOATLIT,             0x59, ARCH_RX3X0  },
    { "v_cmpx_nge_f32",      GCNENC_VOP3A,  GCN_STDMODE,              0x59, ARCH_RX3X0  },
    { "v_cmpx_nlg_f32",      GCNENC_VOPC,   GCN_FLOATLIT,             0x5a, ARCH_RX3X0  },
    { "v_cmpx_nlg_f32",      GCNENC_VOP3A,  GCN_STDMODE,              0x5a, ARCH_RX3X0  },
    { "v_cmpx_ngt_f32",      GCNENC_VOPC,   GCN_FLOATLIT,             0x5b, ARCH_RX3X0  },
    { "v_cmpx_ngt_f32",      GCNENC_VOP3A,  GCN_STDMODE,              0x5b, ARCH_RX3X0  },
    { "v_cmpx_nle_f32",      GCNENC_VOPC,   GCN_FLOATLIT,             0x5c, ARCH_RX3X0  },
    { "v_cmpx_nle_f32",      GCNENC_VOP3A,  GCN_STDMODE,              0x5c, ARCH_RX3X0  },
    { "v_cmpx_neq_f32",      GCNENC_VOPC,   GCN_FLOATLIT,             0x5d, ARCH_RX3X0  },
    { "v_cmpx_neq_f32",      GCNENC_VOP3A,  GCN_STDMODE,              0x5d, ARCH_RX3X0  },
    { "v_cmpx_nlt_f32",      GCNENC_VOPC,   GCN_FLOATLIT,             0x5e, ARCH_RX3X0  },
    { "v_cmpx_nlt_f32",      GCNENC_VOP3A,  GCN_STDMODE,              0x5e, ARCH_RX3X0  },
    { "v_cmpx_tru_f32",      GCNENC_VOPC,   GCN_FLOATLIT,             0x5f, ARCH_RX3X0  },
    { "v_cmpx_tru_f32",      GCNENC_VOP3A,  GCN_STDMODE,              0x5f, ARCH_RX3X0  },
    { "v_cmpx_t_f32",        GCNENC_VOPC,   GCN_FLOATLIT,             0x5f, ARCH_RX3X0  },
    { "v_cmpx_t_f32",        GCNENC_VOP3A,  GCN_STDMODE,              0x5f, ARCH_RX3X0  },
    { "v_cmp_f_f64",         GCNENC_VOPC,   GCN_REG_ALL_64,           0x60, ARCH_RX3X0  },
    { "v_cmp_f_f64",         GCNENC_VOP3A,  GCN_REG_ALL_64,           0x60, ARCH_RX3X0  },
    { "v_cmp_lt_f64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0x61, ARCH_RX3X0  },
    { "v_cmp_lt_f64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0x61, ARCH_RX3X0  },
    { "v_cmp_eq_f64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0x62, ARCH_RX3X0  },
    { "v_cmp_eq_f64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0x62, ARCH_RX3X0  },
    { "v_cmp_le_f64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0x63, ARCH_RX3X0  },
    { "v_cmp_le_f64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0x63, ARCH_RX3X0  },
    { "v_cmp_gt_f64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0x64, ARCH_RX3X0  },
    { "v_cmp_gt_f64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0x64, ARCH_RX3X0  },
    { "v_cmp_lg_f64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0x65, ARCH_RX3X0  },
    { "v_cmp_lg_f64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0x65, ARCH_RX3X0  },
    { "v_cmp_ge_f64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0x66, ARCH_RX3X0  },
    { "v_cmp_ge_f64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0x66, ARCH_RX3X0  },
    { "v_cmp_o_f64",         GCNENC_VOPC,   GCN_REG_ALL_64,           0x67, ARCH_RX3X0  },
    { "v_cmp_o_f64",         GCNENC_VOP3A,  GCN_REG_ALL_64,           0x67, ARCH_RX3X0  },
    { "v_cmp_u_f64",         GCNENC_VOPC,   GCN_REG_ALL_64,           0x68, ARCH_RX3X0  },
    { "v_cmp_u_f64",         GCNENC_VOP3A,  GCN_REG_ALL_64,           0x68, ARCH_RX3X0  },
    { "v_cmp_nge_f64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0x69, ARCH_RX3X0  },
    { "v_cmp_nge_f64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0x69, ARCH_RX3X0  },
    { "v_cmp_nlg_f64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0x6a, ARCH_RX3X0  },
    { "v_cmp_nlg_f64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0x6a, ARCH_RX3X0  },
    { "v_cmp_ngt_f64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0x6b, ARCH_RX3X0  },
    { "v_cmp_ngt_f64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0x6b, ARCH_RX3X0  },
    { "v_cmp_nle_f64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0x6c, ARCH_RX3X0  },
    { "v_cmp_nle_f64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0x6c, ARCH_RX3X0  },
    { "v_cmp_neq_f64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0x6d, ARCH_RX3X0  },
    { "v_cmp_neq_f64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0x6d, ARCH_RX3X0  },
    { "v_cmp_nlt_f64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0x6e, ARCH_RX3X0  },
    { "v_cmp_nlt_f64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0x6e, ARCH_RX3X0  },
    { "v_cmp_tru_f64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0x6f, ARCH_RX3X0  },
    { "v_cmp_tru_f64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0x6f, ARCH_RX3X0  },
    { "v_cmp_t_f64",         GCNENC_VOPC,   GCN_REG_ALL_64,           0x6f, ARCH_RX3X0  },
    { "v_cmp_t_f64",         GCNENC_VOP3A,  GCN_REG_ALL_64,           0x6f, ARCH_RX3X0  },
    { "v_cmpx_f_f64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0x70, ARCH_RX3X0  },
    { "v_cmpx_f_f64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0x70, ARCH_RX3X0  },
    { "v_cmpx_lt_f64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0x71, ARCH_RX3X0  },
    { "v_cmpx_lt_f64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0x71, ARCH_RX3X0  },
    { "v_cmpx_eq_f64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0x72, ARCH_RX3X0  },
    { "v_cmpx_eq_f64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0x72, ARCH_RX3X0  },
    { "v_cmpx_le_f64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0x73, ARCH_RX3X0  },
    { "v_cmpx_le_f64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0x73, ARCH_RX3X0  },
    { "v_cmpx_gt_f64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0x74, ARCH_RX3X0  },
    { "v_cmpx_gt_f64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0x74, ARCH_RX3X0  },
    { "v_cmpx_lg_f64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0x75, ARCH_RX3X0  },
    { "v_cmpx_lg_f64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0x75, ARCH_RX3X0  },
    { "v_cmpx_ge_f64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0x76, ARCH_RX3X0  },
    { "v_cmpx_ge_f64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0x76, ARCH_RX3X0  },
    { "v_cmpx_o_f64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0x77, ARCH_RX3X0  },
    { "v_cmpx_o_f64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0x77, ARCH_RX3X0  },
    { "v_cmpx_u_f64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0x78, ARCH_RX3X0  },
    { "v_cmpx_u_f64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0x78, ARCH_RX3X0  },
    { "v_cmpx_nge_f64",      GCNENC_VOPC,   GCN_REG_ALL_64,           0x79, ARCH_RX3X0  },
    { "v_cmpx_nge_f64",      GCNENC_VOP3A,  GCN_REG_ALL_64,           0x79, ARCH_RX3X0  },
    { "v_cmpx_nlg_f64",      GCNENC_VOPC,   GCN_REG_ALL_64,           0x7a, ARCH_RX3X0  },
    { "v_cmpx_nlg_f64",      GCNENC_VOP3A,  GCN_REG_ALL_64,           0x7a, ARCH_RX3X0  },
    { "v_cmpx_ngt_f64",      GCNENC_VOPC,   GCN_REG_ALL_64,           0x7b, ARCH_RX3X0  },
    { "v_cmpx_ngt_f64",      GCNENC_VOP3A,  GCN_REG_ALL_64,           0x7b, ARCH_RX3X0  },
    { "v_cmpx_nle_f64",      GCNENC_VOPC,   GCN_REG_ALL_64,           0x7c, ARCH_RX3X0  },
    { "v_cmpx_nle_f64",      GCNENC_VOP3A,  GCN_REG_ALL_64,           0x7c, ARCH_RX3X0  },
    { "v_cmpx_neq_f64",      GCNENC_VOPC,   GCN_REG_ALL_64,           0x7d, ARCH_RX3X0  },
    { "v_cmpx_neq_f64",      GCNENC_VOP3A,  GCN_REG_ALL_64,           0x7d, ARCH_RX3X0  },
    { "v_cmpx_nlt_f64",      GCNENC_VOPC,   GCN_REG_ALL_64,           0x7e, ARCH_RX3X0  },
    { "v_cmpx_nlt_f64",      GCNENC_VOP3A,  GCN_REG_ALL_64,           0x7e, ARCH_RX3X0  },
    { "v_cmpx_tru_f64",      GCNENC_VOPC,   GCN_REG_ALL_64,           0x7f, ARCH_RX3X0  },
    { "v_cmpx_tru_f64",      GCNENC_VOP3A,  GCN_REG_ALL_64,           0x7f, ARCH_RX3X0  },
    { "v_cmpx_t_f64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0x7f, ARCH_RX3X0  },
    { "v_cmpx_t_f64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0x7f, ARCH_RX3X0  },
    { "v_cmp_f_i16",         GCNENC_VOPC,   GCN_STDMODE,              0xa0, ARCH_RX3X0  },
    { "v_cmp_f_i16",         GCNENC_VOP3A,  GCN_STDMODE,              0xa0, ARCH_RX3X0  },
    { "v_cmp_lt_i16",        GCNENC_VOPC,   GCN_STDMODE,              0xa1, ARCH_RX3X0  },
    { "v_cmp_lt_i16",        GCNENC_VOP3A,  GCN_STDMODE,              0xa1, ARCH_RX3X0  },
    { "v_cmp_eq_i16",        GCNENC_VOPC,   GCN_STDMODE,              0xa2, ARCH_RX3X0  },
    { "v_cmp_eq_i16",        GCNENC_VOP3A,  GCN_STDMODE,              0xa2, ARCH_RX3X0  },
    { "v_cmp_le_i16",        GCNENC_VOPC,   GCN_STDMODE,              0xa3, ARCH_RX3X0  },
    { "v_cmp_le_i16",        GCNENC_VOP3A,  GCN_STDMODE,              0xa3, ARCH_RX3X0  },
    { "v_cmp_gt_i16",        GCNENC_VOPC,   GCN_STDMODE,              0xa4, ARCH_RX3X0  },
    { "v_cmp_gt_i16",        GCNENC_VOP3A,  GCN_STDMODE,              0xa4, ARCH_RX3X0  },
    { "v_cmp_lg_i16",        GCNENC_VOPC,   GCN_STDMODE,              0xa5, ARCH_RX3X0  },
    { "v_cmp_lg_i16",        GCNENC_VOP3A,  GCN_STDMODE,              0xa5, ARCH_RX3X0  },
    { "v_cmp_ne_i16",        GCNENC_VOPC,   GCN_STDMODE,              0xa5, ARCH_RX3X0  },
    { "v_cmp_ne_i16",        GCNENC_VOP3A,  GCN_STDMODE,              0xa5, ARCH_RX3X0  },
    { "v_cmp_ge_i16",        GCNENC_VOPC,   GCN_STDMODE,              0xa6, ARCH_RX3X0  },
    { "v_cmp_ge_i16",        GCNENC_VOP3A,  GCN_STDMODE,              0xa6, ARCH_RX3X0  },
    { "v_cmp_tru_i16",       GCNENC_VOPC,   GCN_STDMODE,              0xa7, ARCH_RX3X0  },
    { "v_cmp_tru_i16",       GCNENC_VOP3A,  GCN_STDMODE,              0xa7, ARCH_RX3X0  },
    { "v_cmp_t_i16",         GCNENC_VOPC,   GCN_STDMODE,              0xa7, ARCH_RX3X0  },
    { "v_cmp_t_i16",         GCNENC_VOP3A,  GCN_STDMODE,              0xa7, ARCH_RX3X0  },
    { "v_cmp_f_u16",         GCNENC_VOPC,   GCN_STDMODE,              0xa8, ARCH_RX3X0  },
    { "v_cmp_f_u16",         GCNENC_VOP3A,  GCN_STDMODE,              0xa8, ARCH_RX3X0  },
    { "v_cmp_lt_u16",        GCNENC_VOPC,   GCN_STDMODE,              0xa9, ARCH_RX3X0  },
    { "v_cmp_lt_u16",        GCNENC_VOP3A,  GCN_STDMODE,              0xa9, ARCH_RX3X0  },
    { "v_cmp_eq_u16",        GCNENC_VOPC,   GCN_STDMODE,              0xaa, ARCH_RX3X0  },
    { "v_cmp_eq_u16",        GCNENC_VOP3A,  GCN_STDMODE,              0xaa, ARCH_RX3X0  },
    { "v_cmp_le_u16",        GCNENC_VOPC,   GCN_STDMODE,              0xab, ARCH_RX3X0  },
    { "v_cmp_le_u16",        GCNENC_VOP3A,  GCN_STDMODE,              0xab, ARCH_RX3X0  },
    { "v_cmp_gt_u16",        GCNENC_VOPC,   GCN_STDMODE,              0xac, ARCH_RX3X0  },
    { "v_cmp_gt_u16",        GCNENC_VOP3A,  GCN_STDMODE,              0xac, ARCH_RX3X0  },
    { "v_cmp_lg_u16",        GCNENC_VOPC,   GCN_STDMODE,              0xad, ARCH_RX3X0  },
    { "v_cmp_lg_u16",        GCNENC_VOP3A,  GCN_STDMODE,              0xad, ARCH_RX3X0  },
    { "v_cmp_ne_u16",        GCNENC_VOPC,   GCN_STDMODE,              0xad, ARCH_RX3X0  },
    { "v_cmp_ne_u16",        GCNENC_VOP3A,  GCN_STDMODE,              0xad, ARCH_RX3X0  },
    { "v_cmp_ge_u16",        GCNENC_VOPC,   GCN_STDMODE,              0xae, ARCH_RX3X0  },
    { "v_cmp_ge_u16",        GCNENC_VOP3A,  GCN_STDMODE,              0xae, ARCH_RX3X0  },
    { "v_cmp_tru_u16",       GCNENC_VOPC,   GCN_STDMODE,              0xaf, ARCH_RX3X0  },
    { "v_cmp_tru_u16",       GCNENC_VOP3A,  GCN_STDMODE,              0xaf, ARCH_RX3X0  },
    { "v_cmp_t_u16",         GCNENC_VOPC,   GCN_STDMODE,              0xaf, ARCH_RX3X0  },
    { "v_cmp_t_u16",         GCNENC_VOP3A,  GCN_STDMODE,              0xaf, ARCH_RX3X0  },
    { "v_cmpx_f_i16",        GCNENC_VOPC,   GCN_STDMODE,              0xb0, ARCH_RX3X0  },
    { "v_cmpx_f_i16",        GCNENC_VOP3A,  GCN_STDMODE,              0xb0, ARCH_RX3X0  },
    { "v_cmpx_lt_i16",       GCNENC_VOPC,   GCN_STDMODE,              0xb1, ARCH_RX3X0  },
    { "v_cmpx_lt_i16",       GCNENC_VOP3A,  GCN_STDMODE,              0xb1, ARCH_RX3X0  },
    { "v_cmpx_eq_i16",       GCNENC_VOPC,   GCN_STDMODE,              0xb2, ARCH_RX3X0  },
    { "v_cmpx_eq_i16",       GCNENC_VOP3A,  GCN_STDMODE,              0xb2, ARCH_RX3X0  },
    { "v_cmpx_le_i16",       GCNENC_VOPC,   GCN_STDMODE,              0xb3, ARCH_RX3X0  },
    { "v_cmpx_le_i16",       GCNENC_VOP3A,  GCN_STDMODE,              0xb3, ARCH_RX3X0  },
    { "v_cmpx_gt_i16",       GCNENC_VOPC,   GCN_STDMODE,              0xb4, ARCH_RX3X0  },
    { "v_cmpx_gt_i16",       GCNENC_VOP3A,  GCN_STDMODE,              0xb4, ARCH_RX3X0  },
    { "v_cmpx_lg_i16",       GCNENC_VOPC,   GCN_STDMODE,              0xb5, ARCH_RX3X0  },
    { "v_cmpx_lg_i16",       GCNENC_VOP3A,  GCN_STDMODE,              0xb5, ARCH_RX3X0  },
    { "v_cmpx_ne_i16",       GCNENC_VOPC,   GCN_STDMODE,              0xb5, ARCH_RX3X0  },
    { "v_cmpx_ne_i16",       GCNENC_VOP3A,  GCN_STDMODE,              0xb5, ARCH_RX3X0  },
    { "v_cmpx_ge_i16",       GCNENC_VOPC,   GCN_STDMODE,              0xb6, ARCH_RX3X0  },
    { "v_cmpx_ge_i16",       GCNENC_VOP3A,  GCN_STDMODE,              0xb6, ARCH_RX3X0  },
    { "v_cmpx_tru_i16",      GCNENC_VOPC,   GCN_STDMODE,              0xb7, ARCH_RX3X0  },
    { "v_cmpx_tru_i16",      GCNENC_VOP3A,  GCN_STDMODE,              0xb7, ARCH_RX3X0  },
    { "v_cmpx_t_i16",        GCNENC_VOPC,   GCN_STDMODE,              0xb7, ARCH_RX3X0  },
    { "v_cmpx_t_i16",        GCNENC_VOP3A,  GCN_STDMODE,              0xb7, ARCH_RX3X0  },
    { "v_cmpx_f_u16",        GCNENC_VOPC,   GCN_STDMODE,              0xb8, ARCH_RX3X0  },
    { "v_cmpx_f_u16",        GCNENC_VOP3A,  GCN_STDMODE,              0xb8, ARCH_RX3X0  },
    { "v_cmpx_lt_u16",       GCNENC_VOPC,   GCN_STDMODE,              0xb9, ARCH_RX3X0  },
    { "v_cmpx_lt_u16",       GCNENC_VOP3A,  GCN_STDMODE,              0xb9, ARCH_RX3X0  },
    { "v_cmpx_eq_u16",       GCNENC_VOPC,   GCN_STDMODE,              0xba, ARCH_RX3X0  },
    { "v_cmpx_eq_u16",       GCNENC_VOP3A,  GCN_STDMODE,              0xba, ARCH_RX3X0  },
    { "v_cmpx_le_u16",       GCNENC_VOPC,   GCN_STDMODE,              0xbb, ARCH_RX3X0  },
    { "v_cmpx_le_u16",       GCNENC_VOP3A,  GCN_STDMODE,              0xbb, ARCH_RX3X0  },
    { "v_cmpx_gt_u16",       GCNENC_VOPC,   GCN_STDMODE,              0xbc, ARCH_RX3X0  },
    { "v_cmpx_gt_u16",       GCNENC_VOP3A,  GCN_STDMODE,              0xbc, ARCH_RX3X0  },
    { "v_cmpx_lg_u16",       GCNENC_VOPC,   GCN_STDMODE,              0xbd, ARCH_RX3X0  },
    { "v_cmpx_lg_u16",       GCNENC_VOP3A,  GCN_STDMODE,              0xbd, ARCH_RX3X0  },
    { "v_cmpx_ne_u16",       GCNENC_VOPC,   GCN_STDMODE,              0xbd, ARCH_RX3X0  },
    { "v_cmpx_ne_u16",       GCNENC_VOP3A,  GCN_STDMODE,              0xbd, ARCH_RX3X0  },
    { "v_cmpx_ge_u16",       GCNENC_VOPC,   GCN_STDMODE,              0xbe, ARCH_RX3X0  },
    { "v_cmpx_ge_u16",       GCNENC_VOP3A,  GCN_STDMODE,              0xbe, ARCH_RX3X0  },
    { "v_cmpx_tru_u16",      GCNENC_VOPC,   GCN_STDMODE,              0xbf, ARCH_RX3X0  },
    { "v_cmpx_tru_u16",      GCNENC_VOP3A,  GCN_STDMODE,              0xbf, ARCH_RX3X0  },
    { "v_cmpx_t_u16",        GCNENC_VOPC,   GCN_STDMODE,              0xbf, ARCH_RX3X0  },
    { "v_cmpx_t_u16",        GCNENC_VOP3A,  GCN_STDMODE,              0xbf, ARCH_RX3X0  },
    { "v_cmp_f_i32",         GCNENC_VOPC,   GCN_STDMODE,              0xc0, ARCH_RX3X0  },
    { "v_cmp_f_i32",         GCNENC_VOP3A,  GCN_STDMODE,              0xc0, ARCH_RX3X0  },
//    { "v_cmp_lt_i32",        GCNENC_VOPC,   GCN_STDMODE,              0xc1, ARCH_RX3X0  },
//    { "v_cmp_lt_i32",        GCNENC_VOP3A,  GCN_STDMODE,              0xc1, ARCH_RX3X0  },
//    { "v_cmp_eq_i32",        GCNENC_VOPC,   GCN_STDMODE,              0xc2, ARCH_RX3X0  },
//    { "v_cmp_eq_i32",        GCNENC_VOP3A,  GCN_STDMODE,              0xc2, ARCH_RX3X0  },
//    { "v_cmp_le_i32",        GCNENC_VOPC,   GCN_STDMODE,              0xc3, ARCH_RX3X0  },
//    { "v_cmp_le_i32",        GCNENC_VOP3A,  GCN_STDMODE,              0xc3, ARCH_RX3X0  },
//    { "v_cmp_gt_i32",        GCNENC_VOPC,   GCN_STDMODE,              0xc4, ARCH_RX3X0  },
//    { "v_cmp_gt_i32",        GCNENC_VOP3A,  GCN_STDMODE,              0xc4, ARCH_RX3X0  },
//    { "v_cmp_lg_i32",        GCNENC_VOPC,   GCN_STDMODE,              0xc5, ARCH_RX3X0  },
//    { "v_cmp_lg_i32",        GCNENC_VOP3A,  GCN_STDMODE,              0xc5, ARCH_RX3X0  },
//    { "v_cmp_ne_i32",        GCNENC_VOPC,   GCN_STDMODE,              0xc5, ARCH_RX3X0  },
//    { "v_cmp_ne_i32",        GCNENC_VOP3A,  GCN_STDMODE,              0xc5, ARCH_RX3X0  },
//    { "v_cmp_ge_i32",        GCNENC_VOPC,   GCN_STDMODE,              0xc6, ARCH_RX3X0  },
//    { "v_cmp_ge_i32",        GCNENC_VOP3A,  GCN_STDMODE,              0xc6, ARCH_RX3X0  },
    { "v_cmp_tru_i32",       GCNENC_VOPC,   GCN_STDMODE,              0xc7, ARCH_RX3X0  },
    { "v_cmp_tru_i32",       GCNENC_VOP3A,  GCN_STDMODE,              0xc7, ARCH_RX3X0  },
    { "v_cmp_t_i32",         GCNENC_VOPC,   GCN_STDMODE,              0xc7, ARCH_RX3X0  },
    { "v_cmp_t_i32",         GCNENC_VOP3A,  GCN_STDMODE,              0xc7, ARCH_RX3X0  },
    { "v_cmp_f_u32",         GCNENC_VOPC,   GCN_STDMODE,              0xc8, ARCH_RX3X0  },
    { "v_cmp_f_u32",         GCNENC_VOP3A,  GCN_STDMODE,              0xc8, ARCH_RX3X0  },
//    { "v_cmp_lt_u32",        GCNENC_VOPC,   GCN_STDMODE,              0xc9, ARCH_RX3X0  },
//    { "v_cmp_lt_u32",        GCNENC_VOP3A,  GCN_STDMODE,              0xc9, ARCH_RX3X0  },
//    { "v_cmp_eq_u32",        GCNENC_VOPC,   GCN_STDMODE,              0xca, ARCH_RX3X0  },
//    { "v_cmp_eq_u32",        GCNENC_VOP3A,  GCN_STDMODE,              0xca, ARCH_RX3X0  },
//    { "v_cmp_le_u32",        GCNENC_VOPC,   GCN_STDMODE,              0xcb, ARCH_RX3X0  },
//    { "v_cmp_le_u32",        GCNENC_VOP3A,  GCN_STDMODE,              0xcb, ARCH_RX3X0  },
//    { "v_cmp_gt_u32",        GCNENC_VOPC,   GCN_STDMODE,              0xcc, ARCH_RX3X0  },
//    { "v_cmp_gt_u32",        GCNENC_VOP3A,  GCN_STDMODE,              0xcc, ARCH_RX3X0  },
//    { "v_cmp_lg_u32",        GCNENC_VOPC,   GCN_STDMODE,              0xcd, ARCH_RX3X0  },
//    { "v_cmp_lg_u32",        GCNENC_VOP3A,  GCN_STDMODE,              0xcd, ARCH_RX3X0  },
//    { "v_cmp_ne_u32",        GCNENC_VOPC,   GCN_STDMODE,              0xcd, ARCH_RX3X0  },
//    { "v_cmp_ne_u32",        GCNENC_VOP3A,  GCN_STDMODE,              0xcd, ARCH_RX3X0  },
//    { "v_cmp_ge_u32",        GCNENC_VOPC,   GCN_STDMODE,              0xce, ARCH_RX3X0  },
//    { "v_cmp_ge_u32",        GCNENC_VOP3A,  GCN_STDMODE,              0xce, ARCH_RX3X0  },
    { "v_cmp_tru_u32",       GCNENC_VOPC,   GCN_STDMODE,              0xcf, ARCH_RX3X0  },
    { "v_cmp_tru_u32",       GCNENC_VOP3A,  GCN_STDMODE,              0xcf, ARCH_RX3X0  },
    { "v_cmp_t_u32",         GCNENC_VOPC,   GCN_STDMODE,              0xcf, ARCH_RX3X0  },
    { "v_cmp_t_u32",         GCNENC_VOP3A,  GCN_STDMODE,              0xcf, ARCH_RX3X0  },
    { "v_cmpx_f_i32",        GCNENC_VOPC,   GCN_STDMODE,              0xd0, ARCH_RX3X0  },
    { "v_cmpx_f_i32",        GCNENC_VOP3A,  GCN_STDMODE,              0xd0, ARCH_RX3X0  },
    { "v_cmpx_lt_i32",       GCNENC_VOPC,   GCN_STDMODE,              0xd1, ARCH_RX3X0  },
    { "v_cmpx_lt_i32",       GCNENC_VOP3A,  GCN_STDMODE,              0xd1, ARCH_RX3X0  },
    { "v_cmpx_eq_i32",       GCNENC_VOPC,   GCN_STDMODE,              0xd2, ARCH_RX3X0  },
    { "v_cmpx_eq_i32",       GCNENC_VOP3A,  GCN_STDMODE,              0xd2, ARCH_RX3X0  },
    { "v_cmpx_le_i32",       GCNENC_VOPC,   GCN_STDMODE,              0xd3, ARCH_RX3X0  },
    { "v_cmpx_le_i32",       GCNENC_VOP3A,  GCN_STDMODE,              0xd3, ARCH_RX3X0  },
    { "v_cmpx_gt_i32",       GCNENC_VOPC,   GCN_STDMODE,              0xd4, ARCH_RX3X0  },
    { "v_cmpx_gt_i32",       GCNENC_VOP3A,  GCN_STDMODE,              0xd4, ARCH_RX3X0  },
    { "v_cmpx_lg_i32",       GCNENC_VOPC,   GCN_STDMODE,              0xd5, ARCH_RX3X0  },
    { "v_cmpx_lg_i32",       GCNENC_VOP3A,  GCN_STDMODE,              0xd5, ARCH_RX3X0  },
    { "v_cmpx_ne_i32",       GCNENC_VOPC,   GCN_STDMODE,              0xd5, ARCH_RX3X0  },
    { "v_cmpx_ne_i32",       GCNENC_VOP3A,  GCN_STDMODE,              0xd5, ARCH_RX3X0  },
    { "v_cmpx_ge_i32",       GCNENC_VOPC,   GCN_STDMODE,              0xd6, ARCH_RX3X0  },
    { "v_cmpx_ge_i32",       GCNENC_VOP3A,  GCN_STDMODE,              0xd6, ARCH_RX3X0  },
    { "v_cmpx_tru_i32",      GCNENC_VOPC,   GCN_STDMODE,              0xd7, ARCH_RX3X0  },
    { "v_cmpx_tru_i32",      GCNENC_VOP3A,  GCN_STDMODE,              0xd7, ARCH_RX3X0  },
    { "v_cmpx_t_i32",        GCNENC_VOPC,   GCN_STDMODE,              0xd7, ARCH_RX3X0  },
    { "v_cmpx_t_i32",        GCNENC_VOP3A,  GCN_STDMODE,              0xd7, ARCH_RX3X0  },
    { "v_cmpx_f_u32",        GCNENC_VOPC,   GCN_STDMODE,              0xd8, ARCH_RX3X0  },
    { "v_cmpx_f_u32",        GCNENC_VOP3A,  GCN_STDMODE,              0xd8, ARCH_RX3X0  },
    { "v_cmpx_lt_u32",       GCNENC_VOPC,   GCN_STDMODE,              0xd9, ARCH_RX3X0  },
    { "v_cmpx_lt_u32",       GCNENC_VOP3A,  GCN_STDMODE,              0xd9, ARCH_RX3X0  },
    { "v_cmpx_eq_u32",       GCNENC_VOPC,   GCN_STDMODE,              0xda, ARCH_RX3X0  },
    { "v_cmpx_eq_u32",       GCNENC_VOP3A,  GCN_STDMODE,              0xda, ARCH_RX3X0  },
    { "v_cmpx_le_u32",       GCNENC_VOPC,   GCN_STDMODE,              0xdb, ARCH_RX3X0  },
    { "v_cmpx_le_u32",       GCNENC_VOP3A,  GCN_STDMODE,              0xdb, ARCH_RX3X0  },
    { "v_cmpx_gt_u32",       GCNENC_VOPC,   GCN_STDMODE,              0xdc, ARCH_RX3X0  },
    { "v_cmpx_gt_u32",       GCNENC_VOP3A,  GCN_STDMODE,              0xdc, ARCH_RX3X0  },
    { "v_cmpx_lg_u32",       GCNENC_VOPC,   GCN_STDMODE,              0xdd, ARCH_RX3X0  },
    { "v_cmpx_lg_u32",       GCNENC_VOP3A,  GCN_STDMODE,              0xdd, ARCH_RX3X0  },
    { "v_cmpx_ne_u32",       GCNENC_VOPC,   GCN_STDMODE,              0xdd, ARCH_RX3X0  },
    { "v_cmpx_ne_u32",       GCNENC_VOP3A,  GCN_STDMODE,              0xdd, ARCH_RX3X0  },
    { "v_cmpx_ge_u32",       GCNENC_VOPC,   GCN_STDMODE,              0xde, ARCH_RX3X0  },
    { "v_cmpx_ge_u32",       GCNENC_VOP3A,  GCN_STDMODE,              0xde, ARCH_RX3X0  },
    { "v_cmpx_tru_u32",      GCNENC_VOPC,   GCN_STDMODE,              0xdf, ARCH_RX3X0  },
    { "v_cmpx_tru_u32",      GCNENC_VOP3A,  GCN_STDMODE,              0xdf, ARCH_RX3X0  },
    { "v_cmpx_t_u32",        GCNENC_VOPC,   GCN_STDMODE,              0xdf, ARCH_RX3X0  },
    { "v_cmpx_t_u32",        GCNENC_VOP3A,  GCN_STDMODE,              0xdf, ARCH_RX3X0  },
    { "v_cmp_f_i64",         GCNENC_VOPC,   GCN_REG_ALL_64,           0xe0, ARCH_RX3X0  },
    { "v_cmp_f_i64",         GCNENC_VOP3A,  GCN_REG_ALL_64,           0xe0, ARCH_RX3X0  },
    { "v_cmp_lt_i64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0xe1, ARCH_RX3X0  },
    { "v_cmp_lt_i64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0xe1, ARCH_RX3X0  },
    { "v_cmp_eq_i64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0xe2, ARCH_RX3X0  },
    { "v_cmp_eq_i64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0xe2, ARCH_RX3X0  },
    { "v_cmp_le_i64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0xe3, ARCH_RX3X0  },
    { "v_cmp_le_i64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0xe3, ARCH_RX3X0  },
    { "v_cmp_gt_i64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0xe4, ARCH_RX3X0  },
    { "v_cmp_gt_i64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0xe4, ARCH_RX3X0  },
    { "v_cmp_lg_i64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0xe5, ARCH_RX3X0  },
    { "v_cmp_lg_i64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0xe5, ARCH_RX3X0  },
    { "v_cmp_ne_i64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0xe5, ARCH_RX3X0  },
    { "v_cmp_ne_i64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0xe5, ARCH_RX3X0  },
    { "v_cmp_ge_i64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0xe6, ARCH_RX3X0  },
    { "v_cmp_ge_i64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0xe6, ARCH_RX3X0  },
    { "v_cmp_tru_i64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0xe7, ARCH_RX3X0  },
    { "v_cmp_tru_i64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0xe7, ARCH_RX3X0  },
    { "v_cmp_t_i64",         GCNENC_VOPC,   GCN_REG_ALL_64,           0xe7, ARCH_RX3X0  },
    { "v_cmp_t_i64",         GCNENC_VOP3A,  GCN_REG_ALL_64,           0xe7, ARCH_RX3X0  },
    { "v_cmp_f_u64",         GCNENC_VOPC,   GCN_REG_ALL_64,           0xe8, ARCH_RX3X0  },
    { "v_cmp_f_u64",         GCNENC_VOP3A,  GCN_REG_ALL_64,           0xe8, ARCH_RX3X0  },
    { "v_cmp_lt_u64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0xe9, ARCH_RX3X0  },
    { "v_cmp_lt_u64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0xe9, ARCH_RX3X0  },
    { "v_cmp_eq_u64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0xea, ARCH_RX3X0  },
    { "v_cmp_eq_u64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0xea, ARCH_RX3X0  },
    { "v_cmp_le_u64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0xeb, ARCH_RX3X0  },
    { "v_cmp_le_u64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0xeb, ARCH_RX3X0  },
    { "v_cmp_gt_u64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0xec, ARCH_RX3X0  },
    { "v_cmp_gt_u64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0xec, ARCH_RX3X0  },
    { "v_cmp_lg_u64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0xed, ARCH_RX3X0  },
    { "v_cmp_lg_u64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0xed, ARCH_RX3X0  },
    { "v_cmp_ne_u64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0xed, ARCH_RX3X0  },
    { "v_cmp_ne_u64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0xed, ARCH_RX3X0  },
    { "v_cmp_ge_u64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0xee, ARCH_RX3X0  },
    { "v_cmp_ge_u64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0xee, ARCH_RX3X0  },
    { "v_cmp_tru_u64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0xef, ARCH_RX3X0  },
    { "v_cmp_tru_u64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0xef, ARCH_RX3X0  },
    { "v_cmp_t_u64",         GCNENC_VOPC,   GCN_REG_ALL_64,           0xef, ARCH_RX3X0  },
    { "v_cmp_t_u64",         GCNENC_VOP3A,  GCN_REG_ALL_64,           0xef, ARCH_RX3X0  },
    { "v_cmpx_f_i64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0xf0, ARCH_RX3X0  },
    { "v_cmpx_f_i64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0xf0, ARCH_RX3X0  },
    { "v_cmpx_lt_i64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0xf1, ARCH_RX3X0  },
    { "v_cmpx_lt_i64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0xf1, ARCH_RX3X0  },
    { "v_cmpx_eq_i64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0xf2, ARCH_RX3X0  },
    { "v_cmpx_eq_i64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0xf2, ARCH_RX3X0  },
    { "v_cmpx_le_i64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0xf3, ARCH_RX3X0  },
    { "v_cmpx_le_i64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0xf3, ARCH_RX3X0  },
    { "v_cmpx_gt_i64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0xf4, ARCH_RX3X0  },
    { "v_cmpx_gt_i64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0xf4, ARCH_RX3X0  },
    { "v_cmpx_lg_i64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0xf5, ARCH_RX3X0  },
    { "v_cmpx_lg_i64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0xf5, ARCH_RX3X0  },
    { "v_cmpx_ne_i64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0xf5, ARCH_RX3X0  },
    { "v_cmpx_ne_i64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0xf5, ARCH_RX3X0  },
    { "v_cmpx_ge_i64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0xf6, ARCH_RX3X0  },
    { "v_cmpx_ge_i64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0xf6, ARCH_RX3X0  },
    { "v_cmpx_tru_i64",      GCNENC_VOPC,   GCN_REG_ALL_64,           0xf7, ARCH_RX3X0  },
    { "v_cmpx_tru_i64",      GCNENC_VOP3A,  GCN_REG_ALL_64,           0xf7, ARCH_RX3X0  },
    { "v_cmpx_t_i64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0xf7, ARCH_RX3X0  },
    { "v_cmpx_t_i64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0xf7, ARCH_RX3X0  },
    { "v_cmpx_f_u64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0xf8, ARCH_RX3X0  },
    { "v_cmpx_f_u64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0xf8, ARCH_RX3X0  },
    { "v_cmpx_lt_u64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0xf9, ARCH_RX3X0  },
    { "v_cmpx_lt_u64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0xf9, ARCH_RX3X0  },
    { "v_cmpx_eq_u64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0xfa, ARCH_RX3X0  },
    { "v_cmpx_eq_u64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0xfa, ARCH_RX3X0  },
    { "v_cmpx_le_u64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0xfb, ARCH_RX3X0  },
    { "v_cmpx_le_u64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0xfb, ARCH_RX3X0  },
    { "v_cmpx_gt_u64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0xfc, ARCH_RX3X0  },
    { "v_cmpx_gt_u64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0xfc, ARCH_RX3X0  },
    { "v_cmpx_lg_u64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0xfd, ARCH_RX3X0  },
    { "v_cmpx_lg_u64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0xfd, ARCH_RX3X0  },
    { "v_cmpx_ne_u64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0xfd, ARCH_RX3X0  },
    { "v_cmpx_ne_u64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0xfd, ARCH_RX3X0  },
    { "v_cmpx_ge_u64",       GCNENC_VOPC,   GCN_REG_ALL_64,           0xfe, ARCH_RX3X0  },
    { "v_cmpx_ge_u64",       GCNENC_VOP3A,  GCN_REG_ALL_64,           0xfe, ARCH_RX3X0  },
    { "v_cmpx_tru_u64",      GCNENC_VOPC,   GCN_REG_ALL_64,           0xff, ARCH_RX3X0  },
    { "v_cmpx_tru_u64",      GCNENC_VOP3A,  GCN_REG_ALL_64,           0xff, ARCH_RX3X0  },
    { "v_cmpx_t_u64",        GCNENC_VOPC,   GCN_REG_ALL_64,           0xff, ARCH_RX3X0  },
    { "v_cmpx_t_u64",        GCNENC_VOP3A,  GCN_REG_ALL_64,           0xff, ARCH_RX3X0  },
*)
end;

initialization
  PatchIn_GCN3;
  InitILTables;
  InitISATables;
finalization
end.
