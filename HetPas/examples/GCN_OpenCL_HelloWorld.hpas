//use ctrl+space for 'code insight/intellisense'
//F9=run
//select output tabsheet to check outputs execution results  --->

#define groupsize 256

const code:=asm_isa(
  isa79xx
  numVgprs 64  numSgprs 64  //used registers
  numThreadPerGroup groupsize
  oclBuffers 1,1            //first value is number of UAVs,
                            //second value is number of const buffers(1 max)
                            //you can check userElements and user_sgpr in the disassembled code
                            //for 1,1 it is:
                            ;  userElements[0]      = IMM_UAV, 10, s[4:7]
                            ;  userElements[1]      = IMM_CONST_BUFFER, 1, s[8:11]
                            ;  userElements[2]      = IMM_CONST_BUFFER, 2, s[12:15]
                            ;  COMPUTE_PGM_RSRC2:USER_SGPR      = 16

  ldsSize 0                 //in bytes

  alias uav=s[4:7], cb=s[12:15], uavofs=s[8:11]

  s_mulk_i32    s16, groupsize           //scale ThreadgroupID with GroupSize
  v_add_i32     v0, vcc, s16, v0         //v0: global threadId
  s_buffer_load_dword  s0, uavofs, 0x00  //s0: uav offset
  s_buffer_load_dword  s1, cb, 0x00      //read from contant buffer
  s_waitcnt     lgkmcnt(0)               //wait for s_buffer_loads
  v_mad_u32_u24 v2, v0, 4, s0    //address = GID
  v_add_i32     v3, vcc, s1, v0  //value = GID+cb[0]
//  tbuffer_store_format_x  v3, v2, uav, 0 offen offset:0 format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT]
  buffer_store_dword v3, v2, uav, 0 offen offset:0
  s_endpgm
);

const WorkCount:=1536;
var i,j,k;

//find a cl device
function FindGCNDevice;
begin
  for var d in cl.devices where d.Info.TargetSeries>=7 do exit(d);
  raise exception.create("No GCN device found");
end;

var dev:=FindGCNDevice;
writeln(dev.dump);

//compile kernel
var kernel:=dev.NewKernel(code);
writeln(kernel.ISACode);  //show disasm
filewrite('c:\test.elf',kernel.ELFImage); //save opencl .elf file, you can give it to NewKernel() later

//allocate buffer
var uav:=dev.NewBuffer('rw',WorkCount*4{in bytes});

var cb:=dev.NewBuffer('r',4096{in bytes});
cb.intVArray:=(1000);

//run kernel
var ev:=kernel.run(WorkCount,uav,cb);
ev.waitfor;
writeln(format('elapsed: %.3f ms',ev.elapsedtime_sec*1000));
ev.free;

//display results
with uav do for i:=0 to WorkCount-1 do
  writeln(format('%6x: %.8x %10d %10f',i,Ints[i],Ints[i],Floats[i]));

//free up stuff
uav.free;
cb.free;
kernel.free;

/*expected results:
     0: 000003E8       1000       0.00
     1: 000003E9       1001       0.00
     2: 000003EA       1002       0.00
     3: 000003EB       1003       0.00
     4: 000003EC       1004       0.00
     5: 000003ED       1005       0.00
     6: 000003EE       1006       0.00
     7: 000003EF       1007       0.00
     8: 000003F0       1008       0.00
     9: 000003F1       1009       0.00
     A: 000003F2       1010       0.00
     ... */