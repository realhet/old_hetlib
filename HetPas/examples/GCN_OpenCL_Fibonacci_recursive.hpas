const maxDepth:=20;

const code:=asm_isa(
  isa79xx \ numVGprs 64 \ numSgprs 105 \ ldsSize 0 \ numthreadpergroup 64
  oclbuffers 1,1
  alias uav=s[4:7], uavofs=s[8:11], cb=s[12:15]

  alias codebase=s[12:13], maxAddr=s14

  s_getpc_b64   codebase \ s_sub_u32     codebase, codebase, 4 //calc beginning of code addr

  s_buffer_load_dword  s20, uavofs, 0x00  //s100: uav offset
  s_buffer_load_dword  maxAddr, cb, 0      //load constant buffer params
  s_waitcnt     lgkmcnt(0)
  s_lshl_b32    maxAddr, maxAddr, 2

  s_movk_i32    exec_lo, 1
  s_movk_i32    exec_hi, 0      //only 1 lane will write results
  v_mov_b32     v0, s20         //dst array address
  s_movk_i32    m0, 104         //init stack pointer

  {#define push(x) s_sub_u32 m0,m0,1 \ s_movreld_b32 s0, x \}
  {#define invoke(label) s_add_u32 s0, s12, label \ s_addc_u32 s1,s13,0 \ s_swappc_b64 s[0:1],s[0:1] \}
  {#define invoke(label,p0) push(p0) invoke(label) \}
  {#define invoke(label,p0,p1) push(p0) push(p1) invoke(label) \}
  {#define enter s_sub_u32 m0, m0, 2 \ s_movreld_b64 s0, s0 \}
  {#define enter(p0) enter s_movrels_b32 p0, s2 \}
  {#define enter(p0,p1) enter s_movrels_b32 p0, s3 \ s_movrels_b32 p1, s2 }
  {#define ret(n)   s_movrels_b64 s0,s0 \ s_add_u32 m0,m0,2 \ //pop return addr
                    s_add_u32 m0,m0,n \ //clear parameters
                    s_setpc_b64 s[0:1] \ //ret  \}

  invoke(@Fibonacci,1,0)

  s_endpgm

@Fibonacci:
  enter(s0,s1)
  //do fibonacci
  s_add_i32     s2, s0, s1
  //write the result
  v_writelane_b32 v1,s2,0
  tbuffer_store_format_x v1, v0, uav, 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT]
  v_add_i32     v0, vcc, 4, v0   //increment dst offset
  v_cmp_le_u32  vcc, maxAddr, v0 //limit recursion
  s_cbranch_vccnz @nomore
    invoke(@Fibonacci,s1,s2)
  @nomore:
  ret(2)
);

function FindGCNDevice;
begin
  for var d in cl.devices where d.Info.TargetSeries>=7 do exit(d);
  raise exception.create("No GCN device found");
end;

var
  dev:=FindGCNDevice,
  kernel:=dev.NewKernel(code),
  uav:=dev.NewBuffer('rw',4096),
  cb:=dev.NewBuffer('r',maxDepth*4);
  cb.Ints[0]:=maxDepth;

with kernel.Run(64,uav,cb)do begin
  if Success then for var i in[0..maxDepth-1]do writeln(uav.Ints[i])
             else writeLn('FAIL');
  writeln('elapsed:',ElapsedTime_sec);
  Free;
end;

kernel.Free; uav.Free;