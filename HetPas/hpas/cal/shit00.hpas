const test:='
il_cs_2_0
dcl_cb cb0[48]

dcl_num_thread_per_group 64,1,1
dcl_raw_uav_id(0)
dcl_literal 1969, 0.5,1,0,0

mov r99.xy,vAbsTid.xy
itof r99.xy,r99.xy
add r99.xy,r99.xy,l1969.xx

mov r0.xy,r99.xy

iadd r0.xy,r0.xy,r0.xy
iadd r0.xy,r0.xy,r0.xy
iadd r0.y,r0.y,l1969.y
mov r1.x,cb0[47].y
uav_raw_store_id(0) mem.x, r0.x, r1.x
uav_raw_store_id(0) mem.x, r0.y, r1.x

endmain
end
';

var dev:=cal.devices[0];
dev.activate;
writeln(dev.dump);

var bigkernel:=test;

//bigkernel:=test;

var module:=dev.Context.NewModule(bigkernel);
writeln(module.disasm);

var rCB0:=dev.NewResource(rlPinned,4,790,0);
module['cb0']:=rCB0;
rCB0.Ints[47*4+1]:=$1234;

var rGlobal:=dev.NewResource(rlPinned,4,64*64,0);
module['uav0']:=rGlobal;

with Module.RunGrid(64,64,0) do begin
  WaitFor(false);
  if Success then begin
{    for var i:=0 to 15 do
      writeln(format('%.4x: %.8x %.8x %.8x %.8x',
        rGlobal.Ints[i*4],rGlobal.Ints[i*4+1],rGlobal.Ints[i*4+2],rGlobal.Ints[i*4+3]));}
  end else writeLn('FAIL');

  writeln('elapsed:',ElapsedTime_sec);
  Free;
end;


(* old hello world

const uav:=true;

const
  HelloIL_ps:=
'il_ps_2_0
dcl_cb cb0[1]
mov r0,g[0]
iadd r0,r0,cb0[0]
mov g[1],r0
end';

const
  HelloIL_cs:=
'il_cs_2_0
dcl_num_thread_per_group 64,1,1
dcl_cb cb0[1]
dcl_raw_uav_id(0)
dcl_literal l1,0,16,0,5
mov r2.x,l1.x
uav_raw_load_id(0) r0.xyzw, r2.x
iadd r0,r0,cb0[0]
iadd r0.x,r0.x,l1.w
mov r2.x,l1.y
uav_raw_store_id(0) mem, r2.x, r0
end';

var dev:=cal.devices[0];
dev.activate;
writeln(dev.dump);

var module:=dev.Context.NewModule(uav?HelloIl_cs:HelloIl_ps);

writeln(module.disasm);

var rCB0:=dev.NewResource(rlPinned,4,1,0);
module['cb0']:=rCB0;

var rGlobal:=dev.NewResource(rlPinned,4,2,1);
module[uav?'uav0':'g[]']:=rGlobal;

rCB0.IntVArray:=( 1, 2, 3, 4);
rGlobal.IntVArray:=(10,20,30,40);

with Module.RunGrid(64,1,0) do begin
  WaitFor(false);
  if Success then for var i:=0 to 7 do write(rGlobal.Ints[i],' ')
             else writeLn('FAIL');
  Free;
end;}

dev.Deactivate;

*)
